=========================================================
Instructions for installing gstlal on CentOS 5 on the LDG
=========================================================

.. contents:: Table of Contents

Introduction
============

These instructions are a quick start guide for running on the LDG on a cluster
using CentOS5 with the lscsoft gstreamer packages installed.  If this doesn't
sound like what you want then consult the more general instructions in INSTALL.
Note that these are greatly simplified instructions that assume knowledge of
the software and infrastructure.  Do not blindly cut-and-paste unless you know
what you are doing!

Environment
===========

NOTE:  These instructions assume that you do not use any of the lscsoft
environment scripts.  It is not clear what will happen if you do.  So if you
are not sure, don't!  Put the file .nolscsoft in your home directory to avoid
the execution of any lscsoft environment scripts.

This is an example bash environment script to set up the dependencies that are
already installed on the cluster, as well as lalsuite and gstlal.  It assumes
that lalsuite and gstlal are built in your home directory called gstlocal.
Please note that this environment script is an example, don't blindly
cut-and-paste it unless you know what you are doing.  Start by making a
similar environment script to this and sourcing it to set up your environment.
You will need to source it everytime you log in to the cluster in order to use
gstlal::

  #!/bin/bash

  # NOTICE: Here is an environment script that is presented in the hope that it
  # will be useful Please do not just blindy copy it, as you may want to modify
  # some of what it does to suit your system and environment. This assumes an
  # LDG cluster environment using CentOS 5.  (like CIT)

  # These are on the cluster
  # FIXME when pylal is released maybe we can just use all of lalsuite?
  for p in libframe libmetaio gst
  do
  PATH=/opt/lscsoft/${p}/bin:$PATH
  PKG_CONFIG_PATH=/opt/lscsoft/${p}/lib64/pkgconfig:/opt/lscsoft/${p}/lib/pkgconfig:$PKG_CONFIG_PATH
  PYTHONPATH=/opt/lscsoft/${p}/lib64/python2.4/site-packages:$PYTHONPATH
  done

  # This is an install prefix that does not get used anywhere but this script
  INSTALLPATH=${HOME}/gstlocal

  # These are environment variables that do get exported
  PATH=${INSTALLPATH}/bin:$PATH
  PKG_CONFIG_PATH=${INSTALLPATH}/lib64/pkgconfig:${INSTALLPATH}/lib/pkgconfig:$PKG_CONFIG_PATH
  PYTHONPATH=${INSTALLPATH}/lib64/python2.4/site-packages:$PYTHONPATH
  GST_PLUGIN_PATH=${INSTALLPATH}/lib/gstreamer-0.10:${GST_PLUGIN_PATH}

  export PATH PKG_CONFIG_PATH PYTHONPATH GST_PLUGIN_PATH

Software
========

It is assumed that all of the dependencies are available except lalsuite and
gstlal.  It is also assumed that you will build both lalsuite and gstlal to the
same directory.  Concretely, this example assumes that directory is ${HOME}/gstlocal.
Again, please do not just blindly cut-and-paste unless you know what you are doing.
You can checkout lalsuite from git by going here and following the instructions under
"Basic usage":

https://www.lsc-group.phys.uwm.edu/daswg/docs/howto/lalsuite-git.html#basic

In order to get gstlal, simply follow the same instructions, but replace lalsuite
with gstlal.  The repository is hosted at the same location.

Building lalsuite (from the top level directory)::
  
  $ ./00boot && ./configure --prefix=${HOME}/gstlocal --enable-condor && make install -j 

Descend into lalsuite to build pylal and glue. In the pylal and glue directories
run::

  $ python setup.py install --prefix=${HOME}/gstlocal

Building gstlal::

  $ ./00init.sh && ./configure --prefix=${HOME}/gstlocal && make install -j
  

Verifying the Installation
==========================

Hopefully everything worked, but if you are paranoid use this section to verify
the installation

To check that each component is installed correctly, do the following.

.. NOTE::  Do not run these commands from inside any of the respective source 
           trees as the presence of files in those directories with names 
           matching those referred to in these commands will confuse the tests.

glue
----

  ::
  
  $ python -c "from glue import segments ; print segments.__file__"
  

should not produce an error, and should print a filename located in your
directory tree (e.g. ${HOME}/gstlocal in the examples above)


pylal
-----
  
  ::
  
  $ python -c "from pylal import datatypes ; print datatypes.__file__"
  
should not produce an error, and should print a filename located in your
directory tree (e.g. ${HOME}/gstlocal in the examples above)
 

pygtk
-----

   ::

   $ python -c "import pygtk; pygtk.require('2.0'); import gobject; print gobject.glib_version"

   should not produce an error and should print the version corresponding to
   the version of glib in /opt/lscsoft/gst.

gstreamer
---------
  
  ::
  
  $ which gst-inspect
  $ gst-inspect coreelements
  

should not produce errors, and should print a filename located in your
directory tree (e.g. ${HOME}/gstlocal in the examples above)

gstlal
------
  
  ::
  
  $ gst-inspect gstlal
  
  should report information on the gstlal plugin, showing a Filename in the 
  ``${HOME}/gstlocal/lib/...`` tree, and there should be several elements provided
  by the plugin; and::
  
  $ ldd /path/to/local/lib/libgstlal.so
  
  should not produce an error, and should show that ``libgstbase-0.10.so.0``, 
  ``libgstreamer-0.10.so.0``, ``libgobject-2.0.so.0``, ``libgmodule-2.0.so.0``, 
  ``libgthread-2.0.so.0`` and ``libglib-2.0.so.0`` are all provided by files 
  located in the ``/opt/lscsoft/gst`` directory tree; and::
  
  $ python -c "from gstlal import pipeparts ; print pipeparts.__file__"
  
  should not produce an error, and should print a filename located in the 
  ``${HOME}/gstlocal`` directory tree.

