#!/usr/bin/env python
#
# Copyright (C) 2010  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import pygtk
pygtk.require('2.0')
import pygst
pygst.require('0.10')
import gstoption
from gstlal.option import OptionParser

from glue import segments
from pylal.datatypes import LIGOTimeGPS


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser()
	parser.add_option("--frame-cache", metavar = "filename", help = "Set the name of the LAL cache listing the LIGO-Virgo .gwf frame files (optional).  This is required unless --fake-data or --online-data is used in which case it must not be set.")
	parser.add_option("--online-data", action = "store_true", help = "Use online DMT-STRAIN instead of a frame file (optional).")
	parser.add_option("--fake-data", action = "store_true", help = "Instead of reading data from .gwf files, generate and process coloured Gaussian noise modelling the Initial LIGO design spectrum (optional).")
	parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the start time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the end time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--injections", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load injections (optional).")
	parser.add_option("--instrument", metavar = "name", help = "Set the name of the instrument to analyze, e.g. \"H1\" (required).")
	parser.add_option("--channel-name", metavar = "name", default = "LSC-STRAIN", help = "Set the name of the channel to process (optional).  The default is \"LSC-STRAIN\".")
	parser.add_option("--psd-fft-length", metavar = "seconds", type = "float", default = 4.0, help = "Set the length of the FFT windows used to measure the PSD (optional).")
	parser.add_option("--average-length", metavar = "seconds", type = "float", default = 64.0, help = "Set the time scale for the running mean (optional).  Default = 64.0.")
	parser.add_option("--median-samples", metavar = "samples", type = "int", default = 5, help = "Set the number of samples in the median history (optional).  Default = 5.")
	parser.add_option("--output", metavar = "filename", help = "Set the name of the movie file to write (required).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

	parser.add_option_group(gstoption.get_group())

	options, filenames = parser.parse_args()

	if sum(1 for option in ('frame_cache', 'fake_data', 'online_data') if getattr(options, option) is not None) != 1:
		raise ValueError, "must provide exactly one of --frame-cache, --fake-data, --online-data"

	required_options = ["gps_start_time", "gps_end_time", "instrument", "channel_name", "output"]
	missing_options = [option for option in required_options if getattr(options, option) is None]
	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

	options.gps_start_time = LIGOTimeGPS(options.gps_start_time)
	options.gps_end_time = LIGOTimeGPS(options.gps_end_time)
	options.seg = segments.segment(options.gps_start_time, options.gps_end_time)

	return options, filenames


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# parse command line
#


options, filenames = parse_command_line()


from gstlal.pipeutil import *
from gstlal.lloidparts import LLOIDHandler, mkLLOIDbasicsrc, DetectorData, mkelems_fast
from gstlal import pipeparts


#
# build pipeline
#


def build_pipeline(pipeline, head, psd_fft_length, average_length, median_samples, verbose = False):
	head = pipeparts.mkwhiten(pipeline, head, fft_length = psd_fft_length, average_samples = int(round(average_length / (psd_fft_length / 2) - 1)), median_samples = median_samples)
	pipeparts.mkfakesink(pipeline, head)
	head = pipeparts.mkqueue(pipeline, head, pad_name = "mean-psd", max_size_buffers = 4)

	head = pipeparts.mkspectrumplot(pipeline, head)
	return pipeparts.mkcapsfilter(pipeline, head, "video/x-raw-rgb, width=768, height=320")


#
# construct and run pipeline
#


mainloop = gobject.MainLoop()
pipeline = gst.Pipeline("psd")
handler = LLOIDHandler(mainloop, pipeline)

head = mkLLOIDbasicsrc(
	pipeline,
	gst.event_new_seek(
		1.0, gst.FORMAT_TIME, gst.SEEK_FLAG_KEY_UNIT,
		gst.SEEK_TYPE_SET, options.seg[0].ns(),
		gst.SEEK_TYPE_SET, options.seg[1].ns()
	),
	options.instrument,
	DetectorData(options.frame_cache, options.channel_name),
	options.fake_data,
	options.online_data,
	options.injections,
	options.verbose
)
head = mkelems_fast(
	pipeline,
	head,
	"audioresample", {"gap-aware": True, "quality": 9},
	"capsfilter", {"caps": gst.Caps("audio/x-raw-float,rate=%d" % 8192)}
)[-1]
head = build_pipeline(
	pipeline,
	head,
	options.psd_fft_length,
	options.average_length,
	options.median_samples,
	verbose = options.verbose
)
pipeparts.mkogmvideosink(pipeline, head, options.output, verbose = options.verbose)


#
# process segment
#


pipeline.set_state(gst.STATE_PLAYING)
mainloop.run()


#
# done
#
