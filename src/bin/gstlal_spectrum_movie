#!/usr/bin/env python
#
# Copyright (C) 2010  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import sys


from gstlal.pipeutil import *
from lloidparts import LLOIDHandler


from glue import segments
from pylal.datatypes import LIGOTimeGPS


from gstlal import pipeparts


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog ??",
		usage = "%prog [options]",
		description = "Stream-based inspiral analysis tool"
	)
	parser.add_option("--frame-cache", metavar = "filename", help = "Set the name of the LAL cache listing the LIGO-Virgo .gwf frame files (optional).  This is required unless --nds-host is used in which case it must not be set.")
	parser.add_option("--nds-host", metavar = "hostname", help = "Set the name of the NDS server (optional).  This is required unless --frame-cache is used in which case it must not be set.")
	parser.add_option("--instrument", metavar = "name", help = "Set the name of the instrument to analyze, e.g. \"H1\" (required).")
	parser.add_option("--channel-name", metavar = "name", help = "Set the name of the channel to process, e.g. \"LSC-STRAIN\" (required).")
	parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the start time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the end time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--psd-fft-length", metavar = "seconds", type = "float", default = 4.0, help = "Set the length of the FFT windows used to measure the PSD (optional).")
	parser.add_option("--average-length", metavar = "seconds", type = "float", default = 64.0, help = "Set the time scale for the running mean (optional).  Default = 64.0.")
	parser.add_option("--median-samples", metavar = "samples", type = "int", default = 5, help = "Set the number of samples in the median history (optional).  Default = 5.")
	parser.add_option("--injections", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load injections (optional).  The default is 2.0.")
	parser.add_option("--output", metavar = "filename", help = "Set the name of the movie file to write (required).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

	options, filenames = parser.parse_args()

	if (options.frame_cache is not None) + (options.nds_host is not None) != 1:
		raise ValueError, "must provide exactly one of --frame-cache or --nds-host"

	required_options = ["gps_start_time", "gps_end_time", "instrument", "channel_name"]
	missing_options = [option for option in required_options if getattr(options, option) is None]
	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

	options.gps_start_time = LIGOTimeGPS(options.gps_start_time)
	options.gps_end_time = LIGOTimeGPS(options.gps_end_time)
	options.seg = segments.segment(options.gps_start_time, options.gps_end_time)

	return options, filenames


#
# =============================================================================
#
#                                   Pipeline
#
# =============================================================================
#


#
# build pipeline
#


def build_source(pipeline, instrument, channel_name, rate, frame_cache = None, nds_host = None, injection_filename = None, verbose = False):
	# require exactly 1
	assert (frame_cache is None) ^ (nds_host is None)

	if frame_cache is not None:
		head = pipeparts.mkframesrc(pipeline, instrument = instrument, location = frame_cache, channel_name = channel_name)
	else:
		head = pipeparts.mkndssrc(pipeline, nds_host, instrument, channel_name)
	if verbose:
		head = pipeparts.mkprogressreport(pipeline, head, "Reading")
	if injection_filename is not None:
		head = pipeparts.mkinjections(pipeline, head, injection_filename)
	return pipeparts.mkcapsfilter(pipeline, pipeparts.mkresample(pipeline, head, quality = 9), "audio/x-raw-float, rate=%d" % rate)


def build_pipeline(pipeline, head, psd_fft_length, average_length, median_samples, verbose = False):
	head = pipeparts.mkwhiten(pipeline, head, fft_length = psd_fft_length, average_samples = int(round(average_length / (psd_fft_length / 2) - 1)), median_samples = median_samples)
	pipeparts.mkfakesink(pipeline, head)
	head = pipeparts.mkqueue(pipeline, head, pad_name = "mean-psd", max_size_buffers = 4)

	head = pipeparts.mkspectrumplot(pipeline, head)
	return pipeparts.mkcapsfilter(pipeline, head, "video/x-raw-rgb, width=768, height=320")


def build_sink(pipeline, head):
	head = pipeparts.mkcolorspace(pipeline, head)
	pipeparts.mkvideosink(pipeline, head)


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# parse command line
#


options, filenames = parse_command_line()


#
# construct and run pipeline
#


mainloop = gobject.MainLoop()

pipeline = gst.Pipeline("psd")
head = build_source(
	pipeline,
	options.instrument,
	options.channel_name,
	8192,	# Hz
	frame_cache = options.frame_cache,
	nds_host = options.nds_host,
	injection_filename = options.injections,
	verbose = options.verbose
)
head = build_pipeline(
	pipeline,
	head,
	options.psd_fft_length,
	options.average_length,
	options.median_samples,
	verbose = options.verbose
)
build_sink(
	pipeline,
	head
)

handler = LLOIDHandler(mainloop, pipeline, verbose = options.verbose)


#
# process segment
#


pipeline.set_state(gst.STATE_PAUSED)
pipeline.seek(1.0, gst.Format(gst.FORMAT_TIME), gst.SEEK_FLAG_FLUSH, gst.SEEK_TYPE_SET, options.seg[0].ns(), gst.SEEK_TYPE_SET, options.seg[1].ns())
pipeline.set_state(gst.STATE_PLAYING)
mainloop.run()


#
# done
#
