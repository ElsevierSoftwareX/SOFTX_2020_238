#!/usr/bin/env python
# Copyright (C) 2010  Erin Kara, Chad Hanna
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#


import sys, os
from glue import cbcwebpage, lal
from pylal import git_version
from pylal.followup_page import *

__author__ = "Erin Kara <ekara@ligo.caltech.edu>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date


#######################################################################
# Main Code
#######################################################################


# Make an instance of cbcpage
page = cbcwebpage.cbcpage(title="gstlal 8-hour Job Page")


# Section for Correlations between sngl_inspiral parameters
correlations = page.add_subpage("correlations","Correlations","Correlations")


snr_chisq = correlations.add_section("snr_chisq_H1","Chisq SNR for H1 Triggers")
snr_chisq.add_table(cbcwebpage.image_glob("snr_chisq_H1.png"), "snr_chisq_H1", "Chisq vs. SNR for H1 Triggers")
snr_chisq.add_table(cbcwebpage.image_glob("snr_chisq_L1.png"), "snr_chisq_L1", "Chisq vs. SNR for L1 Triggers")


m1m2 = correlations.add_section("m1_m2_H1","Mass Distribution for H1 Triggers")
m1m2.add_table(cbcwebpage.image_glob("m1_m2_H1.png"), "m1_m2_H1", "mass1 vs. mass2 for H1 Triggers")
m1m2.add_table(cbcwebpage.image_glob("m1_m2_L1.png"), "m1_m2_L1", "mass1 vs. mass2 for L1 Triggers")


snr_endtime = correlations.add_section("snr_endtime_H1","SNR Time Series for H1 Triggers")
snr_endtime.add_table(cbcwebpage.image_glob("snr_endtime_H1.png"), "nr_endtime_H1", "SNR vs. end_time for H1 Triggers")
snr_endtime.add_table(cbcwebpage.image_glob("snr_endtime_L1.png"), "snr_endtime_L1", "SNR vs. end_time for H1 Triggers")


snr_deff = correlations.add_section("snr_deff_H1", "Effective Distace vs. SNR for H1 Triggers")
snr_deff.add_table(cbcwebpage.image_glob("snr_effdistance_H1.png"), "snr_deff_H1", "Effective Distace vs. SNR for H1 Triggers")
snr_deff.add_table(cbcwebpage.image_glob("snr_effdistance_L1.png"), "snr_deff_L1", "Effective Distace vs. SNR for L1 Triggers")



# Parse the cache.
try:
	coinc_info, cache = cache_parser("followup_pipe.cache")
except ValueError:
	sys.exit(0)
	
# Loop over different "searches" like full data, etc.
for search, coincs in coinc_info.items():
	events = []


	# pull out the events and sort them
	for coinc in coincs:
		events.append(Coinc(coinc, search, cache))
	events.sort(key=lambda x: x.rank)


	# loop over the followed up events
	for event in events:
		print >>sys.stderr, "processing coinc@%s in %s" % (event.coinctime, search)
		key = (str(event.coinctime))
		page.add_subpage(key,"my new page",link_text=key)
		#section for param table
		if search.lower() != "gps_only": event.write_param_table(page.subpages[key])
		#section for qscans
		event.add_htqscan(page.subpages[key])
		#section for seismic qscans
		event.add_seismicqscan(page.subpages[key])
		#section for rds qscans (CVT)
		event.add_rdsqscan(page.subpages[key])
		#dq
		event.add_dq(page.subpages[key])


# write the page to disk
page.write()


