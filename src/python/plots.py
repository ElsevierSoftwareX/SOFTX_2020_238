# Copyright (C) 2010  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

Plotting tools, mostly for inspiral searches.

"""
__author__       = "Leo Singer <leo.singer@ligo.org>"
__organization__ = ["LIGO", "California Institute of Technology"]
__copyright__    = "Copyright 2010, Leo Singer"


import gstlal.pipeutil # FIXME: needed because we have GStreamer stuff mixed in where it shouldn't be
import pylab

"""Dictionary of strings for useful units."""
units = {
	'msun': r"$\mathrm{M}_\odot$",
}


"""Dictionary of strings for useful plot labels.  Keys are generallly named the
same as a matching ligolw column."""
labels = {
	'mtotal': r"total mass, $M$ (%s)" % units['msun'],
	'mchirp': r"chirp mass, $\mathcal{M}_\mathrm{chirp}$ (%s)" % units['msun'],
	'mass1': r"component mass 1, $M_1$ (%s)" % units['msun'],
	'mass2': r"component mass 2, $M_2$ (%s)" % units['msun'],
	'snr': r"SNR $\rho$",
	'eff_snr': r"effective SNR $\rho_\mathrm{eff}$",
	'combined_snr': r"combined SNR, $\sqrt{\sum\rho^2}$",
	'combined_eff_snr': r"combined effective SNR, $\sqrt{\sum\rho_\mathrm{eff}^2}$",
	'chisq': r"$\chi^2$",
	'tau0': r"$\tau0$", # FIXME: what does this parameter actually represent?
	'tau3': r"$\tau3$", # FIXME: what does this parameter actually represent
}


def plotbank(in_filename, out_filename=None):
	"""Plot template bank parameters from a file generated by lalapps_tmpltbank."""
	from glue.ligolw import utils, lsctables
	table = lsctables.table.get_table(
		utils.load_filename(in_filename, gz=in_filename.endswith('gz')),
		lsctables.SnglInspiralTable.tableName
	)
	pylab.figure()
	pylab.suptitle('%s: placement of %d templates' % (in_filename, len(table)))
	colnames = (('mass1', 'mass2'), ('mchirp', 'mtotal'), ('tau0', 'tau3'))
	for i, (col1, col2) in enumerate(colnames):
		pylab.subplot(1, len(colnames), i + 1)
		pylab.plot(table.get_column(col1), table.get_column(col2), ',')
		pylab.xlabel(labels[col1])
		pylab.ylabel(labels[col2])
	if out_filename is None:
		pylab.show()
	else:
		pylab.savefig(out_filename)
	pylab.close()


def plotsvd(in_filename, out_filename=None):
	"""Plot heatmap of orthogonal template components."""
	from gstlal.gstlal_svd_bank import read_bank
	bank = read_bank(in_filename)
	ntemplates = 0
	for bf in bank.bank_fragments:
		next_ntemplates = ntemplates + bf.orthogonal_template_bank.shape[0]
		pylab.imshow(
			pylab.log10(abs(bf.orthogonal_template_bank[::-1,:])),
			extent = (bf.end, bf.start, ntemplates, next_ntemplates),
			hold=True, aspect='auto'
		)
		pylab.text(bf.end + bank.filter_length / 30, ntemplates + 0.5 * bf.orthogonal_template_bank.shape[0], '%d Hz' % bf.rate, size='x-small')
		ntemplates = next_ntemplates

	pylab.xlim(0, 1.15*bank.filter_length)
	pylab.ylim(0, 1.05*ntemplates)
	pylab.colorbar().set_label('$\mathrm{log}_{10} |u_{i}(t)|$')
	pylab.xlabel(r"Time $t$ until coalescence (seconds)")
	pylab.ylabel(r"Basis index $i$")
	pylab.title(r"Orthonormal basis templates $u_{i}(t)$")
	if out_filename is None:
		pylab.show()
	else:
		pylab.savefig(out_filename)
	pylab.close()


def plotpsd(in_filename, out_filename=None):
	"""Plot power spectrum for a detector."""
	from gstlal.gstlal_reference_psd import read_psd
	psd = read_psd(in_filename)
	pylab.loglog(
		pylab.arange(len(psd.data))*psd.deltaF + psd.f0,
		pylab.sqrt(psd.data)
	)
	pylab.xlim(10, 2048);
	pylab.ylim(1e-23, 1e-18);
	pylab.xlabel("Frequency (Hz)")
	pylab.ylabel(r"Amplitude spectral density ($1/\sqrt{\mathrm{Hz}}$)")
	pylab.title(r"$h(t)$ spectrum used for singular value decomposition")
	if out_filename is None:
		pylab.show()
	else:
		pylab.savefig(out_filename)
	pylab.close()
