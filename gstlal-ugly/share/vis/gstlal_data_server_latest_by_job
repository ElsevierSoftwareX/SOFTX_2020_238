#!/usr/bin/python

import gviz_api
import h5py
import os,sys
import cgi
import cgitb
cgitb.enable()
form = cgi.parse()
import numpy
from gstlal import llweb
import re
#import pyparsing

print "Content-type: application/json"
print

# we have to get a query according to the google standard
assert "tq" in form
assert "tqx" in form
reqId = form["tqx"][0].split(":")[1]
query = form["tq"][0]

# Figure out if a GPS time is being specified, else assume "now"
if "gpstime" in query:
	regex = re.compile("[0-9]{10}")
	query_time = regex.search(query).group(0) 
else:
	query_time = int(llweb.now())

# FIXME don't hard code
base_path = "/home/gstlalcbctest/engineering/10/S6/bns"

#
# "SQL" parser.  FIXME. First, google query langauge isn't really SQL and
# second, if this keeps going we need to switch to a parsing library e.g.,
# pyparsing.  For now this is likely to be a collection of once-offs.
#

#
# Data types
#
for dt in (("latency_history", "Latency (s)"), 
	   ("snr_history", "SNR")
	  ):
	if dt[0] in query:
		data_type = dt[0]
		path = base_path + "/aggregator"
		for level in str(query_time)[0:6]:
			path += "/%s" % level

		if "status by node" in query:
			# FIXME at 10,000 second boundaries this query won't
			# return the latest 25 samples, we need to look back a
			# directory
			out_data = []
			path += "/by_job"
			for job in os.listdir(path):
				fname = "%s/%s/median/%s.hdf5" % (path, job, data_type)
				f = f = h5py.File(fname, "r")
				this_data = numpy.array(f["data"])[-25:]
				if len(this_data) > 0:
					mindata = numpy.min(this_data)
					maxdata = numpy.max(this_data)
					meandata = numpy.mean(this_data)
					std = numpy.std(this_data)
					out_data.append([job, mindata, meandata-std/2., meandata+std/2., maxdata])
					f.close()
			description = [
				("job", "string"),
				("std dev", "number"),
				("job median-std/2", "number"),
				("job median+std/2", "number"),
				("job max", "number")
				]
			
			data_table = gviz_api.DataTable(description)
			data_table.LoadData(out_data)
			print data_table.ToJSonResponse(order_by = "job", req_id = reqId)
			sys.exit()

		if "where node is all" in query:
			# FIXME at 10,000 second boundaries this query won't
			# return all the relevant samples
			# FIXME decide how many samples to return
			out_data = []
			fname = "%s/median/%s.hdf5" % (path, data_type)
			f = h5py.File(fname, "r")
			out_data.extend([[this_time, this_data] for this_time, this_data in zip(numpy.array(f["time"]), numpy.array(f["data"]))])
			f.close()
			description = [("time", "number"), (dt[0], "number")]
			data_table = gviz_api.DataTable(description)
			data_table.LoadData(out_data)
			print data_table.ToJSonResponse(order_by = "time", req_id = reqId)
			sys.exit()

		if "now" in query:
			out_data = []
			fname = "%s/median/%s.hdf5" % (path, data_type)
			f = h5py.File(fname, "r")
			out_data = [[float(f["data"][-1])]]
			f.close()
			description = [(dt[1], "number")]
			data_table = gviz_api.DataTable(description)
			data_table.LoadData(out_data)
			print data_table.ToJSonResponse(req_id = reqId)
			sys.exit()

for dt in (("horizon_history", "time", "horizon", "(Mpc)"), ("noise", "time", "noise", "|n(t)|"), ("psd", "freq", "asd", "ASD")):
	if dt[0] in query:
		data_type = dt[0]
		latest_time_path = base_path + "/dq"
		out_data = []
		path = latest_time_path

		datadict = {}
		latest = {}
		latest["H1"] = 0
		latest["L1"] = 0
		for ifo in ("H1", "L1"):
			datadict[ifo] = {} 
			try:
				fname = "%s/%s/%s.hdf5" % (path, ifo, data_type)
				f = f = h5py.File(fname, "r")
				for t,d in zip(f[dt[1]], f[dt[2]]):
					datadict[ifo][t] = d
					latest[ifo] = (t,d)
				f.close()
			except IOError:
				pass

		if "now" in query:
			out_data.append([latest["H1"][1], latest["L1"][1]])
			description = [
				("H1 %s" % (dt[3],), "number"),
				("L1 %s" % (dt[3],), "number")
				]
		else:
			# FIXME don't harcode
			for t in set(datadict["H1"]) | set(datadict["L1"]):
				out_data.append([t, datadict["H1"].setdefault(t,0), datadict["L1"].setdefault(t,0)])
			description = [
				(dt[1], "number"),
				("H1 %s" % dt[3], "number"),
				("L1 %s" % dt[3], "number")
				]
		
		data_table = gviz_api.DataTable(description)
		data_table.LoadData(out_data)
		print data_table.ToJSonResponse(order_by = "time", req_id = reqId)
