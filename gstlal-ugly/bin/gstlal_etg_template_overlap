#!/usr/bin/env python

# Copyright (C) 2018 Patrick Godwin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.



####################
# 
#     preamble
#
####################   


from optparse import OptionParser
import os
import sys

import numpy

import lal

from gstlal import idq_utils

###############################
# 
#       command line parser
#
###############################

def parse_command_line():

	parser = OptionParser(description = __doc__)

	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	parser.add_option("-m", "--mismatch", type = "float", default = 0.05, help = "Mismatch between templates, mismatch = 1 - minimal match. Default = 0.05.")
	parser.add_option("-q", "--qhigh", type = "float", default = 100, help = "Q high value for half sine-gaussian waveforms. Default = 100.")

	# parse the arguments and sanity check
	options, args = parser.parse_args()

	return options, args

####################
# 
#       main
#
####################   

if __name__ == '__main__':
	options, args = parse_command_line()

    # common parameters we will use throughout
	max_samp_rate = 2048
	min_samp_rate = 32
	n_rates = int(numpy.log2(max_samp_rate/min_samp_rate) + 1)

	# generate templates for each rate considered
	rates = [min_samp_rate*2**i for i in range(n_rates)]
	templates = {}
	for rate in rates:
		flow = rate/4.*0.8
		fhigh = rate/2.*0.8
		qhigh = options.qhigh
		qlow = 4
		hsg_waveforms = idq_utils.HalfSineGaussianGenerator((flow, fhigh), (qlow, qhigh), rate, mismatch = options.mismatch)
		#basis_params[(channel, rate)] = hsg_waveforms.parameter_grid
		templates[rate] = [waveform for waveform in hsg_waveforms.generate_templates()]

	# calculate overlap for each template, find maximum
	overlaps = {rate: [] for rate in rates}
	for rate in rates:
		for this_template in templates[rate]:
			overlaps[rate].append(max(sorted([numpy.dot(this_template,template) for template in templates[rate]])[:-1]))

	print >>sys.stderr, "min overlap specified: %f" % (1 - options.mismatch)
	print >>sys.stderr, "max template overlap: %f" % max([max(overlaps[rate]) for rate in rates])
	print >>sys.stderr, "min template overlap: %f" % min([min(overlaps[rate]) for rate in rates])

