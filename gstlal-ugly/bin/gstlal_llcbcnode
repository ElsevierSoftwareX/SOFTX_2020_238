#!/usr/bin/env python
#
# Copyright (C) 2012  Chad Hanna
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys
import cgi
import cgitb
import os
os.environ["MPLCONFIGDIR"] = "/tmp"
import matplotlib
matplotlib.use('Agg')
import numpy
import matplotlib.pyplot as plt
cgitb.enable()
form = cgi.FieldStorage()

def plot(dataurl, plottype, xlabel = "", ylabel = "", title = ""):
	fig = plt.figure(figsize=(5,3.5),)
	fig.patch.set_alpha(0.0)
	h = fig.add_subplot(111, axisbg = 'k')
	plt.subplots_adjust(bottom = 0.2, left = .16)
	plt.grid(color="w")

	try:
		data = numpy.loadtxt(dataurl)
	except IOError:
		print "<h2>Data could not be loaded</h2>"
		return
	except ValueError:
		print "<h2>Data is mis formatted, perhaps the webserver returned an error</h2>"
		return

	if plottype == "history":
		h.semilogy(data[:,0] - data[-1,0], data[:,1], 'w', alpha=0.75, linewidth=2)
		plt.ylim([min(data[:,1]), max(data[:,1])])
		locs = [min(data[:,1]), numpy.median(data[:,1]), max(data[:,1])]
		labels = ['%.2g' % lab for lab in locs]
		plt.yticks(locs, labels)
	if plottype == "plot":
		h.plot(data[:,0], data[:,1], 'w', alpha=0.75, linewidth=2)
	if plottype == "loglog":
		x = data[:,0]
		y = data[:,1]
		y[y == 0] = 1e-100
		h.loglog(x, y, 'w', alpha=0.75, linewidth=2)
	if plottype == "hist":
		from scipy.interpolate import interp1d
		x = numpy.linspace(data[0,0], data[-1,0], 100)
		f = interp1d(data[:,0], data[:,1], kind='cubic')
		y = f(x)
		y[y<0] = 0.
		h.fill_between(x, y,  alpha=0.75, linewidth=2, facecolor="w", color="w")

	plt.xlabel(xlabel)
	plt.ylabel(ylabel)
	plt.title(title)
	plt.savefig(sys.stdout, format="svg")


def livetime_plot(disconturl, livetimeurl, xlabel = "", ylabel = "", title = ""):
	fig = plt.figure(figsize=(5,3),)
	fig.patch.set_alpha(0.0)
	h = fig.add_subplot(111, axisbg = 'k', aspect='equal')
	plt.subplots_adjust(bottom = 0, left = .25, top = 1, right = .75)
	plt.grid(color="w")

	try:	
		livetimedata = numpy.loadtxt(livetimeurl)
		discontdata = numpy.loadtxt(disconturl)
	except IOError:
		print "<h2>Data could not be loaded</h2>"
		return

	dt = livetimedata[2]
	lt = livetimedata[1]
	discont = discontdata[1]
	data = [dt, lt, discont]
	explode = [0.0, 0, 0.15]
	labels = ["Dead : %g (s)" % dt, "Live : %g (s)" % lt, "Drop : %g (s)" % discont]

	h.pie(data, shadow=True, explode = explode, labels = labels, autopct='%1.1f%%', colors = ('0.5', '1.0', (0.7, 0.7, 1.)))

	plt.xlabel(xlabel)
	plt.ylabel(ylabel)
	plt.title(title)
	plt.savefig(sys.stdout, format="svg")


if "dir" not in form:
	raise ValueError("must specify dir")
if "id" not in form:
	raise ValueError("must specify id")

baseurl = '%s/%s' % (form.getvalue("dir"), form.getvalue("id"))

print >>sys.stdout, 'Cache-Control: no-cache, must-revalidate'
print >>sys.stdout, 'Expires: Mon, 26 Jul 1997 05:00:00 GMT'
print >>sys.stdout, 'Content-type: text/html\r\n'

print """
<html>
<head>
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">
<meta http-equiv="CACHE-CONTROL" content="NO-CACHE">
<meta http-equiv="refresh" content="300">
</head>
<body bgcolor=#E0E0E0>
<img src="../lcbo.jpg"> <font size=10>Low-latency Compact Binary Online</font><hr><br>
"""

print "<table face='Arial'>"

print "<tr><td><div id='canvasa'>"
plot(baseurl+'_latency_history.txt', "history", ylabel = "Latency (s)", xlabel = "Time since last trigger (s)")
print "</div></td>"

print "<td><div id='canvasb'>"
plot(baseurl+'_latency_histogram.txt', "hist", ylabel = "Count", xlabel = "Latency (s)")
print "</div></td>"

print "<td><div id='canvasc'>"
plot(baseurl+'_snr_history.txt', "history", ylabel = "SNR", xlabel = "Time since last trigger (s)")
print "</div></td>"

print "<td><div id='canvasd'>"
plot(baseurl+'_ram_history.txt', "history", ylabel = "RAM (GB)", xlabel = "Time before now (s)")
print "</div></td></tr>"

print"</table>"


# Pie table
print "<table face='Arial'><tr>"
for ifo in ("H1", "L1", "V1"):
	print "<td><div id='canvas%spie'>" % (ifo,)
	try:
		livetime_plot(baseurl+'_%sstrain_add_drop.txt' % ifo, baseurl+'_%sstate_vector_on_off_gap.txt' % ifo, title = ifo)
	except:
		print "could not get livetime data for ", ifo 
	print "</div></td>"
print"</tr></table>"

# Psd table
print "<table face='Arial'><tr>"
for ifo in ("H1", "L1", "V1"):
	print "<td><div id='canvas%spsd'>" % (ifo,)
	plot(baseurl+'_%spsd.txt' % ifo, "loglog", ylabel = "Power (strain^2/Hz)", xlabel = "Frequency (Hz)", title = ifo)
	print "</div></td>"
print"</tr></table>"

print "</body>"

