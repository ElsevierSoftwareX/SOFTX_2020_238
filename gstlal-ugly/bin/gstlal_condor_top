#!/usr/bin/env python

from optparse import OptionParser
import sched, time, os, sys, subprocess, re, pwd
import numpy as np


def parse_command_line():
	parser = OptionParser(description = __doc__)
	parser.add_option("-u", "--username", help = "User name.")
	parser.add_option("-f", "--trigger-pipe", metavar = "filename", help = "Set path to run trigger_pipe.sh file.")
	parser.add_option("-d", "--dag-number", metavar = "value", type = "int", default = 1, help = "dag number in output of condor_q -dag username")

	options, filenames = parser.parse_args()

	if options.username is None:
		options.username = pwd.getpwuid(os.getuid()).pw_name

	if options.trigger_pipe is None:
		raise ValueError("Must specify --trigger-pipe")

	return options, filenames

# input params
#username = 'gstlalcbc'
#trigger_pipe ='/work/gstlalcbc/observing/2/offline/C00/chunk_1_1164556817_1166482817_run_3/trigger_pipe.sh' 

options, filenames = parse_command_line()

username_search = ' ' + options.username + ' '

# Run condor_q -dag -nobatch username
command = 'condor_q -dag -nobatch ' + options.username
cq_out = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
cq_out = cq_out.communicate()[0].splitlines()

# Get the dag condor_id by searching for the usename:
dag_id = [line for line in cq_out if username_search in line][options.dag_number-1].split()[0]
path_to_log = '/localscratch/'+options.username+'/dag-logs/trigger_pipe.dag-'+dag_id[:-2]+'.nodes.log'

# Define the prefixes to search for:
#prefixes=['gstlal_reference_psd_','gstlal_inspiral_','gstlal_inspiral_inj_']
prefixes=['gstlal_reference_psd_','gstlal_svd_bank_','gstlal_inspiral_injection_snr_','gstlal_inspiral_','gstlal_inspiral_inj_']

# Initialize the results list to zero:
results=[]

# If an item in the output from condor_q contains our prefix and the hex
# regular expression, then add it to the results list. 
for pre in prefixes:
	results.extend([line for line in cq_out if re.search(pre+'[0-9A-F]',line) is not None])

# Check to see is any matches
if not results:
	print "No matches found in condor_q"
	exit()
else:
	print "job_name condor_id ip_address pid cpu% mem%"

# Open trigger_pipe.sh, store in buffer:
with (open(options.trigger_pipe,'r')) as pipe:
	pipe_buf = pipe.readlines()
	pipe.close()

# Loop over all jobs
for r in results:
	# Split up the current line: 
	split_list = r.split()

	# Get the job name:
	job_name = split_list[1][2:]

	# Get the condorID:
	condor_id = split_list[0]

	# Get the IP adddress of the current job
	for line in open(path_to_log):
		if "001 ("+condor_id in line:
			ip_address = line.split()[8].split(':')[0][1:]

	# Search trigger_pipe.sh	
	for n, line in enumerate(pipe_buf):
		if job_name in line:
			search_command = pipe_buf[n+1]

	# ssh into the IP address, run ps aux, grep for the output of the command.
	try:
		command = 'ssh ' + ip_address + ' ps aux | grep "' + search_command.strip() + '"'
	except NameError:
		print "No matches found, check dag number (condor_q -dag)"
		exit()
	sshout = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
	pid = sshout.communicate()[0].split('\n', 1)[0].split()[1]

	# ssh into the IP address, run top with PID number, get out cpu and memory usage
	command = 'ssh ' + ip_address + ' top b -n 1 -p ' + pid
	sshout = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
	sshout = sshout.communicate()[0].splitlines()[-1]
	cpu = sshout.split()[8]
	mem = sshout.split()[9]

	print job_name, condor_id, ip_address, pid, cpu, mem 

