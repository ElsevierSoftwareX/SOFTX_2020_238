#!/usr/bin/env python
#
# Copyright (C) 2012  Kipp Cannon, Chad Hanna, Drew Keppel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys, os
from pylal import rate
os.environ["MPLCONFIGDIR"] = "/tmp"
import matplotlib
matplotlib.use('Agg')
import pylab
import numpy
from scipy.stats import chi2
from glue.ligolw import utils
import copy
import itertools
from gstlal import far
import StringIO,base64
import cgi
import cgitb
cgitb.enable()
form = cgi.FieldStorage()
import time
import lal

from glue.ligolw import ligolw, table, lsctables, param, array
array.use_in(ligolw.LIGOLWContentHandler)
param.use_in(ligolw.LIGOLWContentHandler)
lsctables.use_in(ligolw.LIGOLWContentHandler)

from ligo.gracedb.rest import GraceDb
import ast

def now():
	return float(lal.UTCToGPS(time.gmtime()))

def to_png_image(out):
	f = StringIO.StringIO()
	pylab.savefig(f, format="png")
	print >>out, '<img src="data:image/png;base64,',base64.b64encode(f.getvalue()),'"></img>'
	f.close()

def header(f):
	print >> f, """
<head>
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">
<meta http-equiv="CACHE-CONTROL" content="NO-CACHE">
<meta http-equiv="refresh" content="300">
  <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/base/jquery-ui.css" />
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
  <script type="text/javascript"> $(function() {
    $("#accordion").accordion({
    });

  });</script>
</head>
<body>
	"""

	# title
	print >> f, """
<font size=10>Likelihood</font><font size=6 color=#707070><b><right> GPS:%d Local Time: %s </right></b><br></font><hr><br>
	""" % (int(now()), time.strftime("%a, %d %b %Y %H:%M:%S %Z", time.localtime()))

	print >>f, '<div id="accordion">'

if len(sys.argv) == 1:
	xmldoc = utils.load_filename(filename = None, contenthandler = ligolw.LIGOLWContentHandler)
	lv_table = table.get_table(xmldoc, "LVAlert:table")
	for r in lv_table:
        	if r.alert_type == "new":
		        gid = r.uid
else:
	gid = sys.argv[1]

fname = "%s_snrchi.html" % gid
f = open(fname, "w")

header(f)

gracedb = GraceDb()
fdict = ast.literal_eval(gracedb.files(gid).read().strip())
xmldoc, checksum = utils.load_fileobj(gracedb.get(fdict['coinc.xml']), contenthandler = ligolw.LIGOLWContentHandler)
sngl_inspiral_table = lsctables.table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)
params = lsctables.table.get_table(xmldoc, lsctables.ProcessParamsTable.tableName)
snr_chisq_dict = dict(((ifo,(None,None)) for ifo in ['H1','L1', 'V1']))
for r in sngl_inspiral_table:
	snr_chisq_dict[r.ifo] = (r.snr, r.chisq)
for r in params:
	if r.program == "gstlal_inspiral" and r.param == "--likelihood-file":
		path = r.value

likelihood_data = far.LocalRankingData.from_xml(utils.load_url(path, contenthandler = ligolw.LIGOLWContentHandler))

print >> sys.stderr, "smooth" in form

if "smooth" in form:
	likelihood_data.smooth_distribution_stats()
	counts = likelihood_data.distributions.background_pdf
	inj = likelihood_data.distributions.injection_pdf
else:
	counts = likelihood_data.distributions.background_rates
	inj = likelihood_data.distributions.injection_rates

bgcol = (224/255.,224/255.,224/255.)

likely = copy.deepcopy(inj)
for i, ifo in enumerate(['H1','L1', 'V1']):
	snrm, chisqm = snr_chisq_dict[ifo]
	print >>f, "<h1>%s SNR / CHISQ stats</h1>" % ifo
	print >>f, "<div>"
	likely[ifo+"_snr_chi"].array /= counts[ifo+"_snr_chi"].array
	for name, obj in (("background", counts), ("injections", inj), ("likelihood", likely)):
		fig = pylab.figure(figsize=(6,4), facecolor = 'g')
		fig.patch.set_alpha(0.0)
		#pylab.gray()
		H1 = obj[ifo+"_snr_chi"].array
		snr = obj[ifo+"_snr_chi"].bins[0].centres()[1:-1]
		chi = obj[ifo+"_snr_chi"].bins[1].centres()[1:-1]
		chi[0] = 0 # not inf
		ax = pylab.subplot(111)
		pylab.pcolormesh(snr, chi, numpy.log10(H1.T +1)[1:-1,1:-1])
		if snrm is not None and chisqm is not None:
			pylab.plot(snrm, chisqm / snrm / snrm, 'ko', mfc = 'None', ms = 14, mew=4)
		if "Log" in str(obj[ifo+"_snr_chi"].bins[0]):
			ax.set_xscale('log')
		if "Log" in str(obj[ifo+"_snr_chi"].bins[1]):
			ax.set_yscale('log')
		pylab.colorbar()
		pylab.xlabel('SNR')
		pylab.ylabel('reduced chi^2 / SNR^2')
		pylab.ylim([chi[1], chi[-1]])
		pylab.xlim([snr[1],snr[-1]])
		pylab.title('%s: %s log base 10 (number + 1)' % (ifo, name))
		pylab.grid(color=(0.1,0.4,0.5), linewidth=2)
		to_png_image(f)
	print >>f, "</div>"

print >>f, "</div>"
print >>f, "</body>"
print >>f, "</html>"

f.close()
gracedb.writeLog(gid, "SNR/Chisq", filename = fname, filecontents = open(fname).read())
