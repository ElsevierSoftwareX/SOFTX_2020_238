#!/usr/bin/env python3
# Copyright (C) 2010  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""
GAB: GStreamer Audio Bridge
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"



# Command line interface

from optparse import OptionParser, Option

parser = OptionParser(description = __doc__, option_list = [
	Option("--host", metavar="example.com", help="hostname for NDS connection"),
	Option("--port", metavar="INT", type=int, help="port for NDS connection (default=31200)", default=31200),
])

opts, args = parser.parse_args()

required_options = ("host", "port")

for key in required_options:
	if getattr(opts, key) is None:
		parser.error("Required argument --%s not provided" % key.replace('_', '-'))

if len(args) > 0:
	parser.error("Too many command line arguments")



# Late imports

import nds
try:
	import json
except ImportError:
	# pre Python 2.6
	import simplejson as json
import httplib
import threading
import subprocess
from urlparse import urlparse, parse_qs
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler


doc = """
<!DOCTYPE html>
<html>
<head>
	<title>GStreamer Audio Bridge - %(host)s:%(port)d</title>
	<style type="text/css" title="currentStyle">
		@import "//cdnjs.cloudflare.com/ajax/libs/datatables/1.9.4/css/demo_page.min.css";
		@import "//cdnjs.cloudflare.com/ajax/libs/datatables/1.9.4/css/demo_table_jui.min.css";
		@import "//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.2/css/smoothness/jquery-ui-1.10.2.custom.min.css";
	</style>
	<script type="text/javascript" language="javascript" src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
	<script type="text/javascript" language="javascript" src="//cdnjs.cloudflare.com/ajax/libs/datatables/1.9.4/jquery.dataTables.min.js"></script>
	<script type="text/javascript" charset="utf-8">
		$(document).ready(function() {
			$('#example').dataTable( {
				"bJQueryUI": true,
				"bProcessing": true,
				"bServerSide": true,
				"sAjaxSource": "/data"
			} );
		} );
	</script>
</head>
<body id="dt_example">
	<div id="container">
	<h1>GStreamer Audio Bridge</h1>
	<h2>%(host)s:%(port)d</h2>
	<div id="demo">
	<table cellpadding="0" cellspacing="0" border="0" class="display" id="example">
		<caption>&#8220;Online&#8221; channels</caption>
		<thead>
			<tr>
				<th>channel name</th>
				<th>type</th>
				<th>format</th>
				<th>rate</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td colspan="4">Loading data from server</td>
			</tr>
		</tbody>
	</table>
	</div>
	</div>
</body>
</html>
""" % {
	'host': opts.host,
	'port': opts.port
}


channel_list = []
daq = None


def update_channel_list(daq):
	global channel_list
	if daq is None:
		daq = nds.daq(opts.host, opts.port)
	try:
		print "refreshing channel list"
		channel_list = [(c.name, str(c.type), str(c.data_type), c.rate) for c in daq.recv_channel_list(nds.channel_type.online)]
	except RuntimeError:
		daq = None
	thread = threading.Timer(7200, update_channel_list, [daq])
	thread.daemon = True
	thread.start()


class Handler(BaseHTTPRequestHandler):

	def do_GET(self):
		# Parse URL
		scheme, netloc, path, params, query, fragment = urlparse(self.path, scheme='http')

		if path == '/':
			self.send_response(httplib.OK)
			self.end_headers()
			self.wfile.write(doc)
		elif path == '/data':
			args = parse_qs(query)
			self.send_response(httplib.OK)
			self.end_headers()
			answer = {}

			# Make local copy of channel list
			channels = channel_list
			answer['iTotalRecords'] = len(channel_list)

			# Read arguments
			try:
				startIndex = int(args['iDisplayStart'][0])
				endIndex = startIndex + int(args['iDisplayLength'][0])
			except KeyError, ValueError:
				startIndex = None
				endIndex = None

			try:
				sortingCols = int(args['iSortingCols'][0])
			except KeyError, ValueError:
				sortingCols = -1

			for i in range(sortingCols):
				sortReversed = (args['sSortDir_%d' % i][0] == 'desc')
				sortCol = int(args['iSortCol_%d' % i][0])
				channels = sorted(channels, reverse=sortReversed, key=lambda x: x[sortCol])

			try:
				searchStr = args['sSearch'][0]
			except KeyError, ValueError:
				searchStr = None

			try:
				answer['sEcho'] = args['sEcho']
			except KeyError:
				pass

			if searchStr is None:
				selected_channels = channels
			else:
				selected_channels = [c for c in channels if searchStr in c[0]]

			answer['iTotalDisplayRecords'] = len(selected_channels)

			selected_channels = selected_channels[startIndex:endIndex]

			answer['aaData'] = [
				(
					'<a href="rtsp://localhost:8554/%(name)s">%(name)s</a>' % {'name': c[0]},
					c[1], c[2], '%g Hz' % c[3]
				)
				for c in selected_channels
			]
			json.dump(answer, self.wfile)
		else:
			self.send_error(httplib.NOT_FOUND)


subprocess.Popen(['./gab-rtsp-server', '--host', opts.host, '--port', str(opts.port)])
update_channel_list(None)
HTTPServer(('', 8080), Handler).serve_forever()
