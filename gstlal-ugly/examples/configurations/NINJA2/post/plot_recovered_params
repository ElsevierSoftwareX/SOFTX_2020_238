#!/usr/bin/env python3

import sys
import pylal
import numpy
from math import sqrt

from matplotlib import use
use('Agg')
import pylab

from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables

from glue.ligolw.utils import ligolw_add

snr_getter_map = {'H1':lambda x: x.h1_snr,
                  'L1':lambda x: x.l1_snr,
                  'V1':lambda x: x.v1_snr}

eff_dist_getter_map = {'H1':lambda x: x.eff_dist_h,
                       'L1':lambda x: x.eff_dist_l,
                       'V1':lambda x: x.eff_dist_v}

time_getters = {'H1':lambda x: x.h_end_time + x.h_end_time_ns * 1e-9,
                'L1':lambda x: x.l_end_time + x.h_end_time_ns * 1e-9,
                'V1':lambda x: x.v_end_time + x.h_end_time_ns * 1e-9}


def line_and_lim(xs, ys):
    line = range(int(max(xs + ys) * 2))
    pylab.plot(line, line, color='lightgrey', linestyle='--')
    pylab.xlim(min(xs) * 0.9, max(xs) * 1.1)
    pylab.ylim(min(ys) * 0.9, max(ys) * 1.1)


def zeros_and_lim(xs):
    mn  = min(xs) * 0.9
    mx  = max(xs) * 1.1
    rng = range(int(mx) * 2)

    pylab.plot(rng, [0 for x in rng], color='lightgrey', linestyle='--')
    pylab.xlim(mn, mx)

def get_chi(inj):
    """Calculate chi as in arXiv:0909.2867v1, top of column 2"""
    mtotal = inj.mass1 + inj.mass2 
    delta = (inj.mass1 - inj.mass2) / mtotal
    #s_1   = sqrt( inj.spin1x**2 + inj.spin1y**2 + inj.spin1z**2 )
    s_1   = inj.spin1z

    # In Ajith et. al.
    # they define chi_i = S_i / M_i2.  I was taking S_i from the NR catalog,
    # but I think this value already is chi_i.  So when I divided by M_i2 I
    # was making the values way too small.
    chi_1 = s_1 # / (inj.mass1**2) 
    #s_2   = sqrt( inj.spin2x**2 + inj.spin2y**2 + inj.spin2z**2 )
    s_2   = inj.spin2z
    chi_2 = s_2 # / (inj.mass2**2)

    chi   = (1+delta) * chi_1 / 2 + (1-delta) * chi_2 / 2

    return chi


if __name__ == '__main__':
    ifo         = sys.argv[1]
    snr_getter  = snr_getter_map[ifo]
    dist_getter = eff_dist_getter_map[ifo]
    time_getter = time_getters[ifo]
    xmldoc      = ligolw_add.ligolw_add(ligolw.Document(), sys.argv[2:],  non_lsc_tables_ok = True) 

    sngl_inspirals = table.get_table(xmldoc,lsctables.SnglInspiralTable.tableName)
    sim_inspirals  = table.get_table(xmldoc,lsctables.SimInspiralTable.tableName)
    snrs           = table.get_table(xmldoc,'snr')

    trig_lookup    = {}

    for injection in sim_inspirals:
        trig_lookup[injection.geocent_end_time] = [injection.mass1 + injection.mass2]

    for injection in snrs:
        try:
            trig_lookup[injection.geocent_end_time].append(snr_getter(injection))
        except:
            pass

    inclinations = []
    coas         = []

    inj_masses = []
    rec_masses = []

    inj_etas   = []
    rec_etas   = []

    inj_snrs   = []
    rec_snrs   = []

    inj_eff_dist = []
    rec_eff_dist = []

    inj_times = []
    rec_times = []

    inj_chis  = []
    rec_chis  = []

    for trig in sngl_inspirals:
        inj = None

        for i in sim_inspirals:
            if abs(trig.end_time - i.geocent_end_time) < 10:
                inj = i
                break

        if inj:
            # If injection wasn't performed, snr will be 0, skip
            if trig_lookup[inj.geocent_end_time][1] == 0:
                continue

            inj_times.append( time_getter(inj) )
            rec_times.append( trig.end_time + trig.end_time_ns * 1e-9 )

            inj_chis.append(get_chi( inj ))
            rec_chis.append(trig.chi)

            inclinations.append(inj.inclination)
            coas.append(inj.coa_phase)

            inj_masses.append(inj.mchirp)
            rec_masses.append(trig.mchirp)

            inj_etas.append(inj.eta)
            rec_etas.append(trig.eta)

            inj_snrs.append( trig_lookup[inj.geocent_end_time][1] )
            rec_snrs.append( trig.snr )

            inj_eff_dist.append( dist_getter(inj) )
            rec_eff_dist.append( trig.eff_distance )
        else:
            print 'Missing recovered? ', trig.end_time

    pylab.figure()
    pylab.hist(rec_snrs, bins=100)
    pylab.hist(inj_snrs, bins=100, histtype='step')
    pylab.xlabel('SNR')
    pylab.ylabel('Num injections or num of triggers')
    pylab.title('Histogram of revcovered and injected snrs')
    pylab.savefig(ifo + '_snrs_hist.png')

    pylab.figure()
    pylab.hist(rec_chis, bins=100)
    pylab.hist(inj_chis, bins=100, histtype='step')
    pylab.plot(rec_chis, numpy.zeros(len(rec_chis)), '*')
    pylab.xlabel('chi')
    pylab.ylabel('Num injections or num of triggers')
    pylab.title('Histogram of recovered and injected chis')
    pylab.savefig(ifo + '_chis_hist.png')

    time_deltas = [1.0 - x[0] / x[1] for x in zip(rec_times, inj_times)]
    pylab.figure()
    pylab.scatter(inj_masses, time_deltas, c=inj_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s time accuracy' % ifo)
    pylab.xlabel('Injected chirp mass (M_sun)')
    pylab.ylabel('(Injected - Recovered) / Injected')
    pylab.savefig(ifo + '_frac_time.png')

    pylab.figure()
    pylab.scatter(inj_masses, rec_masses, c=inj_snrs)
    line_and_lim(inj_masses, rec_masses)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s chirp mass' % ifo)
    pylab.xlabel('Injected chirp mass (M_sun)')
    pylab.ylabel('Recovered chrip mass (M_sun)')
    pylab.savefig(ifo + '_masses.png')

    pylab.figure()
    pylab.scatter(inj_masses, [1.0 - x[0]/x[1] for x in zip(rec_masses, inj_masses)], c=inj_snrs)
    xs = range(int(min(inj_masses)), int(max(inj_masses)))
    pylab.plot(xs, [0 for x in xs], color='lightgrey', linestyle='--')
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s chirp mass fractional difference' % ifo)
    pylab.xlabel('Injected chirp mass (M_sun)')
    pylab.ylabel('(Injected - Recovered) / Injected ')
    pylab.savefig(ifo + '_frac_masses.png')

    pylab.figure()
    pylab.scatter(inj_chis, rec_chis, c=inj_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s chi' % ifo)
    pylab.xlabel('Injected chi')
    pylab.ylabel('Recovered chi')
    pylab.savefig(ifo + '_chis.png')

    pylab.figure()
    pylab.scatter(inj_snrs, [x[1] - x[0] for x in zip(rec_chis, inj_chis)], c=inj_masses)
    zeros_and_lim(inj_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Mchrip')
    pylab.title('%s chi difference' % ifo)
    pylab.xlabel('Injected snr')
    pylab.ylabel('Injected - Recovered ')
    pylab.savefig(ifo + '_diff_chis.png')

    pylab.figure()
    pylab.scatter(inj_chis, [1 - x[0]/x[1] for x in zip(rec_snrs, inj_snrs)], c=inj_masses)
    zeros_and_lim(inj_chis)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Mchrip')
    pylab.title('%s snr difference' % ifo)
    pylab.xlabel('Injected chi')
    pylab.ylabel('(Injected - Recovered) / Injected ')
    pylab.savefig(ifo + 'frac_diff_snrs_chis_masses.png')

    pylab.figure()
    pylab.scatter(inj_etas, rec_etas, c=inj_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s eta' % ifo)
    pylab.xlabel('Injected eta')
    pylab.ylabel('Recovered eta')
    pylab.savefig(ifo + '_etas.png')

    pylab.figure()
    pylab.scatter(inj_etas, [1.0 - x[0]/x[1] for x in zip(rec_etas, inj_etas)], c=inj_snrs)
    zeros_and_lim(inj_etas) 
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s eta fractional difference' % ifo)
    pylab.xlabel('Injected eta')
    pylab.ylabel('(Injected - Recovered) / Injected ')
    pylab.savefig(ifo + '_frac_masses.png')

    pylab.figure()
    pylab.scatter(inj_snrs, rec_snrs, c=inj_masses)
    line_and_lim(inj_snrs, rec_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Chirp Mass')
    pylab.title('%s snr' % ifo)
    pylab.xlabel('Injected snr')
    pylab.ylabel('Recovered snr')
    pylab.savefig(ifo + '_snrs.png')

    pylab.figure()
    pylab.scatter(inj_snrs, rec_snrs, c=inj_chis)
    line_and_lim(inj_snrs, rec_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Chis')
    pylab.title('%s snr' % ifo)
    pylab.xlabel('Injected snr')
    pylab.ylabel('Recovered snr')
    pylab.savefig(ifo + '_snrs_chis.png')

    pylab.figure()
    pylab.scatter(inj_snrs, [1.0 - x[0]/x[1] for x in zip(rec_snrs, inj_snrs)], c=inj_chis)
    zeros_and_lim(inj_snrs)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Chi')
    pylab.title('%s snr fractional difference' % ifo)
    pylab.xlabel('Injected snr')
    pylab.ylabel('(Injected - Recovered) / Injected ')
    pylab.savefig(ifo + '_frac_snrs_chis.png')


    pylab.figure()
    pylab.scatter(inj_eff_dist, rec_eff_dist, c=inj_masses)
    line_and_lim(inj_eff_dist, rec_eff_dist)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Chirp Mass')
    pylab.title('%s effective distance' % ifo)
    pylab.xlabel('Injected effective distance')
    pylab.ylabel('Recovered effective distance')
    pylab.savefig(ifo + '_eff_dist.png')

    pylab.figure()

    ed_delta = [1.0 - x[0]/x[1] for x in zip(rec_eff_dist, inj_eff_dist)]

    print len(ed_delta), len(inclinations), len(inj_snrs)

    pylab.scatter(inclinations, ed_delta, c=inj_snrs)
    zeros_and_lim(inclinations)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s effective distance fractional difference' % ifo)
    pylab.xlabel('Inclination')
    pylab.ylabel('(Injected - Recovered) / Injected')
    pylab.savefig(ifo + '_eff_dist_frac_inc.png')


    pylab.figure()
    pylab.scatter(coas, [1.0 - x[0]/x[1] for x in zip(rec_eff_dist, inj_eff_dist)], c=inj_snrs)
    zeros_and_lim(coas)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected SNR')
    pylab.title('%s effective distance fractional difference' % ifo)
    pylab.xlabel('coa_phase')
    pylab.ylabel('(Injected - Recovered) / Injected')
    pylab.savefig(ifo + '_eff_dist_frac_coa.png')

    pylab.figure()
    pylab.scatter(inj_eff_dist, [1.0 - x[0]/x[1] for x in zip(rec_eff_dist, inj_eff_dist)], c=inclinations)
    zeros_and_lim(inj_eff_dist)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Inclination')
    pylab.title('%s effective distance fractional difference' % ifo)
    pylab.xlabel('Injected effective distance')
    pylab.ylabel('(Injected - Recovered) / Injected')
    pylab.savefig(ifo + '_eff_dist_frac.png')

    pylab.figure()
    pylab.scatter(inj_snrs, [1.0 - x[0]/x[1] for x in zip(rec_snrs, inj_snrs)], c=inj_masses)
    cb = pylab.colorbar()
    cb.ax.set_ylabel('Injected Chirp Mass')
    pylab.title('%s snr fractional difference' % ifo)
    pylab.xlabel('Injected snr')
    pylab.ylabel('(Injected - Recovered) / Injected')
    pylab.savefig(ifo + '_frac_snrs.png')

    values = zip(inj_times, [1.0 - x[0]/x[1] for x in zip(rec_snrs, inj_snrs)])
    values = sorted(values,lambda x,y:cmp(y[1],x[1]))
    print 'Injections with largest SNR desrepancies'
    for v in values[:5]:
        print '| %d | %.2f |' % v

    z = [x for x in zip(rec_snrs, inj_snrs, inj_times) if x[0]/x[1] > 2]

    print 'Triggers with recovered SNR >= 2 * Injected SNR'
    print '|IFO | Geocent end time | Injected SNR | Recovered SNR |'

    for a,b,t in z:
        print '| %s | %d | %.2f | %.2f |' % (ifo, t, b, a)

    print '\n'

    z = [x for x in zip(rec_eff_dist, inj_eff_dist, inj_times) if x[0]/x[1] > 2]

    print 'Triggers with recovered eff. dist. >= 2 * Injected eff. dist.'
    print '|IFO | Geocent end time | Injected eff. dist. | Recovered eff. dist. | Ratio |'

    for a,b,t in z:
        print '| %s | %d | %.2f | %.2f | %.2f |' % (ifo, t, b, a, a / b)

