#!/usr/bin/python
import sys
from glue import lal
from ligo import segments
from glue.ligolw import lsctables
from glue.ligolw import ligolw
from glue.ligolw import utils

def to_segmentlistdict(l):
	s = segments.segmentlistdict()
	#FIXME this may not work
	key = l.description[:2]
	s[key] = segments.segmentlist([l.segment])
	return s
def insert_char(s, location, char):
	"""Function to insert a character at given location in a string s"""
	"""Assumes char is a string """
	if location >= len(s):
		raise ValueError, "location pasted end of string"
	return s[0:location] + char + s[location:]

segs = segments.segmentlistdict()

try: 
	sys.argv[3]
	if sys.argv[3]=="oneSeg":
		oneList = "True"
	elif sys.argv[3]=="multiSeg":
		oneList = "False"
except:
	oneList = "True"
	print "assuming only one seg needed"

startLine = 0
for i,line in enumerate(open(sys.argv[1]).readlines()):
	fileNum = 84 #makes segs a 4day long segment, 1wk is too long
	seg = to_segmentlistdict(lal.CacheEntry(line))
	k = list(seg.iterkeys())[0] #Assumes only one ifo in cache line
	times = seg[k][0]
	if oneList=="True":
		segs+=seg
	else:
		endTime = times[0]-1
		if i%fileNum==0 and i!=0:
			endTime = times[1]
			startLine = i+1
		elif i==startLine:
			startTime = times[0]
		elif i==1271: # Total number of frames in L1 assuming the same in H1 and V1
			endTime = times[1]
		else:
			continue

		if endTime > startTime:
			x = [lal.LIGOTimeGPS(startTime),lal.LIGOTimeGPS(endTime)]
			new_seg=segments.segmentlistdict()
			new_seg[k]=[segments.segment(x)]
			segs.extend(new_seg)
		else:
			continue

xmldoc = ligolw.Document()
xmldoc.appendChild(ligolw.LIGO_LW())

#
# make tables
#

seg_def = lsctables.New(lsctables.SegmentDefTable)
xmldoc.childNodes[0].appendChild(seg_def)
segtab = lsctables.New(lsctables.SegmentTable)
xmldoc.childNodes[0].appendChild(segtab)

# populate the segment definer table
ifo_ids = {}
for ifo in segs.keys():
	row = seg_def.RowType()
	id = seg_def.get_next_id()
	row.ifos = ifo
	row.segment_def_id = id
	row.creator_db = None
	row.process_id = None
	row.name = "datasegments"
	row.version = None
	row.comment = None
	row.insertion_time = None
	ifo_ids[ifo] = id
	seg_def.append(row)

# populate the segment table
for ifo, segl in segs.items():
	for seg in segl:
		row = segtab.RowType()
		row.segment_def_id = ifo_ids[ifo]
		row.segment_id = segtab.get_next_id()
		row.creator_db = None
		row.process_id = None
		row.segment_def_cdb = None
		row.set(seg)
		segtab.append(row)

outname = sys.argv[2]
verbose = True

utils.write_filename(xmldoc, outname, verbose = verbose, gz = (outname or "stdout").endswith(".gz"))

			
		

