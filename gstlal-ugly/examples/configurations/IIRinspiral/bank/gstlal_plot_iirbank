#!/usr/bin/env python3
#
# Copyright (C) 2011, 2012 Shaun Hooper
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""Plot various IIR specific bank parameters"""


import sys
import time
import matplotlib
import math
from matplotlib import cm
matplotlib.use('Agg')
matplotlib.rcParams.update({
		"font.size": 12.0,
		"axes.titlesize": 10.0,
		"axes.labelsize": 10.0,
		"xtick.labelsize": 10.0,
		"ytick.labelsize": 10.0,
		"legend.fontsize": 10.0,
		"figure.dpi": 300,
		"savefig.dpi": 300,
		"text.usetex": True,
		"path.simplify": True
})
from matplotlib import figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
try:
	from matplotlib.transforms import offset_copy
except:
	# FIXME: wrong matplotlib version, disable this feature;  figure
	# out how to do this portably later.
	pass
import pylab
import numpy
from optparse import OptionParser
from gstlal import cbc_template_iir
from gstlal import lloidplots
from glue.ligolw import utils, array, param, lsctables
from glue.ligolw import table
from glue.ligolw.utils import process as ligolw_process
from matplotlib.ticker import NullFormatter, MultipleLocator, FormatStrFormatter, FixedLocator, NullLocator, LogFormatterMathtext, LinearLocator, ScalarFormatter, MaxNLocator
from gstlal.pipeio import repack_complex_array_to_real, repack_real_array_to_complex
from pylal import lalconstants

#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(description = __doc__)
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

	options, filenames = parser.parse_args()

	return options, filenames


#
# =============================================================================
#
#                                  SNR Overlap
#
# =============================================================================
#

def plotSNROverlap(snrlist, out_filename="SNROverlap.png"):
	"""
	Function to plot a histogram of the IIR to template overlap. Very useful to see if bank is satisfactorily defined
	"""

	# Set up limits of histogram
	xlmax = -1
	xlmin = 1e9
	x = snrlist
	xmin = numpy.min(x)
	xmax = numpy.max(x)
	xlmin = numpy.min([xmin,xlmin])
	xlmax = numpy.max([xmax,xlmax])
	xbins = numpy.linspace(xmin, xmax, 1500)

	pylab.figure()
	ax1 = pylab.axes()
	ax1.hist( x, xbins, histtype = 'step', cumulative = True, normed=True, align = 'mid')
	ax1.set_yscale('log')
	ax1.grid(which='both')
	ax1.set_xlim( (xlmin, xlmax))
	ax1.set_ylim( (0.0001, 1.0) )
	ax1.xaxis.set_major_formatter(FormatStrFormatter('%6.5f'))
	for tl in ax1.xaxis.get_ticklabels():
		tl.set_rotation(15)
	pylab.grid()
	pylab.ylabel('Percent of Templates')
	pylab.xlabel('SNR Overlap')
	pylab.savefig(out_filename)
	pylab.close()

#
# =============================================================================
#
#                                  Plot number of IIR filters and computational cost
#
# =============================================================================
#


def plotNumFiltersHistogram(banks, out_filename="newnumfilters.pdf"):
	"""
	Plot a histogram of filters per rate bin
	"""

	w1 = 0.7
	h1 = 0.5
	wm = 0.2
	ho = 0.1
	hm2 = 0.1
	hm = 1 - 2*h1 -ho -hm2
	w = 1.0

	rect_hist1 = [wm, hm+1*h1+1*ho, w1, h1]
	rect_hist2 = [wm, hm+0*h1+0*ho, w1, h1]

	fig = figure.Figure()#1, figsize=(8,8))
	FigureCanvas(fig)
	aspect = (1 + math.sqrt(5)) / 2
	width = 165.0
	fig.set_size_inches(width / 25.4, width / 25.4 / aspect)
	axhist1 = fig.add_axes(rect_hist1)
	axhist2 = fig.add_axes(rect_hist2)
	Nbks = len(banks)
	legend = []
	print 'bank id, IIR filters, Templates, Cost'
	for i, bank in enumerate(banks):
		Nsr = len(bank.niir)
		Nt = len(bank.snglinspiraltable)
		sorted_keys = sorted(bank.niir)

		sorted_values = [bank.niir[sr] for sr in sorted_keys]
		Niir = sum(sorted_values)
		ccostlist = [Nt*12.*2.*sr*bank.niir[sr]/1e6 for sr in sorted_keys]
		ccost = sum(ccostlist)
		ind = [i * (0.9*w/Nbks) + j * w for j in range(Nsr)]

		color = cm.PuOr(1.*i/Nbks)
		axhist1.bar(ind, sorted_values, 0.9*w/Nbks,color=color)
		axhist2.bar(ind, ccostlist, 0.9*w/Nbks,color=color)
		legend.append(('bank %s') % (bank.filename[4:8]))
		print ('%s, %3.0d, %3.0d, %5.0f' % (bank.filename[4:8], Niir, Nt, ccost))


## 		sorted_keys = sorted(ratedict)
## 		sorted_values = [ratedict[x] for x in sorted_keys]
## 		Nsr = len(ratedict)

## 		numlist = [x[i] for x in sorted_values]
## 		ccostlist = [x[i] *16.0 * 2.0 *k for (k,x) in (sorted_keys, sorted_values)]

	axhist1.set_ylabel('Number of IIR filters')
	axhist1.xaxis.set_ticks([j * w + 0.5*0.9*w for j in range(Nsr)])
	axhist1.xaxis.set_ticklabels(sorted_keys)

	axhist2.set_ylabel('Computational Cost (MFLOPS)')
	axhist2.xaxis.set_ticks([j * w + 0.5*0.9*w for j in range(Nsr)])
	axhist2.xaxis.set_ticklabels(sorted_keys)
	axhist2.set_xlabel('Sample rate bin')
	#axhist2.xaxis.set_ticks(ind+0.5*width)
	#axhist2.xaxis.set_ticklabels(ratelist)
	ldg = axhist1.legend(legend, loc='upper center', bbox_to_anchor=(1.15,1.0))
        fig.savefig(out_filename, bbox_extra_artists=(ldg,), bbox_inches='tight')
	#pylab.close()

#
# =============================================================================
#
#                                  Plot NEW SNR Overlap
#
# =============================================================================
#

def plotallvsall(banks, out_filename="allvsall.pdf", textstring = None, scl = 1136.1):
	def plotScatter(rec, x, y, xlabel = None, ylabel = None, ylabelposition = "left", color = 'b'):
		axes = fig.add_axes(rec)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		axes.xaxis.set_major_locator( MaxNLocator(6) )
		axes.yaxis.set_major_locator( MaxNLocator(6) )
		if xlabel is not None:
			axes.set_xlabel(xlabel)
			axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if ylabel is not None:
			axes.set_ylabel(ylabel)
			axes.yaxis.set_label_position(ylabelposition)
			axes.yaxis.set_ticks_position(ylabelposition)
			axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		axes.grid(True)
		axes.scatter(x, y, s=70, marker='x', color = color)
		return axes

	def plotHistogram(rec, x, Xa, xlabel = None, ylabel = None, orientation = "vertical"):
		axes = fig.add_axes(rec, frameon = False)
		axes.hist(x, 100, histtype='stepfilled', orientation=orientation, color = 'k', facecolor = [0.5, 0.5, 0.5])
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		if orientation == "vertical":
			axes.xaxis.set_ticks(Xa.get_xticks())
			axes.set_xlim(Xa.get_xlim())
			
		else:
			axes.yaxis.set_ticks(Xa.get_yticks())
			axes.set_ylim(Xa.get_ylim())
                if xlabel is not None:
                        axes.set_xlabel(xlabel)
                if ylabel is not None:
                        axes.set_ylabel(ylabel)

		#axes.grid(True)
		#axes.set_frame_on(False)
		axes.get_xaxis().set_visible(False)
		axes.get_yaxis().set_visible(False)
		return axes

	fig = figure.Figure()
	FigureCanvas(fig)
	aspect = 1.2
	width = 5.4
	fig.set_size_inches(width, width / aspect)
	Nb = len(banks)

	w1 = 0.35
	h1 = 0.4
	w2 = h2 = 0.10
	wo = ho = 0.03
	wm2 = hm2 = 0.03
	wm = 0.15#1 - 2*w1 -w2 - wo - wm2
	hm = 0.1#1 - 2*h1 -h2 - ho - hm2

	rect_scatter1 = [wm, hm+ho+h1, w1, h1]
	rect_scatter2 = [wm+w1+wo, hm+ho+h1, w1, h1]
	rect_scatter3 = [wm+w1+wo, hm, w1, h1]
	rect_histy1 = [wm+2*w1+wo, hm+h1+ho, w2, h1]

	snrs = []
	for i, bank in enumerate(banks):
		axScatter1 = plotScatter(rect_scatter1, [sum(bank.niir.values()) for row in bank.snglinspiraltable], [row.snr for row in bank.snglinspiraltable], xlabel = 'Number of IIR filters', ylabel = 'SNR overlap', color=cm.PuOr(1.*i/Nb))
		axScatter2 = plotScatter(rect_scatter2, [row.mchirp for row in bank.snglinspiraltable], [row.snr for row in bank.snglinspiraltable], color=cm.PuOr(1.*i/Nb))
		axScatter3 = plotScatter(rect_scatter3, [row.mchirp for row in bank.snglinspiraltable], [sum(bank.niir.values()) for row in bank.snglinspiraltable], xlabel = r'Chirp mass $\mathcal{M}$ ($M_{\odot}$)', ylabel = 'Number of IIR filters', ylabelposition = 'right', color=cm.PuOr(1.*i/Nb))
		axes = fig.gca()
		axplot, = axes.plot([row.mchirp for row in bank.snglinspiraltable], [scl*row.mchirp**(-5./6.) for row in bank.snglinspiraltable], color='k')
		[snrs.append(row.snr) for row in bank.snglinspiraltable]
	axes.legend([axplot],[r'$N_{\rm IIR} \propto \mathcal{M}_c^{-5/6}$'])

	# Plot histogram of SNRs
	plotHistogram(rect_histy1, snrs, Xa = axScatter1, orientation="horizontal")
	fig.savefig(out_filename)

#
# =============================================================================
#
#                                 Plot OLD histograms
#
# =============================================================================
#

def plotSNRhistograms(snrlist, mchirplist, niirlist, out_filename="allvsall.pdf", textstring = None, scl = 1136.1):
	"""
	Plot three histograms to show the distribution of the SNR overlap as a function of chirp mass and size of IIR bank
	"""

	def plotScatter(rec, x, y, xlabel = None, ylabel = None, ylabelposition = "left"):
		axes = pylab.axes(rec)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		#axes.xaxis.set_major_locator( MultipleLocator(5) )
		axes.xaxis.set_major_locator( MaxNLocator(6) )
		axes.yaxis.set_major_locator( MaxNLocator(6) )
		#axes.yaxis.set_major_locator( LinearLocator(7) )
		#axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		#axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if xlabel is not None:
			axes.set_xlabel(xlabel)
			axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if ylabel is not None:
			axes.set_ylabel(ylabel)
			axes.yaxis.set_label_position(ylabelposition)
			axes.yaxis.set_ticks_position(ylabelposition)
			axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		pylab.grid()
		axes.scatter(x, y, s=100, marker='x', color = 'b')
		return axes

	def plotHistogram(rec, x, Xa, xlabel = None, ylabel = None, orientation = "vertical"):
		axes = pylab.axes(rec)
		axes.hist(x, 50, histtype='step', orientation=orientation)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		if orientation == "vertical":
			axes.xaxis.set_ticks(Xa.get_xticks())
			axes.set_xlim(Xa.get_xlim())
		else:
			axes.yaxis.set_ticks(Xa.get_yticks())
			axes.set_ylim(Xa.get_ylim())
                if xlabel is not None:
                        axes.set_xlabel(xlabel)
                if ylabel is not None:
                        axes.set_ylabel(ylabel)

		axes.grid(True)
		return axes

	# definitions for the axes
	#scatterboxwidth = scatterboxheight = 0.35
	#histogramwidth = histogramheight = 0.17
	#separationwidth = separatioinheight = 0.01
	#marginwidth = marginheight = 0.03
	w1 = h1 = 0.34
	w2 = h2 = 0.15
	wo = ho = 0.01
	wm2 = hm2 = 0.03
	wm = 1 - 2*w1 -w2 - wo - wm2
	hm = 1 - 2*h1 -h2 - ho - hm2

	rect_scatter1 = [wm, hm+ho+h1, w1, h1]
	rect_scatter2 = [wm+w1+wo, hm+ho+h1, w1, h1]
	rect_scatter3 = [wm+w1+wo, hm, w1, h1]
	rect_histx1 = [wm, hm+2*h1+2*ho, w1, h2]
	rect_histx2 = [wm+w1+wo, hm+2*h1+2*ho, w1, h2]
	rect_histy1 = [wm+2*w1+2*wo, hm+h1+ho, w2, h1]

	fig = pylab.figure(1, figsize=(8,8))

	if textstring is not None:
		pylab.figtext(0.25,0.25,(s for s in textstring),fontsize=18)

	axScatter1 = plotScatter(rect_scatter1, niirlist, snrlist, "Number of IIR filters", "SNR Overlap")
	axScatter2 = plotScatter(rect_scatter2, mchirplist, snrlist)
	axScatter3 = plotScatter(rect_scatter3, mchirplist, niirlist, "Chirp Mass", "Number of IIR filters", "right")

	mchirps = numpy.linspace(min(mchirplist),max(mchirplist),50)
	axplot = axScatter3.plot(mchirps, scl*mchirps**(-5./6.), color='red')
	pylab.legend([axplot],[r'$N \propto \mathcal{M}_c^{-5/6}$'])
	#print axScatter2.get_xticks(), axScatter2.get_xlim()
	axHistogramx1 = plotHistogram(rect_histx1, niirlist, Xa = axScatter1)
	axHistogramx2 = plotHistogram(rect_histx2, mchirplist, Xa = axScatter2)
	#axHistogramy1 = plotHistogram(rect_histy1, snrlist, Xa = axScatter1, orientation="horizontal")

	return fig

#
# =============================================================================
#
#                                 Plot parameter spaces
#
# =============================================================================
#

def plotbank(banks):
	mmin = 1.1
	mmax = 1.7
	m = numpy.arange(mmin, mmax+0.001, 0.001)
	Nb = len(banks)
	width = 4.0


	#
	# Plot mtotal vs eta
	#

	fig = figure.Figure()
	FigureCanvas(fig)
	aspect = 1.0
	fig.set_size_inches(width, width / aspect)
	axes = fig.gca()
	column1 = 'mtotal'
	column2 = 'eta'
	for i, bank in enumerate(banks):
		axes.plot(bank.snglinspiraltable.get_column(column1), bank.snglinspiraltable.get_column(column2), 'x', color=	cm.PuOr((1.0*i)/(1.0*len(banks))))
	xl = numpy.concatenate((mmin+m, mmax+m))
	yl = numpy.concatenate(((mmin*m)/(mmin+m)**2.0, (mmax*m)/(mmax+m)**2.0))
	yh = numpy.concatenate(((m*m)/(m+m)**2.0, (m*m)/(m+m)**2.0))
	axes.fill_between(xl, yl, yh, edgecolor = None, facecolor = [0.25, 0.25, 0.25], alpha = 0.25)
	axes.grid(True)
	axes.set_xlabel(r'Total mass, $M$  $(M_\odot)$')
	axes.set_ylabel(r'Symmetric mass ratio, $\eta$')
	fig.savefig('mtotal_vs_eta.pdf')

	#
	# Plot m1 vs m2
	#

	fig = figure.Figure()
	FigureCanvas(fig)
	aspect = 1.0
	fig.set_size_inches(width, width / aspect)
	axes = fig.gca()
	column1 = 'mass1'
	column2 = 'mass2'
	for i, bank in enumerate(banks):
		axes.plot(bank.snglinspiraltable.get_column(column1), bank.snglinspiraltable.get_column(column2), 'x', color=cm.PuOr(1.*i/Nb))
	axes.fill_between(m, mmin+0*m, m, edgecolor = None, facecolor = [0.25, 0.25, 0.25], alpha = 0.25)
## 	mmin = 1.39
## 	mmax = 1.41
## 	m = numpy.arange(mmin, mmax+0.001, 0.001)
## 	axes.fill_between(m, mmin+0*m, m, edgecolor = None, facecolor = [0.05, 0.05, 0.05], alpha = 0.75)
	axes.grid(True)
	axes.set_xlabel(r'Component mass 1, $m_1$ $(M_\odot)$')
	axes.set_ylabel(r'Component mass 2, $m_2$ $(M_\odot)$')
	fig.savefig('mass1_vs_mass2.pdf')

	#
	# Plot tau0 vs tau3
	#
	axes.cla()
	def tauspace(m1, m2, f0 = 40):
		M = (m1 + m2) * lalconstants.LAL_MTSUN_SI
		eta = m1*m2/(m1 + m2)**2
		tau0 = 5.0 / (256.0 * math.pi * f0 * eta) * (math.pi * M * f0 )**(-5.0/3.0)
		tau3 = 1.0 / (8.0 * f0 * eta) * (math.pi * M * f0 )**(-2.0/3.0)
		return tau0, tau3

	def tau3extreme(tau0, me, f0 = 40):
		A0 =      5./(256.*(math.pi*f0)**(8./3.))*(lalconstants.LAL_MTSUN_SI)**(-5./3.)
		A3 = math.pi/(  8.*(math.pi*f0)**(5./3.))*(lalconstants.LAL_MTSUN_SI)**(-2./3.)
		p = -A0/(tau0*me)
		q = -me
		T = -0.5*q + 0.5*numpy.sqrt((27.*q**2+4.*p**3)/27.)
		x = T**(1./3.) -p/3.*T**(-1./3.)
		tau3 = A3/A0 * tau0 * x**3
		return tau3

	def tau3equal(tau0, f0=40):
		A0 =      5./(256.*(math.pi*f0)**(8./3.))*(lalconstants.LAL_MTSUN_SI)**(-5./3.)
		A3 = math.pi/(  8.*(math.pi*f0)**(5./3.))*(lalconstants.LAL_MTSUN_SI)**(-2./3.)
		tau3 = 4. * A3 * (tau0/(4.*A0))**(2./5.)
		return tau3

	def tauseries(mmin,mmax, f0 = 40):
		A0 =      5./(256.*(math.pi*f0)**(8./3.))*(lalconstants.LAL_MTSUN_SI)**(-5./3.)
		A3 = math.pi/(  8.*(math.pi*f0)**(5./3.))*(lalconstants.LAL_MTSUN_SI)**(-2./3.)
		tau0min = 4*A0 *(2*mmax)**(-5./3.)
		tau0max = 4*A0 *(2*mmin)**(-5./3.)
		tau0meet = A0/(mmin*mmax)*(mmin+mmax)**(1./3.)

		tau0_left = numpy.linspace(tau0min, tau0meet, 100)
		tau3_high_left = tau3extreme(tau0_left, mmax)
		tau3_low_left = tau3equal(tau0_left)

		tau0_right = numpy.linspace(tau0meet, tau0max, 100)
		tau3_high_right = tau3extreme(tau0_right, mmin)
		tau3_low_right = tau3equal(tau0_right)

		tau0 = numpy.concatenate((tau0_left, tau0_right))
		tau3_low = numpy.concatenate((tau3_low_left, tau3_low_right))
		tau3_high = numpy.concatenate((tau3_high_left, tau3_high_right))

		return tau0, tau3_low, tau3_high

	fig = figure.Figure()
	FigureCanvas(fig)
	aspect = 1.0
	fig.set_size_inches(width, width / aspect)
	axes = fig.gca()
	column1 = 'tau0'
	column2 = 'tau3'
	mmin = 1.1
	mmax = 1.7
	m = numpy.arange(mmin, mmax+0.001, 0.001)
	for i, bank in enumerate(banks):
		axes.plot(bank.snglinspiraltable.get_column(column1), bank.snglinspiraltable.get_column(column2), 'x', color=cm.PuOr(1.*i/len(banks)))
	tau0, tau3_low, tau3_high = tauseries(mmin, mmax)
	axes.fill_between(tau0, tau3_low, tau3_high, edgecolor = None, facecolor = [0.25, 0.25, 0.25], alpha = 0.25)
	axes.grid(True)
	axes.set_xlabel(r'Chirp time $\tau_0$ (seconds)')
	axes.set_ylabel(r'Chirp time $\tau_3$ (seconds)')
	fig.savefig('tau0_vs_tau3.pdf')

#
# =============================================================================
#
#                                 Main
#
# =============================================================================
#


m1 = []
m2 = []
mchirp = []
snrs = []
Niir = []
M = {}
Mr = {}
ntemplates = 0

#
# Parse command line
#

class Bank(object):
	def __init__(self):
		self.snglinspiraltable = None
		self.niir = {}
		self.filename = None


options, filenames = parse_command_line()
banks = []
print "number of files", len(filenames)

sample_rates = [2**x for x in range(7,13)]
niir = {}

for filename in filenames:
	if options.verbose:
		print >>sys.stderr, "%s" % (filename)
		start = time.time()
	xmldoc = utils.load_filename(filename)
	if options.verbose:
		print >> sys.stderr, "load doc %f" % ((time.time() - start))
		start = time.time()

	n = 0
	N = None
	bank = Bank()
	bank.snglinspiraltable = table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)
	bank.filename = filename

	#
	# Loop through IIR matrices, get number of IIR filters per sample rate
	#

	for sr in sample_rates:
		if sr not in M: M[sr] = 0
		if sr not in Mr: Mr[sr] = 0
		#n = array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[0] * array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[1]/2 * sr
		if array.getArraysByName(xmldoc, 'a_%d' % (sr,)):
			ashape = array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()
			bank.niir[sr] = ashape[1]/2
## 			niir.setdefault(sr, []).append(ashape[1]/2)

## 		aarray = repack_real_array_to_complex(array.get_array(xmldoc, 'a_%d' % (sr,)).array)
## 		Mr[sr] += aarray.shape[0]*aarray.shape[1]
## 		if N is None:
## 			N = numpy.zeros(len(aarray))
## 		#print len(aarray)
## 		for tmp, arow in enumerate(aarray):
## 			nonzero = 0
## 			for aseries in arow:
## 				if numpy.abs(aseries) !=0:
## 					nonzero += 1
## 			N[tmp] += nonzero
## 			M[sr] += nonzero
	if options.verbose:
		print >> sys.stderr, "sr arrays %f" % ((time.time() - start))
		start = time.time()

	sngl_inspiral_table=lsctables.table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)

## 	for tmp, row in enumerate(sngl_inspiral_table):
## 		snrs.append(row.snr)
## 		m1.append(row.mass1)
## 		m2.append(row.mass2)
## 		mchirp.append(row.mchirp)
## 		Niir.append(N[tmp])
## 		#print >>sys.stderr, '%13.8f, %13.8f, %13.8f, %10d' % (m1[tmp], m2[tmp], snrs[tmp], Niir[tmp])
## 		#print >>file, '%13.8f, %13.8f, %13.8f' % (m1[tmp], m2[tmp], snrs[tmp]

	banks.append(bank)
## 	ntemplates += tmp + 1
	if options.verbose:
		print >> sys.stderr, "sngl_inspral table %f" % ((time.time() - start))
		start = time.time()

##plotbank(banks)

#sys.exit()
MM = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--minimal-match")
spectype = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--spectrum-type")
flow = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--low-frequency-cutoff")
fhigh = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--sample-rate")
epsilon = param.get_pyvalue(xmldoc, 'epsilon')
scl = 3.0*(flow[0]**(-5.0/6.0)-(1.0*fhigh[0])**(-5.0/6.0))/(4*numpy.pi**(4.0/3.0)*numpy.sqrt(15.0*epsilon)*(4.925491e-6)**(5.0/6.0))

## sumtotal = 0
## intcost = 0
## Nsum = 0
## print >> sys.stderr, 'Sample rate, N templates, Number of IIR filters, Actual number of IIR filters, IIR FLOPS, Upsampler FLOPS'
## for sr in sorted(M.keys()):
## 	sumtotal += sr * Mr[sr]
## 	intcost += sr * 16.0 * 2.0 * ntemplates
## 	Nsum += Mr[sr]
## 	print >>sys.stderr, '%5d, %3d, %10d, %10d, %11.0f, %11.0f' % (sr, ntemplates, M[sr], Mr[sr], sr * Mr[sr], sr * 16.0 * 2.0 * ntemplates)

## print >>sys.stderr, 'Total cost of filtering  (FLOPS) %e' % sumtotal
## print >>sys.stderr, 'Total cost of upsampling (FLOPS) %e' % intcost
## print >>sys.stderr, 'Total Number of IIR filters %d' % Nsum

## if options.verbose:
## 	print >> sys.stderr, "calculting costs %f" % ((time.time() - start))
## 	start = time.time()



## if options.verbose:
## 	print >> sys.stderr, "getting parameters %f" % ((time.time() - start))
## 	start = time.time()
## fig = plotSNRhistograms(snrs, mchirp, Niir, scl = scl)

## if options.verbose:
## 	print >> sys.stderr, "plotting snr histograms %f" % ((time.time() - start))
## 	start = time.time()
## mmin = min(min(m1),min(m2))
## mmax = max(max(m1),max(m2))
## Cmin = min(mchirp)
## Cmax = max(mchirp)

## s = "N = %d\nComponent mass = (%3.2f, %3.2f)\nTotal mass = (%3.2f, %3.2f)\nChirp mass = (%3.2f, %3.2f)\n$\epsilon$ = %5.4f\nMinimal match = %3.2f\nMin Freq = %2.0f" % (ntemplates, mmin, mmax, 2.0*mmin, 2.0*mmax, Cmin, Cmax, epsilon, MM[0], 1.0*flow[0])
## pylab.figtext(0.13, 0.18, s, fontsize=14)

## pylab.savefig("allvsall.png")
## pylab.close()

## if options.verbose:
## 	print >> sys.stderr, "saving snr histograms %f" % ((time.time() - start))
## 	start = time.time()
#plotNumFiltersHistogram(banks)
plotallvsall(banks, scl = scl)
## if options.verbose:
## 	print >> sys.stderr, "plotting num filters %f" % ((time.time() - start))
## 	start = time.time()
## plotSNROverlap(snrs)

## if options.verbose:
## 	print >> sys.stderr, "plotting snr overlaps %f" % ((time.time() - start))
## 	start = time.time()


pylab.close()
