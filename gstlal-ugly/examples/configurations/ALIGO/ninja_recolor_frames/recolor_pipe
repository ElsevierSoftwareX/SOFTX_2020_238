#!/usr/bin/python
"""
This program makes a dag to recolor frame files
"""

__author__ = 'Chad Hanna <channa@caltech.edu>'

##############################################################################
# import standard modules and append the lalapps prefix to the python path
import sys, os, copy, math
import subprocess, socket, tempfile

##############################################################################
# import the modules we need to build the pipeline
from glue import iterutils
from glue import pipeline
from glue import lal
from glue.ligolw import lsctables
from ligo import segments
import glue.ligolw.utils as utils
import glue.ligolw.utils.segments as ligolw_segments
from optparse import OptionParser

def which(prog):
	which = subprocess.Popen(['which',prog], stdout=subprocess.PIPE)
	out = which.stdout.read().strip()
	if not out: 
		print >>sys.stderr, "ERROR: could not find %s in your path, have you built the proper software and source the proper env. scripts?" % (prog,prog)
		raise ValueError 
	return out

def log_path():
	host = socket.getfqdn()
	#FIXME add more hosts as you need them
	if 'caltech.edu' in host: return '/usr1/' + os.environ['USER']
	if 'phys.uwm.edu' in host: return '/localscratch/' + os.environ['USER']
	if 'aei.uni-hannover.de' in host: return '/local/user/' + os.environ['USER']
	if 'phy.syr.edu' in host: return '/usr1/' + os.environ['USER']


class bank_DAG(pipeline.CondorDAG):

	def __init__(self, name, logpath = log_path()):
		self.basename = name
		tempfile.tempdir = logpath
		tempfile.template = self.basename + '.dag.log.'
		logfile = tempfile.mktemp()
		fh = open( logfile, "w" )
		fh.close()
		pipeline.CondorDAG.__init__(self,logfile)
		self.set_dag_file(self.basename)
		self.jobsDict = {}
		self.node_id = 0
		self.output_cache = []

	def add_node(self, node):
		node.set_retry(3)
		self.node_id += 1
		node.add_macro("macroid", self.node_id)
		pipeline.CondorDAG.add_node(self, node)

	def write_cache(self):
		out = self.basename + ".cache"
		f = open(out,"w")
		for c in self.output_cache:
			f.write(str(c)+"\n")
		f.close()

#
# Classes for generating reference psds
#

class gstlal_reference_psd_job(pipeline.CondorDAGJob):
	"""
	A gstlal_reference_psd job
	"""
	def __init__(self, executable=which('gstlal_reference_psd'), tag_base='gstlal_reference_psd'):
		"""
		"""
		self.__prog__ = 'gstlal_reference_psd'
		self.__executable = executable
		self.__universe = 'vanilla'
		pipeline.CondorDAGJob.__init__(self,self.__universe,self.__executable)
		self.add_condor_cmd('getenv','True')
		self.add_condor_cmd('requirements', 'Memory > 1999') #FIXME is this enough?
		self.tag_base = tag_base
		self.add_condor_cmd('environment',"KMP_LIBRARY=serial;MKL_SERIAL=yes")
		self.set_sub_file(tag_base+'.sub')
		self.set_stdout_file('logs/'+tag_base+'-$(macroid)-$(process).out')
		self.set_stderr_file('logs/'+tag_base+'-$(macroid)-$(process).err')


class gstlal_reference_psd_node(pipeline.CondorDAGNode):
	"""
	A gstlal_reference_psd node
	"""
	def __init__(self, job, dag, frame_cache, gps_start_time, gps_end_time, instrument, channel, sample_rate,psd_fft_length, injections=None, p_node=[]):

		pipeline.CondorDAGNode.__init__(self,job)
		self.add_var_opt("frame-cache", frame_cache)
		self.add_var_opt("gps-start-time",gps_start_time)
		self.add_var_opt("gps-end-time",gps_end_time)
		self.add_var_opt("instrument", instrument)
		self.add_var_opt("channel", channel)
		if injections: self.add_var_opt("injections", injections)
		path = os.getcwd()
		output_name = self.output_name = '%s/%s-%d-%d-reference_psd.xml.gz' % (path, instrument, gps_start_time, gps_end_time)
		self.add_var_opt("write-psd",output_name)
		self.add_var_opt("sample-rate",sample_rate)
		self.add_var_opt("psd-fft-length",psd_fft_length)
		dag.output_cache.append(lal.CacheEntry(instrument, "-", segments.segment(gps_start_time, gps_end_time), "file://localhost/%s" % (output_name,)))
		for p in p_node:
			self.add_parent(p)
		dag.add_node(self)

class gstlal_smooth_psd_job(pipeline.CondorDAGJob):
        """
        A gstlal_reference_psd job
        """
        def __init__(self, executable=which('gstlal_ninja_smooth_reference_psd'), tag_base='gstlal_ninja_smooth_reference_psd'):
                """
                """
                self.__prog__ = 'gstlal_ninja_smooth_reference_psd'
                self.__executable = executable
                self.__universe = 'vanilla'
                pipeline.CondorDAGJob.__init__(self,self.__universe,self.__executable)
                self.add_condor_cmd('getenv','True')
                self.add_condor_cmd('requirements', 'Memory > 1999') #FIXME is this enough?
                self.tag_base = tag_base
                self.add_condor_cmd('environment',"KMP_LIBRARY=serial;MKL_SERIAL=yes")
                self.set_sub_file(tag_base+'.sub')
                self.set_stdout_file('logs/'+tag_base+'-$(macroid)-$(process).out')
                self.set_stderr_file('logs/'+tag_base+'-$(macroid)-$(process).err')


class gstlal_smooth_psd_node(pipeline.CondorDAGNode):
        """
        A gstlal_reference_psd node
        """
        def __init__(self, job, dag, gps_start_time, gps_end_time, instrument, input, p_node=[]):

                pipeline.CondorDAGNode.__init__(self,job)
                self.add_var_opt("instrument", instrument)
                path = os.getcwd()
                output_name = self.output_name = input.replace('reference','smoothed_reference')
                self.add_var_opt("output-psd",output_name)
                self.add_var_opt("input-psd",input)
                dag.output_cache.append(lal.CacheEntry(instrument, "-", segments.segment(gps_start_time, gps_end_time), "file://localhost/%s" % (output_name,)))
                for p in p_node:
                        self.add_parent(p)
                dag.add_node(self)


#
# Class for taking the average of all the reference PSDs
#

class gstlal_combine_psd_job(pipeline.CondorDAGJob):
        """
        A gstlal_reference_psd job
        """
        def __init__(self, executable=which('gstlal_ninja_median_of_psds'), tag_base='gstlal_ninja_median_of_psds'):
                """
                """
                self.__prog__ = 'gstlal_ninja_median_of_psds'
                self.__executable = executable
                self.__universe = 'vanilla'
                pipeline.CondorDAGJob.__init__(self,self.__universe,self.__executable)
                self.add_condor_cmd('getenv','True')
                self.add_condor_cmd('requirements', 'Memory > 1999') #FIXME is this enough?
                self.tag_base = tag_base
                self.add_condor_cmd('environment',"KMP_LIBRARY=serial;MKL_SERIAL=yes")
                self.set_sub_file(tag_base+'.sub')
                self.set_stdout_file('logs/'+tag_base+'-$(macroid)-$(process).out')
                self.set_stderr_file('logs/'+tag_base+'-$(macroid)-$(process).err')

class gstlal_combine_psd_node(pipeline.CondorDAGNode):
	"""
	A gstlal_reference_psd node
	"""
	def __init__(self, job, dag, output,instrument,file_list, p_node=[]):

		pipeline.CondorDAGNode.__init__(self,job)
		self.add_var_opt("instrument", instrument)
		self.add_var_opt("output-name",output)
		self.add_var_arg(' '.join(file_list))
		self.output_name = output
		for p in p_node:
			self.add_parent(p)
		dag.add_node(self)


#
# classes for generating recolored frames
#

class gstlal_recolor_frames_job(pipeline.CondorDAGJob):
	"""
	A gstlal_recolor_frames job
	"""
	def __init__(self, executable=which('gstlal_recolor_frames'), tag_base='gstlal_recolor_frames'):
		"""
		"""
		self.__prog__ = 'gstlal_recolor_frames'
		self.__executable = executable
		self.__universe = 'vanilla'
		pipeline.CondorDAGJob.__init__(self,self.__universe,self.__executable)
		self.add_condor_cmd('getenv','True')
		self.add_condor_cmd('requirements', 'Memory > 1999') #FIXME is this enough?
		self.tag_base = tag_base
		self.add_condor_cmd('environment',"KMP_LIBRARY=serial;MKL_SERIAL=yes")
		self.set_sub_file(tag_base+'.sub')
		self.set_stdout_file('logs/'+tag_base+'-$(macroid)-$(process).out')
		self.set_stderr_file('logs/'+tag_base+'-$(macroid)-$(process).err')


class gstlal_recolor_frames_node(pipeline.CondorDAGNode):
	"""
	A gstlal_recolor_frames node
	"""
	def __init__(self, job, dag, frame_cache, gps_start_time, gps_end_time, instrument, channel, out_channel, reference_psd, recolor_psd, sample_rate, frame_length, injections=None, shift = None ,p_node=[]):

		pipeline.CondorDAGNode.__init__(self,job)
		self.add_var_opt("frame-cache", frame_cache)
		self.add_var_opt("gps-start-time",gps_start_time)
		self.add_var_opt("gps-end-time",gps_end_time)
		self.add_var_opt("instrument", instrument)
		self.add_var_opt("channel-name", channel)
		if out_channel: self.add_var_opt("output-channel-name", out_channel)
		if injections: self.add_var_opt("injections", injections)
		path = os.getcwd()
		self.add_var_opt("recolor-psd",recolor_psd)
		self.add_var_opt("reference-psd",reference_psd)
		self.add_var_opt("sample-rate",sample_rate)
		self.add_var_opt("duration",frame_length)
		if shift:
			self.add_var_opt("shift",shift * 1000000000)
		for p in p_node:
			self.add_parent(p)
		dag.add_node(self)


def breakupsegs(seglists, min_segment_length):
	for instrument, seglist in seglists.iteritems():
		newseglist = segments.segmentlist()
		for seg in seglist:
			if abs(seg) > min_segment_length:
				newseglist.append(segments.segment(seg))
		seglists[instrument] = newseglist


def parse_command_line():
	parser = OptionParser(description = __doc__)
	parser.add_option("--segment-file", metavar = "filename", help = "Set the name of the xml file to get segments (required).")
	parser.add_option("--min-segment-length", metavar = "seconds", help = "Set the minimum segment length (required)", type="float")
	parser.add_option("--injections", metavar = "filename", help = "Set the name of the xml file to get a cache of svd banks (optional)")
	parser.add_option("--recolor-psd", metavar = "filename", help = "Set the name of the xml file to get the reference psd")
	parser.add_option("--frame-cache", metavar = "filenames", help = "Set the frame cache files in format H1=H1.cache,H2=H2.cache, etc..")
	#FIXME get this from the cache?
	parser.add_option("--channel", metavar = "name", help = "Set the channel name (default=LSC-STRAIN)", default="LSC-STRAIN")
	parser.add_option("--output-channel", metavar = "name", help = "Set the recolored output channel name", default=None)
	parser.add_option("--sample-rate", metavar = "Hz", help = "Desired data sample rate", type="int")
	parser.add_option("--frame-length", metavar = "Hz", help = "Desired length of output frames", type="int")
	parser.add_option("--df", metavar = "Hz", help = "Delta f in the frequency domain", type="float")
        parser.add_option("--shift", default = 0, metavar = "Hz", help = "Time shift of output frames", type="int")
	
	options, filenames = parser.parse_args()

	fail = ""
	for option in ("segment_file","min_segment_length", "frame_cache"):
		if getattr(options, option) is None:
			fail += "must provide option %s\n" % (option)
	if fail: raise ValueError, fail

	framecache = {}
	for c in options.frame_cache.split(','):
		ifo = c.split("=")[0]
		cache = c.replace(ifo+"=","")
		framecache[ifo] = cache
	
	return options, filenames, framecache#, process_params


options, filenames, frame_cache = parse_command_line()

try: os.mkdir("logs")
except: pass
dag = bank_DAG("recolor_pipe")

seglists = ligolw_segments.segmenttable_get_by_name(utils.load_filename(options.segment_file), "datasegments")
breakupsegs(seglists, options.min_segment_length)

psdJob = gstlal_reference_psd_job()
smoothJob = gstlal_smooth_psd_job()
combJob = gstlal_combine_psd_job()
colorJob = gstlal_recolor_frames_job()

parents = []
psd_file_list = []

for instrument, seglist in seglists.iteritems():
	for seg in seglist:
		#FIXME if there are sements without frame caches this will barf
		psdnode = gstlal_reference_psd_node(psdJob, dag, frame_cache[instrument], int(seg[0]), int(seg[1]), instrument, options.channel, options.sample_rate,int(round(1. / options.df)), injections=options.injections, p_node=[])
                smoothnode = gstlal_smooth_psd_node(smoothJob,dag,int(seg[0]), int(seg[1]),instrument,psdnode.output_name,p_node=[psdnode])
                parents.append(psdnode)
                psd_file_list.append(smoothnode.output_name)

combinedPSDfName = '%s-%d-%d-combined_psd.xml.gz' %(instrument,int(seglists[instrument][0][0]),int(seglists[instrument][-1][1]))

combNode = gstlal_combine_psd_node(combJob, dag,combinedPSDfName, instrument,psd_file_list,p_node = parents)

for instrument, seglist in seglists.iteritems():
        for seg in seglist:
		gstlal_recolor_frames_node(colorJob, dag, frame_cache[instrument], int(seg[0]), int(seg[1]), instrument, options.channel, options.output_channel, combNode.output_name, options.recolor_psd, options.sample_rate, options.frame_length, injections=options.injections, shift = options.shift, p_node=[combNode])
		
dag.write_sub_files()
dag.write_dag()
dag.write_script()
dag.write_cache()



