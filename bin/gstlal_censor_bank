#!/usr/bin/env python
#
# Copyright (C) 2011  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""
Create a "censored" template bank from an original template bank by
keeping only entries for which a boolean expression evaluates to True.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
from optparse import Option, OptionParser
opts, args = OptionParser(description=__doc__,
	usage="%prog input -o output -e EXPRESSION", option_list=[
		Option("-e", "--expression", metavar="Python expression",
			help="Keep rows for which expression is True. (e.g. mchirp > 1.2)"),
		Option("-o", "--output", metavar="FILE.xml[.gz]",
			help="Name of LIGO LW XML file for output template bank.")
]).parse_args()


# Validate command line arguments.
if len(args) > 1:
	raise ValueError("Too many command line arguments.")
elif len(args) == 0 or opts.expression is None or opts.output is None:
	raise ValueError("Not enough command line arguments.")
input = args[0]


# Compile expression.
expression = compile(opts.expression, '<command line arguments>', 'eval')

# Form predicate to test a row for expression.
def predicate(row):
	locals = dict( (key, getattr(row, key))
		for key in lsctables.SnglInspiralTable.validcolumns.iterkeys())
	return eval(expression, None, locals)

# Late imports.
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import process as ligolw_process
import sys

# Read and parse input template, add metadata for this program.
bank_xmldoc = utils.load_filename(input, gz=input.endswith(".gz"))
process = ligolw_process.append_process(bank_xmldoc, sys.argv[0],
	cvs_repository="gstlal")
ligolw_process.append_process_params(bank_xmldoc, process,
	((input, u"string", ""), ("--output", u"string", opts.output),
	("--expression", u"string", opts.expression)))
bank_sngl_table = lsctables.table.get_table(bank_xmldoc,
	lsctables.SnglInspiralTable.tableName)

# Filter rows of template bank.
bank_sngl_table[:] = filter(predicate, bank_sngl_table)

# Write output file.
ligolw_process.set_process_end_time(process)
utils.write_filename(bank_xmldoc, opts.output, gz=opts.output.endswith(".gz"))

