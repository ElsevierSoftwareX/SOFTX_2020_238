#!/usr/bin/env python
#
# Copyright (C) 2010  Erin Kara
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


from optparse import OptionParser
import os, sys
from glue import segments
from glue.segmentdb import query_engine
from glue.segmentdb import segmentdb_utils
from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import table
from glue import gpstime
from glue.ligolw import utils
import time

#########################################################################
# Convenience Functions
#########################################################################


# Get sim_inspiral xml as command line argument
url_name = sys.argv[1]
if not url_name:
	print >> sys.stderr, "Please specify a URL SimInspiral Table"
	sys.exit(1)

def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$", usage = "%prog [options] [file ...]", description = "%prog returns segment rows for successful hardware injections for a given detector")
	parser.add_option("-s", "--start-time", metavar = "path", help = "Indicate GPS start_time. Default is start of S6 run.")
	parser.add_option("-e", "--end-time", metavar = "path", help = "Indicate GPS end_time. Default is current time")

	opts, args = parser.parse_args()		

	if not opts.start_time:
		opts.start_time = 631154013 # FIXME: s6 start time? 
	if not opts.end_time:	
		opts.end_time =	gpstime.GpsSecondsFromPyUTC(time.time()) 
	return opts, args

opts, args = parse_command_line()
print opts.start_time, opts.end_time

def make_sim_inspiral_table(filename):
	from glue.ligolw import utils
	from glue.ligolw import lsctables
	
	# load file from url (temporarily from filename)
	#injection_xmldoc = utils.load_url(url_name)
	injection_xmldoc = utils.load_filename(filename)

	# Make SimInspiralTable
	injection_table = lsctables.table.get_table(injection_xmldoc, lsctables.SimInspiralTable.tableName)
	return injection_table


# Function that returns segments within start and end time for given ifo
def get_science_segments(ifo, start_time, end_time):
	segdefs = segmentdb_utils.expand_version_number(engine, (ifo, 'DMT-SCIENCE', 1, start_time, end_time, 0, 0)) 
	return segmentdb_utils.query_segments(engine, 'segment', segdefs)


#########################################################################
# Main
#########################################################################


# Make connection with S6_SEGMENT_SERVER
connection = segmentdb_utils.setup_database(os.getenv('S6_SEGMENT_SERVER'))
engine = query_engine.LdbdQueryEngine(connection)


# Filtering process for H1 and L1
ifos = ["H1", "L1", "V1"]
for ifo in ifos:

	# Get SimInspiralTable and end-time column from url file
	sim_inspiral = make_sim_inspiral_table(url_name) 


	# Make new sim_inspiral table for detected injections
	filtered_sim_inspiral = table.new_from_template(sim_inspiral)
		

	# Query segment database at specified GPS times
	science_segments = get_science_segments(ifo, int(opts.start_time), int(opts.end_time))[0]


	# Fill new sim_inspiral table with hardware injections that are coincident with science_segments
	# (Note: Injections are in 128 second segments)
	for row in sim_inspiral:
		if ifo == "H1":
			end_time = row.h_end_time
		elif ifo == "L1":
			end_time = row.l_end_time
		else:
			end_time = row.v_end_time
		if segments.segment((end_time - 64),(end_time + 64)) in science_segments:
			filtered_sim_inspiral.append(row)

	
	# Write table to xml file	
	fileobj = open("%s_hw_inj.xml" % ifo, "w")
	filtered_sim_inspiral.write(fileobj)
	


