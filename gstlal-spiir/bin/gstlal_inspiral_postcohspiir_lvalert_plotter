#!/usr/bin/env python
# Copyright (C) 2015 Qi Chu
# Modified from :
# Copyright (C) 2012	Kipp Cannon, Chad Hanna, Drew Keppel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA	02110-1301, USA.

## @file
# A program to request some followup data from a running gstlal_inspiral job based on gracedb submissions notified by lvalert

import sys, os
import logging
os.environ["MPLCONFIGDIR"] = "/tmp"
import copy
import time
from glue.ligolw import ligolw, lsctables
from glue.ligolw import utils as ligolw_utils
from glue.ligolw.utils import process as ligolw_process
import urllib
import urlparse
import httplib
import subprocess
from shutil import copyfile
from ligo.gracedb import rest as gracedb
import glob
import json
from optparse import OptionParser
from gstlal.workflow import lvalert_helper
from gstlal.pipemodules.postcohtable import postcoh_table_def

import pdb

class LIGOLWContentHandler(ligolw.LIGOLWContentHandler):
	pass
lsctables.use_in(LIGOLWContentHandler)

def gen_zerolag_fname(path):
	ls_proc = subprocess.Popen(["ls", path], stdout = subprocess.PIPE, stderr = subprocess.PIPE)
	ls_out = ""
	try:
		ls_out = subprocess.check_output(["grep", "zerolag"], stdin = ls_proc.stdout)
	except:
		print "no zerolag file yet"
		return
	ls_proc.wait()
	ls_out_list = ls_out.split("\n")
	ls_out_list_full_path = ["%s/" % path + one_out for one_out in ls_out_list[:-1]]
	input_zerolag_fname = ",".join(ls_out_list_full_path)
	return input_zerolag_fname

def call_plot_fits_func(pngname, fitsname, labelname, contour = None, colormap = "cylon"):
	cmd = []
	cmd += ["bayestar_plot_allsky_postcohspiir"]
	cmd += ["-o", pngname]
	cmd += ["--label", labelname]
	cmd += [fitsname]
	cmd += ["--colorbar"]
	cmd += ["--colormap", colormap]
	if contour:
		cmd += ["--contour", str(contour)]
	print cmd
	proc = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
	proc_out, proc_err = proc.communicate()
	return proc.returncode


def call_background_plot_func(parti_ifos, stats_fname, zerolag_fname, cohsnr, cmbchisq, output_fname, feat_prefix, njob, verbose = False):
	cmd = []
	cmd += ["gstlal_cohfar_plot_stats"]
	cmd += ["--output-rank", output_fname]
	cmd += ["--output-feature-prefix", feat_prefix]
	cmd += ["--input-stats", stats_fname]
	cmd += ["--zerolag-format", "single"]
	cmd += ["--cohsnr", str(cohsnr)]
	cmd += ["--cmbchisq", str(cmbchisq)]
	cmd += ["--ifos", parti_ifos]
	cmd += ["--far-factor", str(njob)]
	if zerolag_fname:
		cmd += ["--input-zerolag", zerolag_fname]
	if verbose:
		print cmd
	proc = subprocess.Popen(cmd)
	proc_out, proc_err = proc.communicate()
	return proc.returncode

def call_fits_skymap_func(out_cohsnr_fits, out_prob_fits, pipe_skymap_name, event_id, event_time, cuda_postcoh_detrsp_fname, verbose = False):
	input_fname = pipe_skymap_name
	cmd = []
	cmd += ["gstlal_postcoh_skymap2fits"]
	cmd += ["--output-cohsnr", out_cohsnr_fits]
	cmd += ["--output-prob", out_prob_fits]
	cmd += ["--cuda-postcoh-detrsp-fname", cuda_postcoh_detrsp_fname]
	cmd += ["--event-id", event_id]
	cmd += ["--event-time", str(event_time)]
	cmd += [input_fname]
	if verbose:
		print cmd
	proc = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
	proc_out, proc_err = proc.communicate()
	if verbose:
		print >> sys.stderr, "skymap2fits return code", proc.returncode
	return proc.returncode


def parse_command_line():
	parser = OptionParser()
	parser.add_option("--gracedb-service-url", default="%s" % gracedb.DEFAULT_SERVICE_URL, help = "GraceDb service url to upload to (default: %s)" % gracedb.DEFAULT_SERVICE_URL)
	parser.add_option("--cuda-postcoh-detrsp-fname", default="H1L1V1_prob_coeff.xml", help = "The Det array of A matrix to construct prob map (default: H1L1V1_prob_coeff.xml")
	parser.add_option("--ifos", metavar = "ifo-names", default = "H1L1V1", help = "Set the name of the ifo names (default = \"H1L1\").")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

	options, gid_list = parser.parse_args()
	
	if len(gid_list) > 1:
		raise ValueError("%d graceids specified, no more than one allowed" % len(gid_list))

	if len(gid_list) == 0:
		lvalert_data = json.loads(sys.stdin.read())
		logging.info("%(alert_type)s-type alert for event %(uid)s" % lvalert_data)
		logging.info("lvalert data: %s" % repr(lvalert_data))
		alert_type = lvalert_data["alert_type"]
		if alert_type != "new":
			logging.info("not a new-type alert.	skipping")
			sys.exit()
		gid = str(lvalert_data["uid"])
	else:
		gid = gid_list[0]

	return options, gid
	

options, gid = parse_command_line()
if not os.path.exists('gracedb'):
	os.mkdir('gracedb')

try:
	os.mkdir('gracedb/' + gid)
except OSError:
	pass

if options.verbose:
	print("loading tables from event %s" %gid)
#
# read from gracedb event
#
gracedb = gracedb.GraceDb(options.gracedb_service_url)
xmldoc = lvalert_helper.get_coinc_xmldoc(gracedb, gid)
coinc_inspiral_row = lsctables.CoincInspiralTable.get_table(xmldoc)[0]
sngl_inspiral_table = lsctables.SnglInspiralTable.get_table(xmldoc)
postcoh_table_row = postcoh_table_def.PostcohInspiralTable.get_table(xmldoc)[0]
process_params_table = lsctables.ProcessParamsTable.get_table(xmldoc)
event_ifos = "".join(coinc_inspiral_row.ifos.split(","))
ifo_list = coinc_inspiral_row.ifos.split(",")
path = sngl_inspiral_table[0].search
for process_params in process_params_table:
	if process_params.param == '--finalsink-far-factor':
		njob = process_params.value
	if process_params.param == '--cohfar-assignfar-input-fname':
		assignfar_fnames = process_params.value.split(',')
	if process_params.param == '--cuda-postcoh-output-skymap':
		cuda_postcoh_output_skymap = process_params.value
	
#
# Upload skymap
#
pipe_skymap_name = postcoh_table_row.skymap_fname
end_time = postcoh_table_row.end_time
out_cohsnr_fits = 'gracedb/%s/%s_cohsnr_skymap.fits.gz' % (gid, event_ifos)
out_cohsnr_png = 'gracedb/%s/%s_cohsnr_skymap.png' % (gid, event_ifos)
# follow Leo Single's email that fits name needs to be fixed
out_prob_fits = 'gracedb/%s/spiir.fits.gz' % gid
out_prob_png = 'gracedb/%s/spiir.png' % gid
msg = ""

try:
	copied_name = 'gracedb/%s/%s' % (gid, os.path.split(pipe_skymap_name)[-1])
	copyfile(pipe_skymap_name, copied_name)
except:
	msg += "no skymap generated in %s" % copied_name

returncode = call_fits_skymap_func(out_cohsnr_fits, out_prob_fits, pipe_skymap_name, gid, end_time, options.cuda_postcoh_detrsp_fname, verbose = options.verbose)

if returncode == 0:
	if options.verbose:
		print("Uploading %s for event %s" % (out_prob_fits, gid))

	gracedb.writeLog(gid, "%s prob skymap, with 90 percent contour" % event_ifos, filename = out_prob_fits, filecontents = open(out_prob_fits).read(), tag_name = "sky_loc")
else:
	msg += " can not make fits"

returncode = call_plot_fits_func(out_cohsnr_png, out_cohsnr_fits, "Coherent SNR", contour = None, colormap = "spectral")
returncode = returncode & call_plot_fits_func(out_prob_png, out_prob_fits, "Prob", contour = 90, colormap = "cylon") # default colormap
if returncode == 0:
	if options.verbose:
		print("Uploading %s, %s for %s, %s " % (out_prob_png, out_cohsnr_png, gid, msg))
	gracedb.writeLog(gid, "%s prob skymap" % event_ifos, filename = out_prob_png, filecontents = open(out_prob_png).read(), tag_name = "sky_loc")
	gracedb.writeLog(gid, "%s cohsnr skymap" % event_ifos, filename = out_cohsnr_png, filecontents = open(out_cohsnr_png).read(), tag_name = "sky_loc")
else:
	msg += " can not plot fits to pngs"
	gracedb.writeLog(gid, "%s, check if it is due to that the trigger single SNR is below %s in the postcoh element for a skymap output" % (msg, str(cuda_postcoh_output_skymap)), filename = None, tag_name = "sky_loc")

#
# set up the background stats files in path folder
#

if options.verbose:
	print assignfar_fnames

input_stats_fname_long = assignfar_fnames[0]
input_stats_fname_mid = assignfar_fnames[1]
input_stats_fname_short = assignfar_fnames[2]

#
# find zerolag files in the path folder
#
input_zerolag_fname = gen_zerolag_fname(path)

def get_stats_duration_name(stats_fname):
	return os.path.split(stats_fname)[-1].split('.')[0].split('_')[-1]

dur_long = get_stats_duration_name(input_stats_fname_long)
dur_mid = get_stats_duration_name(input_stats_fname_mid)
dur_short = get_stats_duration_name(input_stats_fname_short)

parti_ifos = options.ifos
outfname_long = 'gracedb/%s/%s_%s_rank_%s.png' % (gid, gid, parti_ifos, dur_long)
outfname_mid = 'gracedb/%s/%s_%s_rank_%s.png' % (gid, gid, parti_ifos, dur_mid)
outfname_short = 'gracedb/%s/%s_%s_rank_%s.png' % (gid, gid, parti_ifos, dur_short)

# read in the cohsnr, cmbchisq, and far values from the event
cohsnr = postcoh_table_row.cohsnr
cmbchisq = postcoh_table_row.cmbchisq
far = postcoh_table_row.far

# 
# call the program to plot background stats
#
call_background_plot_func(parti_ifos, input_stats_fname_long, input_zerolag_fname, cohsnr, cmbchisq, outfname_long, "None", njob)
call_background_plot_func(parti_ifos, input_stats_fname_mid, input_zerolag_fname, cohsnr, cmbchisq, outfname_mid, "None", njob)
call_background_plot_func(parti_ifos, input_stats_fname_short, input_zerolag_fname, cohsnr, cmbchisq, outfname_short, "None", njob)

#
# Upload Background plots
#
if options.verbose:
	print("Uploading %s for event %s" % (outfname_long, gid))

gracedb.writeLog(gid, "%s FAR_%s over ranking statistic" % (parti_ifos, dur_long), filename = outfname_long, filecontents = open(outfname_long).read(), tag_name = "background")

if options.verbose:
	print("Uploading %s for event %s" % (outfname_mid, gid))

gracedb.writeLog(gid, "%s FAR_%s over ranking statistic" % (parti_ifos, dur_mid), filename = outfname_mid, filecontents = open(outfname_mid).read(), tag_name = "background")

if options.verbose:
	print("Uploading %s for event %s" % (outfname_short, gid))

gracedb.writeLog(gid, "%s FAR_%s over ranking statistic" % (parti_ifos, dur_short), filename = outfname_short, filecontents = open(outfname_short).read(), tag_name = "background")

def get_snglsnr(snr_name, postcoh_table_row):
	if snr_name == 'snr_L':
		return postcoh_table_row.snglsnr_L
	if snr_name == 'snr_H':
		return postcoh_table_row.snglsnr_H
	if snr_name == 'snr_V':
		return postcoh_table_row.snglsnr_V

def get_chisq(chisq_name, postcoh_table_row):
	if chisq_name == 'chisq_L':
		return postcoh_table_row.chisq_L
	if chisq_name == 'chisq_H':
		return postcoh_table_row.chisq_H
	if chisq_name == 'chisq_V':
		return postcoh_table_row.chisq_V

#
# plot single FAR contours for significant triggers
#

if far < 1e-4:
	for ifo in ifo_list:
		snr_name = 'snr_%s' % ifo[0]
		snr = get_snglsnr(snr_name, postcoh_table_row)
		chisq_name = 'chisq_%s' % ifo[0]
		chisq = get_chisq(chisq_name, postcoh_table_row)
		output_feat_prefix_long = 'gracedb/%s/%s_%s_snrchi' % (gid, gid, dur_long)
		call_background_plot_func(ifo, input_stats_fname_long, input_zerolag_fname, snr, chisq, "None", output_feat_prefix_long, njob)
		outfname_long = 'gracedb/%s/%s_%s_snrchi_%s.png' % (gid, gid, dur_long, ifo)
		if options.verbose:
			print("Uploading %s for event %s" % (outfname_long, gid))
		gracedb.writeLog(gid, "%s FAR_%s over SNR/Chisq" % (ifo, dur_long), filename = outfname_long, filecontents = open(outfname_long).read(), tag_name = "background")

