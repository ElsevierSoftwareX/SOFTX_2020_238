#!/usr/bin/env python
#
# Copyright (C) 2013-2015  Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

## @file
# Compute an IIR bank for inspiral waveforms
#
# ### Command line interface
#
#	+ `--flow` [Hz] (float): Set the template low-frequency cut-off (default = 40.0).
#	+ `--sampleRate` [Hz] (float): Set the sample rate of the IIR template bank (optional).
#	+ `--epsilon` [pad] (float): Second order correction factor (default = 0.02).
#	+ `--epsilon-min` [pad] (float): Second order correction factor (default = 0.01).
#	+ `--req-min-match` [pad] (float): Set the SPIIR approximation minimal match (default = 0.0).
#	+ `--reference-psd` [filename]: Load the spectrum from this LIGO light-weight XML file (required).
#	+ `--template-bank` [filename]: Set the name of the LIGO light-weight XML file from which to load the template bank (required).
#	+ `--instrument` [ifo]: Set the instrument.
#	+ `--output` [filename]: Set the filename in which to save the template bank (required).
#	+ `--verbose`: Be verbose.



import sys
import scipy
import numpy
from optparse import OptionParser

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import array as ligolw_array
from glue.ligolw import param as ligolw_param
from glue.ligolw import utils as ligolw_utils

import matplotlib
matplotlib.use('Agg')

from matplotlib import pyplot


from lal.series import read_psd_xmldoc
from gstlal import templates
from gstlal.spiirbank import cbc_template_iir

class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
ligolw_array.use_in(DefaultContentHandler)
ligolw_param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)

def check_ffinal_and_find_max_ffinal(bank_table):
	f_final = bank_table.getColumnByName("f_final")
	if not all(f_final):
		#raise ValueError("f_final column not populated")
		#FIXME: hard-coded to be the half of sample rate
		return 2048.0
	return max(f_final)



parser = OptionParser(description = __doc__)
parser.add_option("--template-bank", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load the template bank (required).")
parser.add_option("--template-bank-type", type = "string", help = "Set the type of the template bank, sim or sngl (required).")
parser.add_option("--template-id", type = "int", default = 1, help = "Set the template that is spiir processed.")
parser.add_option("--output-item", type = "string", help = "Set the output item: all|fir|spiir (required).")
parser.add_option("--output-prefix", type = "string", help = "Set the output prefix: all|fir|spiir (required).")
parser.add_option("--flow", metavar = "Hz", type = "float", default = 30.0, help = "Set the template low-frequency cut-off (default = 30.0).")
parser.add_option("--sampleRate", metavar = "Hz", type = "float", default = 4096.0, help = "Set the sample rate of the IIR template bank (optional).")
parser.add_option("--autocorrelation-length", metavar = "len", type = "int", default = 201, help = "Autocorrelation length for chisq.")
parser.add_option("--epsilon", metavar = "pad", type = "float", default = 0.02, help = "Second order correction factor.")
parser.add_option("--epsilon-min", metavar = "pad", type = "float", default = 0.0, help = "Second order correction factor.")
parser.add_option("--req-min-match", metavar = "match", type = "float", default = 0.99, help = "Set the SPIIR approximation minimal match (default = 0.99).")
parser.add_option("--padding", metavar = "pad", type = "float", default = 1.3, help = "Fractional amount to pad time slices.")
parser.add_option("--reference-psd", metavar = "filename", help = "load the spectrum from this LIGO light-weight XML file (required).")
parser.add_option("--negative-latency", metavar = "seconds", type = "float", default = 0, help = "Set the number of seconds of negative latency.")
#FIXME figure out how to encode instrument info
parser.add_option("--instrument", metavar = "ifo", help = "Set the instrument")
parser.add_option("--approximant", metavar = "waveform approximant", default = "IMRPhenomB", help = "Set the svd approximant")
parser.add_option("--samples-min", type = "int", default = 1024, help = "The minimum number of samples to use for time slices default 1024")
parser.add_option("--samples-max-256", type = "int", default = 1024, help = "The maximum number of samples to use for time slices with frequencies above 256Hz, default 1024")
parser.add_option("--samples-max-64", type = "int", default = 2048, help = "The maximum number of samples to use for time slices with frequencies between 64Hz and 256 Hz, default 2048")
parser.add_option("--samples-max", type = "int", default = 4096, help = "The maximum number of samples to use for time slices with frequencies below 64Hz, default 4096")
parser.add_option("--waveform-domain", default = "TD", help = "Set the domain chosen method, TD or FD (optional).")
parser.add_option("--dump-txt", action = "store_true", help = "Dump to txt file (optional).")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

options, filenames = parser.parse_args()

required_options = ("template_bank", "template_bank_type", "output_item", "output_prefix", "reference_psd", "instrument")

missing_options = [option for option in required_options if getattr(options, option) is None]
if missing_options:
	raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

# read psd file
if options.reference_psd:
	ALLpsd = read_psd_xmldoc(ligolw_utils.load_filename(options.reference_psd, verbose=options.verbose, contenthandler=DefaultContentHandler))
else:
	ALLpsd = None



psd = ALLpsd[options.instrument]
bank_xmldoc = ligolw_utils.load_filename(options.template_bank, contenthandler = DefaultContentHandler, verbose = options.verbose)

if options.template_bank_type == "sngl":
	# Get sngl inspiral table
	bank_table = lsctables.SnglInspiralTable.get_table(bank_xmldoc)

elif options.template_bank_type == "sim":
	# Get sim inspiral table
	bank_table = lsctables.SimInspiralTable.get_table(bank_xmldoc)

if options.verbose:
	print "read %s bank table" % options.template_bank_type


if options.output_item == "all" or options.output_item == "fir":
	# Choose how to break up templates in time
	time_freq_bounds = templates.time_slices(
		bank_table,
		fhigh=check_ffinal_and_find_max_ffinal(bank_table),
		flow = options.flow,
		padding = options.padding,
		samples_min = options.samples_min,
		samples_max_256 = options.samples_max_256,
		samples_max_64 = options.samples_max_64, 
		samples_max = options.samples_max,
		verbose = options.verbose)

	fir_template, fir_template_full, fir_autocorr, fir_autocorr_full = cbc_template_iir.gen_whitened_fir_template(
		bank_table,
		options.approximant,
		int(options.template_id),
		psd,
		options.flow,
		time_freq_bounds,
		sampleRate = options.sampleRate, 
		autocorrelation_length = options.autocorrelation_length,
		negative_latency = options.negative_latency,
		verbose = options.verbose)
	fir_template_len = len(fir_template)

	# plot whitened fir template
	pyplot.figure()
	p1, = pyplot.plot(fir_template.real, label = 'whitened fir template')
	pyplot.xlabel('samples')	
	pyplot.ylabel('whitened fir template')	
	pyplot.legend()
	pyplot.savefig("%s_whitened_fir_template.svg" % options.output_prefix, format = "svg", dpi = 1200)
	if options.dump_txt is not None:
		numpy.savetxt("%s_whitened_fir_template.txt" % options.output_prefix, fir_template.view(float))

	# plot autocorrelation
	idx_start_shade = options.autocorrelation_length/2 - 5
	idx_end_shade = options.autocorrelation_length/2 + 5
	pyplot.figure()
	p1, = pyplot.plot(abs(fir_autocorr_full), label = 'autocorrelation of ori and ori')
	p2, = pyplot.plot(abs(fir_autocorr), label = 'autocorrelation of cut and ori')
	pyplot.axvspan(idx_start_shade, idx_end_shade, facecolor = '0.5', alpha = 0.5, label = "+_5 samples")
	pyplot.xlabel('samples')	
	pyplot.ylabel('normalized autocorrelation')	
	pyplot.legend(loc='best')
	pyplot.savefig("%s_autocorrelation.svg" % options.output_prefix, format = "svg", dpi = 1200)
	if options.dump_txt is not None:
		numpy.savetxt("%s_whitened_autocorrelation.txt" % options.output_prefix, fir_autocorr.view(float))

if options.output_item == "all" or options.output_item == "spiir":
	# generate the normalized spiir-reconstructed waveform and original whitened waveform for spiir reconstruction
	# h_pad spiir_template, u_rev_pad spiir_reconstructed
	u_rev_pad, h_pad, spiir_data_full  = cbc_template_iir.gen_whitened_spiir_template_and_reconstructed_waveform(
		bank_table,
		options.approximant,
		int(options.template_id),
		psd, 
		sampleRate = options.sampleRate, 
		flower=options.flow, 
		waveform_domain = options.waveform_domain, 
		epsilon = options.epsilon, 
		epsilon_min = options.epsilon_min, 
		autocorrelation_length = options.autocorrelation_length, 
		req_min_match = options.req_min_match,
		negative_latency = options.negative_latency,
		verbose = options.verbose)

	u_len = len(u_rev_pad)
	# plot whitened templates individually
	pyplot.figure()
	p1, = pyplot.plot(h_pad.real, label = 'whitened spiir template')
	pyplot.xlabel('samples')	
	pyplot.ylabel('spiir')	
	pyplot.legend()
	pyplot.savefig("%s_whitened_spiir_template.svg" % options.output_prefix, format = "svg", dpi = 1200)
	if options.dump_txt is not None:
		numpy.savetxt("%s_whitened_spiir_full_template.txt" % options.output_prefix, spiir_data_full.view(float))
		numpy.savetxt("%s_whitened_spiir_template.txt" % options.output_prefix, h_pad.view(float))

	pyplot.figure()
	p1, = pyplot.plot(u_rev_pad.real, label = 'whitened spiir reconstructed')
	pyplot.xlabel('samples')	
	pyplot.ylabel('spiir')	
	pyplot.legend()
	pyplot.savefig("%s_whitened_spiir_reconstructed.svg" % options.output_prefix, format = "svg", dpi = 1200)
	if options.dump_txt is not None:
		numpy.savetxt("%s_whitened_spiir_reconstructed.txt" % options.output_prefix, u_rev_pad.view(float))
		
if options.output_item == "all":
	hp, hc = cbc_template_iir.gen_lalsim_waveform(bank_table[int(options.template_id)], options.flow, options.sampleRate, options.approximant)
	pyplot.figure()
	p1, = pyplot.plot(hp.data.data, label = 'noncondition waveform hp')
	pyplot.xlabel('samples')	
	pyplot.ylabel('hp')	
	pyplot.legend()
	pyplot.savefig("%s_noncondition_hp_waveform.svg" % options.output_prefix, format = "svg", dpi = 1200)
	
	
	align_len = max(fir_template_len, u_len, len(spiir_data_full))
	# pad fir_template to be the same length as align_len
	fir_pad = numpy.zeros(align_len, dtype = "cdouble")
	fir_pad[-len(fir_template):] = fir_template
	norm_fir = abs(numpy.dot(fir_pad, numpy.conj(fir_pad)))


	spiir_full_pad = numpy.zeros(align_len, dtype = "cdouble")
	spiir_full_pad[-len(spiir_data_full):] = spiir_data_full
	norm_spiir_full = abs(numpy.dot(spiir_full_pad, numpy.conj(spiir_full_pad)))
	# overlap between fir template and the original spiir full template:
	overlap_fir_spiir_full = abs(numpy.dot(fir_pad, numpy.conj(spiir_full_pad)))/numpy.sqrt(norm_fir*norm_spiir_full)

	# pad u_rev_pad, h_pad to be the same length as align_len
	u_rev_pad2 = numpy.zeros(align_len, dtype = "cdouble")
	u_rev_pad2[-len(u_rev_pad):] = u_rev_pad
	
	h_pad2 = numpy.zeros(align_len, dtype = "cdouble")
	h_pad2[-len(h_pad):] = h_pad
	
	norm_h = abs(numpy.dot(h_pad2, numpy.conj(h_pad2)))
	# overlap between fir template and the spiir template:
	overlap_fir_h = abs(numpy.dot(fir_pad, numpy.conj(h_pad2)))/numpy.sqrt(norm_fir*norm_h)

	print "overlap of fir and spiir full: %f, of fir and h (spiir template) %f" % (overlap_fir_spiir_full, overlap_fir_h)
	
	# plot all the whitened templates in one figure
	pyplot.figure()
	p1, = pyplot.plot(u_rev_pad2.real, label = 'whitened spiir reconstructed')
	p2, = pyplot.plot(h_pad2.real, label = 'whitened spiir template')
	p3, = pyplot.plot(fir_pad.real, label = 'whitened fir template')
	pyplot.xlabel('samples')	
	pyplot.ylabel('u, h')	
	pyplot.legend()
	pyplot.savefig("%s_all_whitened_templates.svg" % options.output_prefix, format = "svg", dpi = 1200)
	

