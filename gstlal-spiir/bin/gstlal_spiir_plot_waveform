#!/usr/bin/env python
#
# Copyright (C) 2011-2012  Shaun Hooper
# Copyright (C) 2013-2015  Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

## @file
# Compute an IIR bank for inspiral waveforms
#
# ### Command line interface
#
#	+ `--flow` [Hz] (float): Set the template low-frequency cut-off (default = 40.0).
#	+ `--sampleRate` [Hz] (float): Set the sample rate of the IIR template bank (optional).
#	+ `--epsilon` [pad] (float): Second order correction factor (default = 0.02).
#	+ `--req-min-match` [pad] (float): Set the SPIIR approximation minimal match (default = 0.0).
#	+ `--reference-psd` [filename]: Load the spectrum from this LIGO light-weight XML file (required).
#	+ `--template-bank` [filename]: Set the name of the LIGO light-weight XML file from which to load the template bank (required).
#	+ `--instrument` [ifo]: Set the instrument.
#	+ `--output` [filename]: Set the filename in which to save the template bank (required).
#	+ `--verbose`: Be verbose.



import sys
import scipy
import numpy
from optparse import OptionParser

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import array as ligolw_array
from glue.ligolw import param as ligolw_param
from glue.ligolw import utils as ligolw_utils

import matplotlib
matplotlib.use('Agg')

from matplotlib import pyplot


from pylal.series import read_psd_xmldoc
from gstlal import templates
from gstlal import cbc_template_iir

class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
ligolw_array.use_in(DefaultContentHandler)
ligolw_param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)

def check_ffinal_and_find_max_ffinal(xmldoc):
	f_final = lsctables.SnglInspiralTable.get_table(xmldoc).getColumnByName("f_final")
	if not all(f_final):
		raise ValueError("f_final column not populated")
	return max(f_final)



parser = OptionParser(description = __doc__)
parser.add_option("--flow", metavar = "Hz", type = "float", default = 40.0, help = "Set the template low-frequency cut-off (default = 40.0).")
parser.add_option("--sampleRate", metavar = "Hz", type = "float", default = 4096.0, help = "Set the sample rate of the IIR template bank (optional).")
parser.add_option("--autocorrelation-length", metavar = "len", type = "float", default = 201, help = "Autocorrelation length for chisq.")
parser.add_option("--epsilon", metavar = "pad", type = "float", default = 0.02, help = "Second order correction factor.")
parser.add_option("--req-min-match", metavar = "match", type = "float", default = 0.99, help = "Set the SPIIR approximation minimal match (default = 0.99).")
parser.add_option("--padding", metavar = "pad", type = "float", default = 1.3, help = "Fractional amount to pad time slices.")
parser.add_option("--reference-psd", metavar = "filename", help = "load the spectrum from this LIGO light-weight XML file (required).")
parser.add_option("--template-bank", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load the template bank (required).")
parser.add_option("--template-id", type = "int", default = 1, help = "Set the template that is spiir processed.")
#FIXME figure out how to encode instrument info
parser.add_option("--instrument", metavar = "ifo", help = "Set the instrument")
parser.add_option("--approximant", metavar = "waveform approximant", default = "IMRPhenomB", help = "Set the svd approximant")
parser.add_option("--samples-min", type = "int", default = 1024, help = "The minimum number of samples to use for time slices default 1024")
parser.add_option("--samples-max-256", type = "int", default = 1024, help = "The maximum number of samples to use for time slices with frequencies above 256Hz, default 1024")
parser.add_option("--samples-max-64", type = "int", default = 2048, help = "The maximum number of samples to use for time slices with frequencies between 64Hz and 256 Hz, default 2048")
parser.add_option("--samples-max", type = "int", default = 4096, help = "The maximum number of samples to use for time slices with frequencies below 64Hz, default 4096")
parser.add_option("--output", metavar = "filename", help = "Set the filename in which to save the template bank (required).")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

options, filenames = parser.parse_args()

required_options = ("template_bank", "output")

missing_options = [option for option in required_options if getattr(options, option) is None]
if missing_options:
	raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

# read psd file
if options.reference_psd:
	ALLpsd = read_psd_xmldoc(ligolw_utils.load_filename(options.reference_psd, verbose=options.verbose, contenthandler=DefaultContentHandler))
else:
	ALLpsd = None


psd = ALLpsd[options.instrument]

bank_xmldoc = ligolw_utils.load_filename(options.template_bank, contenthandler = DefaultContentHandler, verbose = options.verbose)

# Get sngl inspiral table
bank_sngl_table = lsctables.SnglInspiralTable.get_table(bank_xmldoc)

hp, hc = cbc_template_iir.gen_lalsim_waveform(bank_sngl_table[int(options.template_id)], options.flow, options.sampleRate)

# Choose how to break up templates in time
time_freq_bounds = templates.time_slices(
		bank_sngl_table,
		fhigh=check_ffinal_and_find_max_ffinal(bank_xmldoc),
		flow = options.flow,
		padding = options.padding,
		samples_min = options.samples_min,
		samples_max_256 = options.samples_max_256,
		samples_max_64 = options.samples_max_64, 
		samples_max = options.samples_max,
		verbose = options.verbose)

fir_template, fir_autocorrelation = cbc_template_iir.gen_whitened_fir_template(
		bank_sngl_table,
		options.approximant,
		int(options.template_id),
		psd,
		options.flow,
		time_freq_bounds,
		autocorrelation_length = options.autocorrelation_length,
		verbose = options.verbose)

# generate the normalized spiir-reconstructed waveform and original whitened waveform
u_rev_pad, h_pad = cbc_template_iir.gen_whitened_spiir_template(
		options.template_bank, 
		int(options.template_id),
		psd, 
		sampleRate = options.sampleRate, 
		flower=options.flow, 
		epsilon = options.epsilon, 
		autocorrelation_length = options.autocorrelation_length, 
		req_min_match = options.req_min_match,
		verbose = options.verbose)
template_len = len(fir_template)
u_rev_pad2 = numpy.zeros(template_len, dtype = "cdouble")
u_rev_pad2[-len(u_rev_pad):] = u_rev_pad

h_pad2 = numpy.zeros(template_len, dtype = "cdouble")
h_pad2[-len(h_pad):] = h_pad

pyplot.figure()
p1, = pyplot.plot(hp.data.data, label = 'waveform hp')
pyplot.xlabel('samples')	
pyplot.ylabel('hp')	
pyplot.legend()
pyplot.savefig("waveform.svg", format = "svg", dpi = 1200)


pyplot.figure()
p1, = pyplot.plot(u_rev_pad2.real, label = 'spiir reconstructed')
p2, = pyplot.plot(h_pad2.real, label = 'original template')
p3, = pyplot.plot(fir_template.real, label = 'fir template')
pyplot.xlabel('samples')	
pyplot.ylabel('u, h')	
pyplot.legend()
pyplot.savefig(options.output, format = "svg", dpi = 1200)


