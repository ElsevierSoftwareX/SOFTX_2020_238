#!/usr/bin/env python
#
# Copyright (C) 2011-2012  Shaun Hooper
# Copyright (C) 2013-2015  Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

## @file
# Compute an IIR bank for inspiral waveforms
#
# ### Command line interface
#
#	+ `--flow` [Hz] (float): Set the template low-frequency cut-off (default = 40.0).
#	+ `--sampleRate` [Hz] (float): Set the sample rate of the IIR template bank (optional).
#	+ `--padding` [pad] (float): Fractional amount to pad time slices (default = 1.3).
#	+ `--epsilon` [pad] (float): Second order correction factor (default = 0.02).
#	+ `--req-min-match` [pad] (float): Set the SPIIR approximation minimal match (default = 0.0).
#	+ `--reference-psd` [filename]: Load the spectrum from this LIGO light-weight XML file (required).
#	+ `--template-bank` [filename]: Set the name of the LIGO light-weight XML file from which to load the template bank (required).
#	+ `--instrument` [ifo]: Set the instrument.
#	+ `--output` [filename]: Set the filename in which to save the template bank (required).
#	+ `--downsample`: Choose if you want to downsample IIR bank to multirate(recommended).
#	+ `--verbose`: Be verbose.


import sys
import scipy
import numpy
from optparse import OptionParser

from glue.ligolw import ligolw
from glue.ligolw import array
from glue.ligolw import param
array.use_in(ligolw.LIGOLWContentHandler)
param.use_in(ligolw.LIGOLWContentHandler)

from glue.ligolw import utils, lsctables
from lal.series import read_psd_xmldoc
from gstlal.spiirbank.cbc_template_iir import Bank

import json

parser = OptionParser(description = __doc__)
parser.add_option("--flow", metavar = "Hz", type = "float", default = 15.0, help = "Set the template low-frequency cut-off (default = 15.0).")
parser.add_option("--snr-cut", type = "float", default = 0.998, help = "Set the SNR contribution kept for filter placement (default = 0.998).")
parser.add_option("--sampleRate", metavar = "Hz", type = "float", default = 4096.0, help = "Set the sample rate of the IIR template bank (optional).")
parser.add_option("--negative-latency", metavar = "seconds", type = "float", default = 0, help = "Set the number of seconds of negative latency.")
parser.add_option("--padding", metavar = "pad", type = "float", default = 1.3, help = "Fractional amount to pad time slices.")
parser.add_option("--autocorrelation-length", metavar = "len", type = "int", default = 201, help = "Autocorrelation length for chisq.")
parser.add_option("--epsilon-start", metavar = "pad", type = "float", default = 0.02, help = "Second order correction factor.")
parser.add_option("--epsilon-min", type = "float", default = 0.001, help = "Second order correction factor.")
parser.add_option("--epsilon-max", type = "float", default = None, help = "Second order correction factor.")
parser.add_option("--filters-min", metavar = "len", type = "int", default = 0, help = "Minimal number of filters.")
parser.add_option("--filters-max", metavar = "len", type = "int", default = None, help = "Maximal number of filters.")
parser.add_option("--filters-per-loglen-min", metavar = "len", type = "int", default = 0, help = "Minimal number of filters per log_2(length).")
parser.add_option("--filters-per-loglen-max", metavar = "len", type = "int", default = None, help = "Maximal number of filters per log_2(length).")
parser.add_option("--initial-overlap-min", metavar = "match", type = "float", default = None, help = "Set the SPIIR approximation minimal match (default = 0.99).")
parser.add_option("--b0-optimized-overlap-min", metavar = "match", type = "float", default = None, help = "Set the SPIIR approximation minimal match (default = None).")
parser.add_option("--final-overlap-min", metavar = "match", type = "float", default = None, help = "Set the SPIIR approximation minimal match (default = None).")
parser.add_option("--reference-psd", metavar = "filename", help = "load the spectrum from this LIGO light-weight XML file (required).")
parser.add_option("--template-bank", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load the template bank (required).")
#FIXME figure out how to encode instrument info
parser.add_option("--instrument", metavar = "ifo", help = "Set the instrument")
parser.add_option("--waveform-domain", default = "TD", help = "Set the domain chosen method, TD or FD (optional).")
parser.add_option("--approximant", default = "SpinTaylorT4", help = "Set the approximant (default = SpinTaylorT4).")
parser.add_option("--output", metavar = "filename", help = "Set the filename in which to save the template bank (required).")
parser.add_option("--downsample", action = "store_true", help = "Choose if you want to downsample IIR bank (recommended)")
parser.add_option("--optimizer-options", default="{}", help = "Pass dictionary of options to the optimizer (parsed using json.loads).")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

options, filenames = parser.parse_args()

required_options = ("template_bank", "output")

missing_options = [option for option in required_options if getattr(options, option) is None]
if missing_options:
	raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

# read psd file
if options.reference_psd:
	ALLpsd = read_psd_xmldoc(utils.load_filename(options.reference_psd, verbose=options.verbose, contenthandler=ligolw.LIGOLWContentHandler))
else:
	ALLpsd = None


# generate the iir coefficients and write to xml
bank = Bank()

bank.build_from_tmpltbank(
		options.template_bank, 
		sampleRate = options.sampleRate, 
		negative_latency = options.negative_latency,
		all_psd = ALLpsd, 
		verbose=options.verbose, 
		padding=options.padding, 
		flower=options.flow, 
		snr_cut=options.snr_cut,
		downsample = options.downsample, 
		optimizer_options = json.loads(options.optimizer_options),
		waveform_domain = options.waveform_domain, 
		approximant = options.approximant,
		epsilon_start = options.epsilon_start,
		epsilon_min = options.epsilon_min,
		epsilon_max = options.epsilon_max,
		filters_min = options.filters_min,
		filters_max = options.filters_max,
		filters_per_loglen_min = options.filters_per_loglen_min,
		filters_per_loglen_max = options.filters_per_loglen_max,
		initial_overlap_min = options.initial_overlap_min,
		b0_optimized_overlap_min = options.b0_optimized_overlap_min,
		final_overlap_min = options.final_overlap_min,
		autocorrelation_length = options.autocorrelation_length)
bank.write_to_xml(options.output)


