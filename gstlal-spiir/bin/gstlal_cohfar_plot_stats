#! /usr/bin/env python
#
# Copyright (C) 2016 Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import numpy as np
import scipy
import math
import csv
import re
import logging
from optparse import OptionParser
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot
from matplotlib import rc

rc('text', usetex = True)

from glue.ligolw import ligolw, lsctables, array, param, utils, types
from gstlal.pipemodules.postcohtable.postcoh_table_def import PostcohInspiralTable
from gstlal.pipemodules import pipe_macro
import pdb

Attributes = ligolw.sax.xmlreader.AttributesImpl

# FIXME:  require calling code to provide the content handler
class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
array.use_in(DefaultContentHandler)
param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)


def param_from_xml(filename, param_name, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	for root in (elem for elem in xmldoc.getElementsByTagName(ligolw.LIGO_LW.tagName) if elem.hasAttribute(u"Name") and elem.Name == pipe_macro.STATS_XML_ID_NAME):
		result = param.get_param(root, param_name).pcdata
	return result


def array_from_xml(filename, array_name, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	for root in (elem for elem in xmldoc.getElementsByTagName(ligolw.LIGO_LW.tagName) if elem.hasAttribute(u"Name") and elem.Name == pipe_macro.STATS_XML_ID_NAME):
		result = array.get_array(root, array_name).array 
	return result

def postcoh_table_from_xml(filename, contenthandler = DefaultContentHandler, verbose = False):

	files = filename.split(",")
	all_table = lsctables.New(PostcohInspiralTable)
	for file in files:
	  # Load document
	  xmldoc = utils.load_filename(file, contenthandler = contenthandler, verbose = verbose)
	  postcoh = PostcohInspiralTable.get_table(xmldoc)
	  all_table.extend(postcoh)
	return all_table

def convert_rankmap_to_fapmap(rankmap, rankfap):
	fapmap = np.zeros(rankmap.shape)
	for ix in range(0, rankmap.shape[0]):
		for iy in range(0, rankmap.shape[1]):
			rank = rankmap[ix, iy]
			rank_idx = min(max(rank - pipe_macro.rankmin, 0)/pipe_macro.rankstep, pipe_macro.rankbin-1)
			fapmap[ix, iy] = rankfap[rank_idx]
	return fapmap

def append_missing_options(missing_options, options, option):
	if getattr(options, option) is None:
		missing_options.append("--%s" % option.replace("_", "-"))

def plot_rank(options, ifos):
	rankfap_name = "%s:%s_%s" % (pipe_macro.BACKGROUND_XML_RANK_NAME, ifos, pipe_macro.RANK_FAP_SUFFIX)
	nevent_name = "%s:%s_nevent" % (pipe_macro.BACKGROUND_XML_RANK_NAME, ifos)
	livetime_name = "%s:%s_livetime" % (pipe_macro.BACKGROUND_XML_RANK_NAME, ifos)
	hist_trials_name = "%s:hist_trials" % pipe_macro.BACKGROUND_XML_FEATURE_NAME

	rankfap = array_from_xml(options.input_stats, rankfap_name)
	rank_nevent = int(param_from_xml(options.input_stats, nevent_name))
	rank_livetime = int(param_from_xml(options.input_stats, livetime_name))
	hist_trials = int(param_from_xml(options.input_stats, hist_trials_name))
	n_s = rank_nevent / (float(rank_livetime)*hist_trials) * float(options.far_factor)
	
	lgrankfar = np.log10(rankfap * n_s)
	
	# find rank for far == one per month : 
	far_thresh = np.log10(1./86400/30)
	min_diff = 100
	for i in range(0, len(lgrankfar)):
		this_diff = np.abs(lgrankfar[i] - far_thresh)
		if  this_diff < min_diff:
			min_diff = this_diff 
			rank_idx = i
	
	print "plot far_thresh",far_thresh, "rank idx", rank_idx
	pyplot.figure()
	x = np.arange(pipe_macro.rankmin, pipe_macro.rankmax, pipe_macro.rankstep)
	cut_line = range(-40,int(far_thresh)+1)
	pyplot.plot(x, lgrankfar)
	pyplot.plot(np.ones(len(cut_line))*x[rank_idx], cut_line, label = "far = 1/Month, rank = %f" % x[rank_idx])
	pyplot.legend()
	pyplot.xlabel(r'$\log_{10}(R)$')	
	pyplot.ylabel(r'$\log_{10}(\mathrm{FAR}) (\mathrm{Hz})$')	
	pyplot.title("%s Background rank nevent %d, rank livetime %d" % (ifos, rank_nevent, rank_livetime))
	pyplot.savefig(options.output_rank)
	

def plot_feature(options, ifo):
	# load the rankmap, rankfap, nevent, livetime, and hist_trials from background stats xml file
	rankmap_name = "%s:%s_%s" % (pipe_macro.BACKGROUND_XML_RANK_NAME, ifo, pipe_macro.RANK_MAP_SUFFIX)
	nevent_name = "%s:%s_nevent" % (pipe_macro.BACKGROUND_XML_FEATURE_NAME, ifo)
	livetime_name = "%s:%s_livetime" % (pipe_macro.BACKGROUND_XML_FEATURE_NAME, ifo)
	hist_trials_name = "%s:hist_trials" % pipe_macro.BACKGROUND_XML_FEATURE_NAME
	
	rankmap = array_from_xml(options.input_stats, rankmap_name)
	nevent = int(param_from_xml(options.input_stats, nevent_name))
	livetime = int(param_from_xml(options.input_stats, livetime_name))
	hist_trials = int(param_from_xml(options.input_stats, hist_trials_name))
	
	# load the zerolag file for comparison
	if options.input_zerolag is not None:
		zerolags = postcoh_table_from_xml(options.input_zerolag)
		try:
			snr_name = 'snglsnr_%s' % ifo[0]
			chisq_name = 'chisq_%s' % ifo[0]
			all_cohsnr = np.log10(zerolags.getColumnByName(snr_name))
			all_chisq = np.log10(zerolags.getColumnByName(chisq_name))
		except:
			all_cohsnr = np.log10(zerolags.getColumnByName("cohsnr"))
			all_chisq = np.log10(zerolags.getColumnByName("cmbchisq"))
	

	# FIXME: convert rankmap to rankfap
	
	# no longer useful, rank fap map is not fap from the old ranking statistic: CDF
	farmap = rankmap * nevent / (float(livetime)*hist_trials) * float(options.far_factor)
	lgfarmap = np.log10(farmap)
	
	event_cohsnr = np.log10(options.cohsnr)
	event_chisq = np.log10(options.cmbchisq)
	
	cohsnr_idx = min(max(event_cohsnr - pipe_macro.xmin, 0)/pipe_macro.xstep, pipe_macro.rankbin-1)
	chisq_idx = min(max(event_chisq - pipe_macro.ymin, 0)/pipe_macro.ystep, pipe_macro.rankbin-1)
	
	event_far = farmap[chisq_idx, cohsnr_idx]
	print "event far %e\n" % event_far
	
	pyplot.figure()
	x = np.arange(pipe_macro.xmin-0.5, pipe_macro.xmax, pipe_macro.xstep)
	y = np.arange(pipe_macro.ymin-0.5, pipe_macro.ymax, pipe_macro.ystep)
	X, Y = np.meshgrid(x, y)
	
	levels = np.arange(-13, -2, 2)
	CS = pyplot.contour(lgfarmap, levels, origin = 'lower', extent = (pipe_macro.xmin, pipe_macro.xmax, pipe_macro.ymin, pipe_macro.ymax))
	CB = pyplot.colorbar(CS, shrink = 0.8, extend = 'both')
	
	if options.input_zerolag is not None:
		CM = pyplot.scatter(all_cohsnr, all_chisq, color = 'k', marker = 'o', s = 6, facecolors = 'none')
		CM2 = pyplot.scatter(event_cohsnr, event_chisq, color = 'r', marker = 'x', s = 200, facecolors = 'none')
		pyplot.legend((CM, CM2), ('all spiir zerolags', 'this spiir zerolag'), loc='lower right')
	else:
		CM2 = pyplot.scatter(event_cohsnr, event_chisq, color = 'r', marker = 'x', s = 200, facecolors = 'none')
		pyplot.legend((CM2,), ('this spiir zerolag',), loc='lower right')

	pyplot.ylim(pipe_macro.ymin,pipe_macro.ymax)
	pyplot.xlim(pipe_macro.xmin,pipe_macro.xmax)
	pyplot.xlabel(r'$\log_{10}(\rho_c)$')	
	pyplot.ylabel(r'$\log_{10}(\xi_c^2)$')	
	pyplot.title("%s Background nevent %d, livetime %d" % (ifo, nevent, livetime))
	pyplot.savefig("%s_%s.png" % (options.output_feature_prefix, ifo))
		
def parse_command_line():
	parser = OptionParser(usage = "%prog [options] [file ...]", description = "%prog to plot pdf and cdf")
	parser.add_option("--output-feature-prefix", default = "", metavar = "name", help = "Set the output file name")
	parser.add_option("--output-rank", default = "", metavar = "name", help = "Set the output file name")
	parser.add_option("--input-stats", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--zerolag-format", default = "", metavar = "name", help = "format support, single | multi")
	parser.add_option("--cohsnr", type = "float", default = 8.0, help = "if format is single, read the cohsnr")
	parser.add_option("--cmbchisq", type = "float", default = 1.0, help = "if format is single, read the combined chisq")
	parser.add_option("--far-factor", type = "float", default = 12, help = "a factor multiplied to event far")
	parser.add_option("--input-zerolag", default = None, metavar = "name", help = "Set the input stats file name")
	parser.add_option("--ifos", metavar = "name", help = "set the ifos to plot pdf and cdf")
	options, tmp = parser.parse_args()

	missing_options = []
	append_missing_options(missing_options, options, "output_feature_prefix")
	append_missing_options(missing_options, options, "output_rank")
	append_missing_options(missing_options, options, "input_stats")
	if options.zerolag_format == "single":
		append_missing_options(missing_options, options, "cohsnr")
		append_missing_options(missing_options, options, "cmbchisq")

	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join(sorted(missing_options))

	return options

options = parse_command_line()

ifos = pipe_macro.get_sorted_ifo_string(options.ifos)

if options.output_feature_prefix != "None":
	for ifo in re.findall('..', options.ifos):
		plot_feature(options, ifo)

if options.output_rank != "None":
	plot_rank(options, ifos)

