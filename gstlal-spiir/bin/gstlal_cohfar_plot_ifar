#! /usr/bin/env python
#
# Copyright (C) 2016 Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import os
import numpy as np
import scipy
import math
import csv
import logging
from optparse import OptionParser
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot

from glue import iterutils
from gstlal.postcoh_table_def import PostcohInspiralTable
from glue.ligolw import ligolw, lsctables, array, param, utils, types
from pylal import datatypes as laltypes
from pylal import git_version
from gstlal import cohfar
import subprocess
import pdb

# def postcoh_table_from_xml(filename, contenthandler = DefaultContentHandler, verbose = False):
# 
# 	# Load document
# 	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)
# 
# 	postcoh = PostcohInspiralTable.get_table(xmldoc)
# 	return postcoh

def append_missing_options(missing_options, options, option):
	if getattr(options, option) is None:
		missing_options.append("--%s" % option.replace("_", "-"))


def parse_command_line():
	parser = OptionParser(version = git_version.verbose_msg, usage = "%prog [options] [file ...]", description = "%prog to plot pdf and cdf")
	parser.add_option("--output-filename", default = "", metavar = "name", help = "Set the output file name")
	parser.add_option("--input-zerolag-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--livetime", type = "float", help ="input coinc time")
	parser.add_option("--label", default = "shifted", metavar = "name", help = "Set the output file name")
	options, tmp = parser.parse_args()

	missing_options = []
	append_missing_options(missing_options, options, "output_filename")
	append_missing_options(missing_options, options, "input_zerolag_filename")

	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join(sorted(missing_options))

	return options

options = parse_command_line()




logging.info("count the number of zerolags above a series of IFAR thresholds")
step=50
tick_lgifar = np.linspace(-1, 7, step)

theory_lgcevent = np.zeros(len(tick_lgifar))
theory_lgcevent = - tick_lgifar + np.log10(float(options.livetime))

myfar = cohfar.FAR()

zerolag_lgcevent_kde = myfar.count_above_ifar_xml(options.input_zerolag_filename, tick_lgifar)
logging.info("plot the numbers of zerolags versus IFAR thresholds")
if 0:
	pyplot.figure()
	#p1 = pyplot.plot(tick_lgcdf, back_lgcevent)
	p2, = pyplot.plot(tick_lgcdf, back_lgfar, label = 'background')
#	p3, = pyplot.plot(tick_lgcdf[nonzero_tick:], zerolag_lgcevent[nonzero_tick:], label = '8' r'$\pi$' 'shifted')
	pyplot.gca().invert_xaxis()
	pyplot.xlabel('lg' r'$d_0$')	
	pyplot.ylabel('lg FAR' r'($s^{-1}$)')	
	pyplot.legend()
	pyplot.savefig("P0_vs_far.png")


factor = np.log(10)

pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
#p1 = pyplot.plot(tick_lgcdf, back_lgcevent)
p2, = pyplot.loglog(np.exp(factor*tick_lgifar), np.exp(factor*theory_lgcevent), label = 'Theory')
#p3, = pyplot.loglog(np.exp(factor*tick_lgifar[zerolag_lgcevent_rates>0]), np.exp(factor*zerolag_lgcevent_rates[zerolag_lgcevent_rates>0]), label = 'Observation')
p3, = pyplot.loglog(np.exp(factor*tick_lgifar[zerolag_lgcevent_kde>0]), np.exp(factor*zerolag_lgcevent_kde[zerolag_lgcevent_kde>0]), label = options.label)
#pyplot.xlabel('log10(P0)')	
pyplot.xlabel('IFAR(s)')	
pyplot.ylabel('Cumulative #')	
pyplot.legend()
pyplot.savefig(options.output_filename)




