#!/usr/bin/python
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot
import scipy
import numpy
from gstlal import pipeparts
from gstlal import reference_psd
from gstlal import lloidparts
from optparse import OptionParser, Option
from glue import segments
from pylal.datatypes import LIGOTimeGPS
import pygtk
pygtk.require("2.0")
import gobject
gobject.threads_init()
import pygst
pygst.require("0.10")
import gst
import sys
import os

def psd_resolution_changed(elem, pspec, psd):
	# get frequency resolution and number of bins
	delta_f = elem.get_property("delta-f")
	n = int(round(elem.get_property("f-nyquist") / delta_f) + 1)
	# interpolate and install PSD
	print delta_f, n
	psd = reference_psd.interpolate_psd(psd, delta_f)
	elem.set_property("mean-psd", psd.data[:n])

parser = OptionParser(description = __doc__)
parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the start time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the end time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
parser.add_option("--injections", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load injections (optional).")
parser.add_option("--instrument", metavar = "name", help = "Set the name of the instrument to analyze, e.g. \"H1\" (required).")
parser.add_option("--channel-name", metavar = "name", default = "LSC-STRAIN", help = "Set the name of the channel to process (optional).  The default is \"LSC-STRAIN\".")
parser.add_option("--frame-cache", metavar = "name", help = "Set the name of the frame cache (required)")
parser.add_option("--reference-psd", metavar = "name", help = "Set the name of psd xml file to whiten the data with")
parser.add_option("--recolor-psd", metavar = "name", help = "Set the name of psd xml file to recolor the data with")
parser.add_option("--fir", action = "store_true", help = "use an fir filter to color the data")
parser.add_option("--duration", metavar = "s", default = 64, type = "int", help = "Set the duration of the output frame files")
parser.add_option("--sample-rate", metavar= "Hz", default = 4096, type="int", help = "The sample rate of the outputted frames")
parser.add_option("--track-psd", action = "store_true", help = "Calculate PSD from input data and track with time.")
parser.add_option("--shift", metavar = "ns", help = "Number of nanoseconds to delay (negative) or advance (positive) the time stream", type = "int")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

#
# Parse options
#

options, filenames = parser.parse_args()

#
# read psd file
#

wpsd = reference_psd.read_psd(options.reference_psd, verbose = options.verbose)[options.instrument]
rpsd = reference_psd.read_psd(options.recolor_psd, verbose = options.verbose)[options.instrument]

#
# create input segment for the seek
#

seg = segments.segment(LIGOTimeGPS(options.gps_start_time), LIGOTimeGPS(options.gps_end_time))

#
# Setup the pipeline
#

pipeline = gst.Pipeline(sys.argv[0])
mainloop = gobject.MainLoop()
handler = lloidparts.LLOIDHandler(mainloop, pipeline)
seekevent = gst.event_new_seek(1.0, gst.Format(gst.FORMAT_TIME), gst.SEEK_FLAG_FLUSH | gst.SEEK_FLAG_KEY_UNIT, gst.SEEK_TYPE_SET, seg[0].ns(), gst.SEEK_TYPE_SET, seg[1].ns())

#
# construct the pipeline framesrc -> injection element -> whiten -> frame sink
#

head = lloidparts.mkLLOIDbasicsrc(pipeline, seekevent, options.instrument, lloidparts.DetectorData(options.frame_cache, options.channel_name), fake_data = None, online_data = False, injection_filename = options.injections, frame_segments = None, verbose = options.verbose)

head = pipeparts.mkprogressreport(pipeline, head, "frames")

if options.shift is not None:
	head = pipeparts.mkshift(pipeline, head, shift = options.shift)
	head = pipeparts.mkprogressreport(pipeline, head, "frames_shifted")

#FIXME get sample rate some other way
# first whiten and downsample
head = lloidparts.mkLLOIDsrc(pipeline, head, [options.sample_rate], options.instrument, psd = wpsd, seekevent = seekevent, block_duration = gst.SECOND, track_psd = options.track_psd)

# a lie to make the whitener happy
head = pipeparts.mktaginject(pipeline, head[options.sample_rate], "units=strain")

# Recolor
latency = int(1.0 / rpsd.deltaF * options.sample_rate / 2.0)
fir_matrix = numpy.zeros((1, 2 * latency-1), 'd64') 
freq_data = 1.0 / rpsd.data[:latency]**.5 
freq_data[0] = 0.0
fir_matrix[0,:latency] = freq_data
fir_matrix[0,latency:] = freq_data[::-1][1:] 
fir_matrix = numpy.roll(numpy.real(scipy.ifft(fir_matrix)), latency)
fir_matrix *= (2 * latency-1)**.5 # scipy ifft convention norm

# normalization 
fir_matrix *= (rpsd.deltaF**2 * 2)**.5

head = pipeparts.mkfirbank(pipeline, head, latency = latency, fir_matrix = fir_matrix, block_stride = 4096 * 32)

# put the units back to strain before writing to frames
head = pipeparts.mktaginject(pipeline, head, "units=strain")

try:
	outpath = options.instrument+"-"+options.channel_name
	os.mkdir(outpath)
except:
	pass
pipeparts.mkframesink(pipeline, head, path=outpath, sync=False, async=True, frame_type=options.instrument, duration = options.duration)

#
# Run it
#

pipeline.set_state(gst.STATE_PAUSED)
#	raise RuntimeError("pipeline did not enter paused state")

pipeline.set_state(gst.STATE_PLAYING)
#	raise RuntimeError("pipeline did not enter playing state")

mainloop.run()

