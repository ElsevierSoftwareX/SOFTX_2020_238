#define NOUSPASTER3(x,y,z) x ## y ## z
#define PASTER3(x,y,z) x ## _ ## y ## _ ## z
#define EVALUATOR3(x,y,z) PASTER3(x,y,z)
#define NOUSEVALUATOR3(x,y,z) NOUSPASTER3(x,y,z)
#define NAME(fun1,fun2) EVALUATOR3(fun1, TYPE_STRING, fun2)
#define XLALNAME(fun1,fun2) NOUSEVALUATOR3(fun1, XLAL_TYPE_STRING, fun2)

#define PASTER2(x,y) x ## _ ## y
#define EVALUATOR2(x,y)  PASTER2(x,y)
#define MEMBER(structure) EVALUATOR2(structure, TYPE_STRING)


/*
 * Simple peak over window algorithm
 */

int NAME(gstlal,peak_over_window)(struct gstlal_peak_state *state, const TYPE *data, guint64 length)
{
	guint sample, channel;
	TYPE *maxdata = MEMBER(state->values.as);
	guint *maxsample = state->samples;
	double absdata;
	double absdatachannel;
	double thresh = state->thresh * state->thresh;

	
	/* clear the state array */
	gstlal_peak_state_clear(state);
	
	/* Find maxima of the data */
	for(sample = 0; sample < length; sample++) {
		for(channel = 0; channel < state->channels; channel++) {
			absdata = ABSFUNC(*data);
			if(absdata > thresh && absdata > (absdatachannel = ABSFUNC(maxdata[channel]))) {
				/* only increment events if the previous value was 0 */
				if (absdatachannel == 0)
					state->num_events += 1;
				maxdata[channel] = *data;
				maxsample[channel] = sample;
			}
		data++;
		}
	}
	
	return 0;
}

/*
 * Simple peak over window algorithm with sub sample interpolation
 */

int NAME(gstlal,peak_over_window_interp)(struct gstlal_peak_state *state, const TYPE *data, guint64 length)
{
	guint channel;
	gint sample;
	gint index;
	
	guint *maxsample = state->samples;
	double tmax;
	double *interpsample = state->interpsamples;
	TYPE *maxdata = MEMBER(state->values.as);
	TYPE *maxdatainterp = MEMBER(state->interpvalues.as);
	XLAL_TYPE_STRING ymax;
	XLAL_TYPE_STRING interp_array[GSTLAL_PEAK_INTERP_LENGTH*2+1];
	
	/* clear the state array */
	gstlal_peak_state_clear(state);
	
	/* assert that this peak structure has a padding so that we can reliably interpolate at the edges */
	g_assert(state->pad >= GSTLAL_PEAK_INTERP_LENGTH); /* one-side length of interp filter */

	/* call the normal peak over window function */
	NAME(gstlal,peak_over_window)(state, data, length);
	for (channel = 0; channel < state->channels; channel++) {
		if (maxdata[channel]) {
			for (sample = -GSTLAL_PEAK_INTERP_LENGTH; sample <= GSTLAL_PEAK_INTERP_LENGTH; sample++) {
				index = ((gint) maxsample[channel] + sample) * state->channels + channel;
				interp_array[sample+GSTLAL_PEAK_INTERP_LENGTH] = *(data + index);
				}
			/* Handle the case where interpolation fails by filling the values with the noninterpolated values */
			if (XLALNAME(XLAL,ApplyLanczosTriggerInterpolant)(state->interp, &tmax, &ymax, &interp_array[GSTLAL_PEAK_INTERP_LENGTH]) != 0) {
				interpsample[channel] = maxsample[channel];
				maxdatainterp[channel] = maxdata[channel];
				}
			else {
				interpsample[channel] = tmax + maxsample[channel];
				maxdatainterp[channel] = ymax;
				} 
			}
		}
	return 0;
}

/*
 * simple function to fill a buffer with the max values
 */

int NAME(gstlal,fill_output_with_peak)(struct gstlal_peak_state *state, TYPE *data, guint64 length)
{
	guint channel, index;
	TYPE *maxdata = MEMBER(state->values.as);
	guint *maxsample = state->samples;
	
	/* clear the output data */
	memset(data, 0.0, length * sizeof(TYPE));

	/* Decide if there are any events to keep */
	for(channel = 0; channel < state->channels; channel++) {
		if ( maxdata[channel] ) {
			index = maxsample[channel] * state->channels + channel;
			data[index] = maxdata[channel];
		}
	}
	return 0;
}

/*
 * Function to return the series around a peak
 * Assumes that you can index the data being given, if not expect a segfault or
 * worse.  Data pointer must exist be valid outputmat->size2 / 2 samples in
 * past and future of the time over which the peak was computed
 */

int NAME(gstlal,series_around_peak)(struct gstlal_peak_state *state, TYPE *data, TYPE *outputmat, guint n)
{
	guint channel, sample;
	gint index;
	guint *maxsample = state->samples;
	TYPE *maxdata = MEMBER(state->values.as);
	TYPE *peakdata = NULL;
	memset(outputmat, 0, sizeof(TYPE) * state->channels * (2 * n + 1));

	for (channel = 0; channel < state->channels; channel++) {
		if (maxdata[channel]) {
			index = (maxsample[channel] - n) * state->channels + channel;
			for (sample = 0, peakdata = data+index; sample < (2*n + 1); sample++, peakdata += state->channels)
				outputmat[sample * state->channels + channel] = *peakdata;
			}
		}

	return 0;
}

int NAME(gstlal,apply_threshold_to_peak)(struct gstlal_peak_state *state, double thresh)
{
	guint channel;
	TYPE *maxdata = MEMBER(state->values.as);
	TYPE *interpmaxdata = MEMBER(state->interpvalues.as);
	state->num_events = 0;
	/* Decide if there are any events to keep */
	for(channel = 0; channel < state->channels; channel++) {
		if ( ABSFUNC(maxdata[channel]) <= thresh ) {
			maxdata[channel] = 0;
			interpmaxdata[channel] = 0;
			state->samples[channel] = 0;
			state->interpsamples[channel] = 0;
		}
		else state->num_events += 1;
	}
	return 0;
}

#undef PASTER3
#undef EVALUATOR3
#undef NAME
#undef NOUSPASTER3
#undef NOUSEVALUATOR3
#undef XLALNAME
#undef PASTER2
#undef EVALUATOR2
#undef MEMBER
