#!/usr/bin/env python
#
# Copyright (C) 2018 Chad Hanna
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys
import numpy
import numpy.random
import lal
import lal.series
import argparse
from glue.ligolw import utils as ligolw_utils
from gstlal.stats import inspiral_extrinsics

parser = argparse.ArgumentParser(description='Generate PDFs of extrinsic parameters')
parser.add_argument('--horizons', action = "append", help='add horizon distances in the form of e.g, H1=200.0')
parser.add_argument('--min-instruments', type=int, default = 1, help = 'min instruments to consider')
parser.add_argument('--snr-thresh', type=float, default = 4.0, help = 'set the snr minimum to define found')
parser.add_argument('--num-samples', type=int, default = 1000000, help = 'set the number of samples to compute')
parser.add_argument('--num-samples-random-time-phase', type=int, default = 10000, help = 'set the number of samples to compute')
parser.add_argument('--psd-file', help = 'set the PSD file')
parser.add_argument('--output-file', default = 'extparams.h5', help = 'set the output hdf5 file. Default extparams.h5')
args = parser.parse_args()

horizons = dict((x, float(y)) for (x,y) in [h.split("=") for h in args.horizons])


psd = lal.series.read_psd_xmldoc(ligolw_utils.load_filename(args.psd_file, verbose = True, contenthandler = lal.series.PSDContentHandler))["H1"]

RS = inspiral_extrinsics.RandomSource(psd, horizons)

DB = {}
IE = inspiral_extrinsics.InspiralExtrinsicParameters(horizons, args.snr_thresh, args.min_instruments) 

for hist in IE.histograms.values():
	print hist

i = 0
last = dict((k,0) for k in IE.histograms)
num = dict((k,0.) for k in IE.histograms)
while i < args.num_samples:
	time, phase, snr, dist, prob = RS()
	detected_ifos = tuple(sorted([ifo for ifo in snr if snr[ifo] >= args.snr_thresh]))
	# make sure at least one detector found it
	if len(detected_ifos) >= args.min_instruments:
		i += 1
	else:
		continue
	num[detected_ifos]+=1.
	missed_ifos = tuple(sorted([ifo for ifo in snr if snr[ifo] < args.snr_thresh]))
	for ifo in missed_ifos:
		del time[ifo]
		del phase[ifo]
		del snr[ifo]
	IE.insert(time, phase, snr, prob)
	if not(i % 10000):
		print >> sys.stderr, "\nSIMULATION %d \n " % i
		print "%20s | %20s | %20s | %20s" % ("IFO combos", "number of cells", "number of points", "fraction change")
		print "".join(["="] * 88)
		for combo in IE.histograms:
			print "%20s | %20s | %20s | %20s" %  (str(combo), IE.histograms[combo].num_cells, IE.histograms[combo].num_points, (IE.histograms[combo].num_cells - last[combo]) / num[combo])
			last[combo] = IE.histograms[combo].num_cells
			num[combo] = 0.

IE.to_hdf5(args.output_file)

