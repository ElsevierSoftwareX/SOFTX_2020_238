#!/usr/bin/env python3
#
# Copyright (C) 2020  Patrick Godwin (patrick.godwin@ligo.org)
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import argparse

from gstlal.config.inspiral import Config
from gstlal.dags.inspiral import DAG
from gstlal.datafind import DataCache, DataType


parser = argparse.ArgumentParser()
parser.add_argument("-c", "--config", help="Sets the path to read configuration from.")
parser.add_argument("-w", "--workflow", default="full", help="Sets the type of workflow to run.")
parser.add_argument("--svd-manifest", help="Load SVD manifest from this path.")

# load config
args = parser.parse_args()
config = Config.load(args.config)
#config.load_svd_manifest(args.svd_manifest)
config.load_svd_manifest(config.svd.manifest)

# create dag
dag = DAG(config)
dag.create_log_dir()

# generate dag layers
if args.workflow in set(("full", "filter")):
	# generate filter dag layers
	ref_psd = dag.reference_psd()
	median_psd = dag.median_psd(ref_psd)
	svd_bank = dag.svd_bank(median_psd)
	triggers, dist_stats = dag.filter(ref_psd, svd_bank)
	triggers, dist_stats = dag.aggregate(triggers, dist_stats)
else:
	# load filter data products
	triggers = DataCache.find(DataType.TRIGGERS, root=config.rootdir)
	svd_bank = DataCache.find(DataType.SVD_BANK, root=config.rootdir)
	dist_stats = DataCache.find(DataType.DIST_STATS, root=config.rootdir)
	median_psd = DataCache.find(DataType.MEDIAN_PSD, root=config.rootdir)

if args.workflow in set(("full", "rerank")):
	# generate rerank dag layers
	prior = dag.prior(svd_bank, median_psd, dist_stats)
	dist_stats = dag.marginalize(prior, dist_stats)
	pdfs = dag.calc_pdf(dist_stats)
	pdfs = dag.marginalize_pdf(pdfs)
	triggers = dag.calc_likelihood(triggers, dist_stats)
	triggers = dag.cluster(triggers)
	triggers = dag.compute_far(triggers, pdfs)

# write dag/script to disk
dag_name = f"{args.workflow}_inspiral_dag"
dag.write_dag(f"{dag_name}.dag")
dag.write_script(f"{dag_name}.sh")
