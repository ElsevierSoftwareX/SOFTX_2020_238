#!/usr/bin/env python
#
# Copyright (C) 2017,2018  Heather Fong and Chad Hanna
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import h5py
import argparse
import numpy
from ligo.lw import ligolw
from ligo.lw import lsctables, param as ligolw_param, array as ligolw_array
from ligo.lw import utils as ligolw_utils
from ligo.lw.utils import process as ligolw_process
import lal.series
from lal import rate
from gstlal import reference_psd

@ligolw_array.use_in
@ligolw_param.use_in
@lsctables.use_in
class LIGOLWContentHandler(ligolw.LIGOLWContentHandler):
	pass

def chirpmass(m1, m2):
	return (m1 * m2)**.6 / (m1 + m2)**.2

def schechter_norm(lower, upper, maxM, alpha):
	norm_masses = numpy.linspace(lower, upper, 10000)
	return numpy.sum(schechter(norm_masses, maxM, alpha)) * (norm_masses[1] - norm_masses[0])

def schechter(mass, maxM, alpha):
	return (mass / maxM)**alpha * numpy.exp(-mass / maxM) / maxM

parser = argparse.ArgumentParser(description = "Create analytic mass models for prior weighting of templates")
parser.add_argument("--template-bank", metavar='name', type=str, help='The input template bank file name.', required = True)
parser.add_argument("--reference-psd", metavar='filename', help = "Load the spectrum from this LIGO light-weight XML file")
parser.add_argument("--output", metavar='name', type=str, help='The output file name', default = "inspiral_mass_model.h5")
parser.add_argument("--model", metavar='name', type=str, help='Mass model. Options are: ligo, narrow-bns, ligo-bns, bbh, uniform-template. If you want another one, submit a patch.')
parser.add_argument("--verbose", help='Be verbose', action="store_true")
options = parser.parse_args()

# Read the template bank file
xmldoc = ligolw_utils.load_filename(options.template_bank, verbose = options.verbose, contenthandler = LIGOLWContentHandler)
sngl_inspiral_table = lsctables.SnglInspiralTable.get_table(xmldoc)
if options.model in ("uniform-template"):
	psd = lal.series.read_psd_xmldoc(ligolw_utils.load_filename(options.reference_psd, verbose = True, contenthandler = lal.series.PSDContentHandler))

mchirps_of_tmps = chirpmass(sngl_inspiral_table.getColumnByName("mass1").asarray(), sngl_inspiral_table.getColumnByName("mass2").asarray())

num_templates = len(mchirps_of_tmps)
num_bins = max(10, num_templates / 10000)
massBA = rate.BinnedDensity(rate.NDBins((rate.LogarithmicBins(min(mchirps_of_tmps)-1e-6, max(mchirps_of_tmps)+1e-6, num_bins),)))
for m in mchirps_of_tmps:
      massBA.count[(m,)] += 1
# Does weird stuff at edges :(
#TEMPDENS = rate.InterpBinnedArray(massBA)
TEMPDENS = lambda x: massBA[x,]

# Assign the proper mass probabilities
prob = {}
mchirps = {}

ligo_min = 3
ligo_max = 60
ligo_peak = 60
ligo_alpha = -1.5
ligonorm = schechter_norm(ligo_min, ligo_max, ligo_peak, ligo_alpha)

bbh_min = 3
bbh_max = 100
bbh_peak = 100
bbh_alpha = -1.5
bbhnorm = schechter_norm(bbh_min, bbh_max, bbh_peak, bbh_alpha)

for row in sngl_inspiral_table:
	assert row.template_id not in prob

	mchirp = chirpmass(row.mass1, row.mass2)
	mchirps[row.template_id] = mchirp

	if options.model == "narrow-bns":
		# comes from component mass mean 1.33, std 0.09, and redshift 0.02
		sigma = 0.055
		mean = 1.18
		prob[row.template_id] = 1. / (2 * numpy.pi * sigma**2)**.5 * numpy.exp(-(mchirp - mean)**2 / 2. / sigma**2)
		# Divide out the template density
		prob[row.template_id] /= TEMPDENS(mchirp)

	elif options.model == "ligo-bns":
		sigma = 0.25
		mean = 1.33
		prob[row.template_id] = 1. / (2 * numpy.pi * sigma**2)**.5 * numpy.exp(-(mchirp - mean)**2 / 2. / sigma**2)
		# Divide out the template density
		prob[row.template_id] /= TEMPDENS(mchirp)

	elif options.model == "uniform-template":
		hdist = reference_psd.HorizonDistance(15, 1024, 1./4., row.mass1, row.mass2, (0., 0., row.spin1z), (0., 0., row.spin2z))(psd["H1"])[0]
		prob[row.template_id] = 1.0 / hdist**3

	elif options.model == "bbh":
		#
		# BBH portion
		#

		# From: https://www.lsc-group.phys.uwm.edu/ligovirgo/cbcnote/RatesAndSignificance/O1O2CatalogRates
		prob[row.template_id] = schechter(mchirp, bbh_peak, bbh_alpha) / bbhnorm 
		# Divide out the template density
		prob[row.template_id] /= TEMPDENS(mchirp)

	elif options.model == "ligo":

		#
		# BNS portion
		#

		# assume a 0.25 solar mass std deviation, this should capture both population distribution and snr effects
		# motivated by LIGO detections
		sigma = 0.25
		mean = 1.33
		bnsprob = 1. / (2 * numpy.pi * sigma**2)**.5 * numpy.exp(-(mchirp - mean)**2 / 2. / sigma**2)

		#
		# BBH portion
		#

		bbhprob = schechter(mchirp, ligo_peak, ligo_alpha) / ligonorm

		#
		# Combined
		#

		# make intrinsic BNS rate 7 times higher (it is actually probably 20 times higher)
		bns_rate = 7.
		bbh_rate = 1.
		prob[row.template_id] = (bns_rate * bnsprob + bbh_rate * bbhprob) / (bns_rate + bbh_rate)
		# Divide out the template density
		prob[row.template_id] /= TEMPDENS(mchirp)
	else:
		raise ValueError("Invalid mass model")


ids = sorted(prob.keys())
norm = numpy.sum(prob.values())
chirpmasses = numpy.array([mchirps[tid] for tid in ids])
coefficients = numpy.zeros((1, 1, len(ids)+1), dtype=float)
for idx, tid in enumerate(ids):
	coefficients[0,0,idx] = numpy.log(prob[tid]) - numpy.log(norm)

#import matplotlib
#matplotlib.use('agg')
#from matplotlib import pyplot
#print len(chirpmasses), coefficients.shape
#pyplot.semilogx(chirpmasses, coefficients[0,0,:-1], "*")
#pyplot.grid()
#pyplot.ylim([-20, 0])
#pyplot.savefig("blah.png")

# Write it out
f = h5py.File(options.output, "w")
# put in a dummy interval for the piecewise polynomials in SNR
f.create_dataset("SNR", data = numpy.array([0., 100.]))
f.create_dataset("coefficients", data = coefficients, compression="gzip")
f.create_dataset("event_id", data = numpy.array(ids).astype(int))
f.close()
