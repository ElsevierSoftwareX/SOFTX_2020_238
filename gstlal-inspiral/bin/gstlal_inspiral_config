#!/usr/bin/env python3

import argparse
import json
import yaml

parser = argparse.ArgumentParser()
parser.add_argument("yaml")
parser.add_argument("entry")
args = parser.parse_args()

with open(args.yaml) as f:
	config_yaml = yaml.load(f.read())

class gYAML(object):
	def __init__(self, cyaml):
		self.cyaml = cyaml
		self._svdstats = None

	def __call__(self, arg):
		try:
			d = self.cyaml
			for s in arg.split("."):
				d = d[s]
			return d
		except KeyError:
			return self.__override(arg)

	@property
	def svdstats(self):
		if self._svdstats is None:
			with open(self("svd.stats-file")) as f:
				self._svdstats = json.loads(f.read())
		return self._svdstats

	def __override(self, arg):
		"""
		This function provides composite values that are
		derived from the config according to various 
		conventions
		"""

		if "inspiral.ht-gate-threshold." in arg:
			sbin = arg.split(".")[-1]
			mc = float(self.svdstats[sbin]["median_mchirp"])
			(x1,y1),(x2,y2) = [[float (y) for y in x.split(":")] for x in self("inspiral.ht-gate-threshold-linear").split("-")]
			return (y2-y1) / (x2-x1) * (mc - x1) + y1

		# inspiral.svdfilestr.<ifostr>.<dir>.<basename>
		# e.g., inspiral.svdfilestr.H1L1.svd.0000_GSTLAL_INSPIRAL_SVD_BANK-1186264106-35659.xml.gz
		if "inspiral.svdfilestr." in arg:
			basename = ".".join(arg.split('.')[4:])
			svddir = arg.split(".")[3]
			ifostr = arg.split('.')[2]
			ifos = [ifostr[2*n:2*n+2] for n in range(len(ifostr) // 2)]
			return ",".join(["%s:%s/%s-%s" % (x,svddir,x,basename) for x in ifos])

		if "svd.autocorrelation-length." in arg:
			ac1,mct,ac2 = self("svd.auto-chisq-len-range").split(":")
			sbin = arg.split(".")[-1]
			mc = float(self.svdstats[sbin]["median_mchirp"])
			return ac1 if mc < float(mct) else ac2

		if "svd.number-of-svd-bins" in arg:
			return len(self.svdstats)

		if "svd.bins" in arg:
			return " ".join(self.svdstats.keys())

		if "svd.dtdphi" in arg:
			return os.path.join(gstlal_config_paths["pkgdatadir"], "inspiral_dtdphi_pdf.h5")

		if "init.num-segs-per-job" in arg:
			return int(self("inspiral.num-cores")) * int(self("inspiral.insp-procs-override-factor")) // int(self("svd.number-of-svd-bins")) + 1

		if "init.duration" in arg:
			return int(self("init.stop")) - int(self("init.start"))

		if "stage.data-find-server-str" in arg:
			data_find_server = self("stage.data-find-server").strip()
			return "" if len(data_find_server) == 0 else "--server %s" % data_find_server

		if "stage.channel-opts." in arg:
			ifostr = arg.split(".")[-1]
			ifos = [ifostr[2*n:2*n+2] for n in range(len(ifostr) // 2)]
			return " ".join(["--channel-name=%s=%s" % (x, self("stage.%s-channel-name" % x[0])) for x in ifos])

		if arg == "stage.singularity-opt" or arg == "inspiral.singularity-opt":
			stage = arg.split(".")[0]
			image = self("{}.singularity-image".format(stage))
			return "--singularity-image {}".format(image) if image else ""

		if arg == "stage.condor-opt" or arg == "inspiral.condor-opt":
			stage = arg.split(".")[0]
			condor_opts = self("{}.condor".format(stage))
			return " ".join(["--{} {}".format(k, v) for k, v in condor_opts.items()]) if condor_opts else ""

		# default is an empty string which means not found
		return ""

gy = gYAML(config_yaml)
print(gy(args.entry))

