#!/usr/bin/python

import argparse
import json
import yaml

parser = argparse.ArgumentParser()
parser.add_argument("yaml")
parser.add_argument("entry")
args = parser.parse_args()

with open(args.yaml) as f:
	config_yaml = yaml.load(f.read())

class gYAML(object):
	def __init__(self, cyaml):
		self.cyaml = cyaml
		self._svdstats = None

	def __call__(self, arg):
		try:
			d = self.cyaml
			for s in arg.split("."):
				d = d[s]
			return d
		except KeyError:
			return self.__override(arg)

	@property
	def svdstats(self):
		if self._svdstats is None:
			with open(self("svd.stats-file")) as f:
				self._svdstats = json.loads(f.read())
		return self._svdstats

	def __override(self, arg):
		if "inspiral.ht-gate-threshold." in arg:
			sbin = arg.split(".")[-1]
			mc = float(self.svdstats[sbin]["median_mchirp"])
			(x1,y1),(x2,y2) = [[float (y) for y in x.split(":")] for x in self("inspiral.ht-gate-threshold-linear").split("-")]
			return (y2-y1) / (x2-x1) * (mc - x1) + y1
		if "svd.number-of-svd-bins" in arg:
			return len(self.svdstats)
		if "init.num-segs-per-job" in arg:
			return int(self("init.num-cores")) * int(self("init.insp-procs-override-factor")) // int(self("svd.number-of-svd-bins")) + 1
		# default is an empty string which means not found
		return ""			

gy = gYAML(config_yaml)
print(gy(args.entry))

