#SHELL := /bin/bash
#
# Before running, replace albert.einstein with your ligo.org credentials and
# run: make env.sh, then source the resulting environment file and run: make
#
# example command:
# time make logs/gstlal.txt -f Makefile.ligosoftware_icc_deb8_gstreamer-1.0 1> make.out 2> make.err

# albert.einstein for git checkout
USER=albert.einstein

# Set directories and paths
SRC_DIR:=${PWD}/src
TAR_DIR:=tarball
LOGS_DIR:=logs
PATCH_DIR:=${PWD}/patches
GSTLAL_REPO:=${PWD}/git/gstlal
LALSUITE_REPO:=${PWD}/git/lalsuite
INSTALL_DIR:=${LAL_PATH}

# Set to build from git (0 = repo, 1 = git)
LALSUITE_GIT=0
GSTLAL_GIT=0

# Set package release versions
GSTLALINSPIRAL=gstlal-inspiral-0.8.0
GSTLALCALIBRATION=gstlal-calibration-0.5.7
GSTLALUGLY=gstlal-ugly-0.9.2
GSTLAL=gstlal-0.10.4
DOXYGEN=doxygen-1.8.9.1
LALSUITEEXTRA=lalsuite-extra-1.1.0
PYLAL=pylal-0.9.0
GLUE=glue-1.49.1
LALAPPS=lalapps-6.17.2
LALSTOCHASTIC=lalstochastic-1.1.16
LALINFERENCE=lalinference-1.5.2
LALPULSAR=lalpulsar-1.12.0
LALINSPIRAL=lalinspiral-1.7.3
LALDETCHAR=laldetchar-0.3.1
LALBURST=lalburst-1.4.0
LALSIMULATION=lalsimulation-1.4.1
LALMETAIO=lalmetaio-1.2.6
LALFRAME=lalframe-1.3.0
LAL=lal-6.15.2
GDS=gds-2.17.3
LDASTOOLS=ldas-tools-2.4.2
SWIG=swig-2.0.11
METAIO=metaio-8.4.0
LIBFRAME=libframe-8.21
OPROFILE=oprofile-0.9.9
GSTPYTHON=gst-python-0.10.22
GSTPLUGINSGOOD=gst-plugins-good-0.10.31
GSTPLUGINSBASE=gst-plugins-base-0.10.36
GSTREAMER=gstreamer-0.10.36
GSL=gsl-1.16
ORC=orc-0.4.18
FFTW=fftw-3.3.4

# Specify target/dependancy files
GSTINSPIRAL_TARGET=$(INSTALL_DIR)/lib/libgstlalinspiral.so
GSTLALCALIB_TARGET=$(INSTALL_DIR)/bin/gstlal_compute_strain
GSTLALUGLY_TARGET=$(INSTALL_DIR)/lib/gstreamer-0.10/libgstnds.so
GSTLAL_TARGET=$(INSTALL_DIR)/lib/libgstlal.so
DOXYGEN_TARGET=$(INSTALL_DIR)/bin/doxygen
LALEXTRA_TARGET=$(INSTALL_DIR)/share/lalsimulation/SEOBNRv2ROM_SS_Phase_ciall.dat
PYLAL_TARGET=$(INSTALL_DIR)/etc/pylal-user-env.sh
GLUE_TARGET=$(INSTALL_DIR)/bin/dmtdq_seg_insert
LALAPPS_TARGET=$(INSTALL_DIR)/bin/lalapps_psinject
LALSTOCH_TARGET=$(INSTALL_DIR)/lib/liblalstochastic.so
LALINFER_TARGET=$(INSTALL_DIR)/lib/liblalinference.so
LALPULSAR_TARGET=$(INSTALL_DIR)/lib/liblalpulsar.so
LALINSPIRAL_TARGET=$(INSTALL_DIR)/lib/liblalinspiral.so
LALDETCHAR_TARGET=$(INSTALL_DIR)/lib/liblaldetchar.so
LALBURST_TARGET=$(INSTALL_DIR)/lib/liblalburst.so
LALSIM_TARGET=$(INSTALL_DIR)/lib/liblalsimulation.so
LALMETAIO_TARGET=$(INSTALL_DIR)/lib/liblalmetaio.so
LALFRAME_TARGET=$(INSTALL_DIR)/lib/liblalframe.so
LAL_TARGET=$(INSTALL_DIR)/lib/liblal.so
GDS_TARGET=$(INSTALL_DIR)/lib/libwpipe.so
LDASTOOLS_TARGET=$(INSTALL_DIR)/lib/libframecpp.so
SWIG_TARGET=$(INSTALL_DIR)/bin/swig
METAIO_TARGET=$(INSTALL_DIR)/lib/libmetaio.so
LIBFRAME_TARGET=$(INSTALL_DIR)/lib/libFrame.so
OPROFILE_TARGET=$(INSTALL_DIR)/lib/oprofile/libopagent.so
GSTPYTHON_TARGET=$(INSTALL_DIR)/lib/gstreamer-0.10/libgstpython.so
GSTGOOD_TARGET=$(INSTALL_DIR)/lib/gstreamer-0.10/libgstpng.so
GSTBASE_TARGET=$(INSTALL_DIR)/lib/libgstapp-0.10.so
GSTREAMER_TARGET=$(INSTALL_DIR)/lib/libgstreamer-0.10.so
GSL_2_TARGET=$(INSTALL_DIR)/lib/pkgconfig/gsl.pc.orig
GSL_1_TARGET=$(INSTALL_DIR)/lib/libgsl.so
ORC_TARGET=$(INSTALL_DIR)/lib/liborc-0.4.so
FFTW_TARGET=$(INSTALL_DIR)/lib/libfftw3.so
# tarballs
GSTLALINSPIRAL_TAR_TARGET=$(TAR_DIR)/$(GSTLALINSPIRAL).tar.gz
GSTLALCALIB_TAR_TARGET=$(TAR_DIR)/$(GSTLALCALIBRATION).tar.gz
GSTLALUGLY_TAR_TARGET=$(TAR_DIR)/$(GSTLALUGLY).tar.gz
GSTLAL_TAR_TARGET=$(TAR_DIR)/$(GSTLAL).tar.gz
DOXYGEN_TAR_TARGET=$(TAR_DIR)/$(DOXYGEN).src.tar.gz
LALEXTRA_TAR_TARGET=$(TAR_DIR)/$(LALSUITEEXTRA).tar.gz
PYLAL_TAR_TARGET=$(TAR_DIR)/$(PYLAL).tar.gz
GLUE_TAR_TARGET=$(TAR_DIR)/$(GLUE).tar.gz
LALAPPS_TAR_TARGET=$(TAR_DIR)/$(LALAPPS).tar.gz
LALSTOCH_TAR_TARGET=$(TAR_DIR)/$(LALSTOCHASTIC).tar.gz
LALINFER_TAR_TARGET=$(TAR_DIR)/$(LALINFERENCE).tar.gz
LALPULSAR_TAR_TARGET=$(TAR_DIR)/$(LALPULSAR).tar.gz
LALINSPIRAL_TAR_TARGET=$(TAR_DIR)/$(LALINSPIRAL).tar.gz
LALDETCHAR_TAR_TARGET=$(TAR_DIR)/$(LALDETCHAR).tar.gz
LALBURST_TAR_TARGET=$(TAR_DIR)/$(LALBURST).tar.gz
LALSIM_TAR_TARGET=$(TAR_DIR)/$(LALSIMULATION).tar.gz
LALMETAIO_TAR_TARGET=$(TAR_DIR)/$(LALMETAIO).tar.gz
LALFRAME_TAR_TARGET=$(TAR_DIR)/$(LALFRAME).tar.gz
LAL_TAR_TARGET=$(TAR_DIR)/$(LAL).tar.rz
GDS_TAR_TARGET=$(TAR_DIR)/$(GDS).tar.gz
LDASTOOLS_TAR_TARGET=$(TAR_DIR)/$(LDASTOOLS).tar.gz
SWIG_TAR_TARGET=$(TAR_DIR)/$(SWIG).tar.gz
METAIO_TAR_TARGET=$(TAR_DIR)/$(METAIO).tar.gz
LIBFRAME_TAR_TARGET=$(TAR_DIR)/$(LIBFRAME).tar.gz
OPROFILE_TAR_TARGET=$(TAR_DIR)/$(OPROFILE).tar.gz
GSTPYTHON_TAR_TARGET=$(TAR_DIR)/$(GSTPYTHON).tar.gz
GSTGOOD_TAR_TARGET=$(TAR_DIR)/$(GSTPLUGINSGOOD).tar.gz
GSTBASE_TAR_TARGET=$(TAR_DIR)/$(GSTPLUGINSBASE).tar.gz
GSTREAMER_TAR_TARGET=$(TAR_DIR)/$(GSTREAMER).tar.gz
GSL_TAR_TARGET=$(TAR_DIR)/$(GSL).tar.gz
ORC_TAR_TARGET=$(TAR_DIR)/$(ORC).tar.gz
FFTW_TAR_TARGET=$(TAR_DIR)/$(FFTW).tar.gz
# git repos
GSTLAL_GIT_TARGET=$(GSTLAL_REPO)/TODO.md
LALSUITE_GIT_TARGET=$(LALSUITE_REPO)/lal/README

# Specify how many processors to run on
CORES:=$(shell echo `nproc --all`"-2" | bc -l)

# Determine cluster
CLUSTER:=$(shell hostname -d)

ICC_CIT:=/opt/intel/2017u4/bin/compilervars.sh
ICC_UWM:=/opt/intel/2017u4/bin/compilervars.sh
ICC_ATLAS:=/opt/intel/2015/intel.sh

all : $(GSTINSPIRAL_TARGET) $(LOGS_DIR)/gstlal.txt

#####################
# Environment setup #
#####################

env.sh :
	@echo 'unset GST_PLUGIN_PATH PYTHONPATH' > $@
	@echo 'unset LD_LIBRARY_PATH LIBRARY_PATH LD_PRELOAD' >> $@
	@echo 'LAL_PATH=${PWD}/opt' >> $@
	@echo 'export CFLAGS="-O3 -march=native -lfftw3f -lfftw3 -lm -lmkl_core -lmkl_intel_lp64 -lmkl_sequential -lpthread -Wno-write-strings -lirc -limf"' >> $@
	@if [ ${CLUSTER} = "ligo.caltech.edu" ] ; then \
		echo "source ${ICC_CIT} intel64" >> $@ ; \
		echo 'export LDFLAGS="-L${MKLROOT}/lib/intel64"' >> $@ ; \
	elif [ ${CLUSTER} = "nemo.uwm.edu" ] ; then \
		echo "source ${ICC_UWM} intel64" >> $@ ; \
		echo 'export LDFLAGS="-L/opt/intel/composer_xe_2015.5.223/mkl/lib/intel64"' >> $@ ; \
	elif [ ${CLUSTER} = "atlas.local" ] ; then \
		echo "source ${ICC_ATLAS} intel64" >> $@ ; \
		echo 'export LDFLAGS="-L/opt/intel/2015/lib/intel64 -L/opt/intel/2015/mkl/lib/intel64"' >> $@ ; \
	fi
	@echo '#export LD_PRELOAD="${PWD}/opt/lib/libfftw3.so:${PWD}/opt/lib/libfftw3f.so"' >> $@
	@echo 'export CC="icc"' >> $@
	@echo 'export CXX="icpc"' >> $@
	@echo '# These are environment variables that do get exported' >> $@
	@echo 'PATH=$${LAL_PATH}/bin:$${PATH}' >> $@
	@echo 'PKG_CONFIG_PATH=$${LAL_PATH}/lib/pkgconfig:$${LAL_PATH}/lib64/pkgconfig:$${PKG_CONFIG_PATH}' >> $@
	@echo 'PYTHONPATH=$${LAL_PATH}/lib/python2.7/site-packages:$${LAL_PATH}/lib64/python2.7/site-packages' >> $@
	@echo 'GST_PLUGIN_PATH=$${LAL_PATH}/lib/gstreamer-0.10' >> $@
	@echo 'export PATH PKG_CONFIG_PATH PYTHONPATH GST_PLUGIN_PATH LAL_PATH' >> $@

#####################
# Check time stamps #
#####################

check :
	@if [ -f logs/all.txt ] ; then rm logs/all.txt ; fi ;
	@cat logs/* | uniq > logs/all.txt
	@if [ -f logs/gstlal.txt ] ; then ls logs/gstlal.txt >> logs/all.txt ; fi ;
	@ls -ltrh $$(cat logs/all.txt)

###########
# Install #
###########

# gstlal (all)
logs/gstlal.txt : $(LOGS_DIR)/doxygen.txt $(GSTLAL_TARGET) $(GSTLALUGLY_TARGET) $(GSTLALCALIB_TARGET) $(GSTINSPIRAL_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

# gstlal-inspiral
$(GSTINSPIRAL_TARGET) : $(GSTLALCALIB_TARGET)
	echo gstlal-inspiral 1>&2
	if [ "${GSTLAL_GIT}" = "1" ]; then \
		cd $(GSTLAL_REPO)/gstlal-inspiral && echo | ./00init.sh ; \
		cd $(GSTLAL_REPO)/gstlal-inspiral && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(GSTLAL_REPO)/gstlal-inspiral && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xzf $(TAR_DIR)/$(GSTLALINSPIRAL).tar.gz -C $(SRC_DIR) ; \
		cp /home/gstlalcbc/local/src/gstlal/gstlal-inspiral/share/ER9/patches/gzip_test_option.patch $(PATCH_DIR)/ ; \
		patch $(SRC_DIR)/$(GSTLALINSPIRAL)/bin/gstlal_inspiral_pipe < $(PATCH_DIR)/gzip_test_option.patch ; \
		cd $(SRC_DIR)/$(GSTLALINSPIRAL) && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(GSTLALINSPIRAL) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# gstlal-calibration
$(GSTLALCALIB_TARGET) : $(GSTLALUGLY_TARGET)
	echo gstlal-calibration 1>&2
	if [ "${GSTLAL_GIT}" = "1" ]; then \
		cd $(GSTLAL_REPO)/gstlal-calibration && echo | ./00init.sh ; \
		cd $(GSTLAL_REPO)/gstlal-calibration && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(GSTLAL_REPO)/gstlal-calibration && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xzf $(TAR_DIR)/$(GSTLALCALIBRATION).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(GSTLALCALIBRATION) && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(GSTLALCALIBRATION) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# gstlal-ugly
$(GSTLALUGLY_TARGET) : $(GSTLAL_TARGET)
	echo gstlal-ugly 1>&2
	if [ "${GSTLAL_GIT}" = "1" ]; then \
		cd $(GSTLAL_REPO)/gstlal-ugly && echo | ./00init.sh ; \
		cd $(GSTLAL_REPO)/gstlal-ugly && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(GSTLAL_REPO)/gstlal-ugly && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xzf $(TAR_DIR)/$(GSTLALUGLY).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(GSTLALUGLY) && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(GSTLALUGLY) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# gstlal
$(GSTLAL_TARGET) : $(LALEXTRA_TARGET) $(DOXYGEN_TARGET) $(GSTLAL_GIT_TARGET)
	echo gstlal 1>&2
	if [ "${GSTLAL_GIT}" = "1" ]; then \
		cd $(GSTLAL_REPO)/gstlal && echo | ./00init.sh ; \
		cp $(INSTALL_DIR)/share/gir-1.0/Gst-0.10.gir $(GSTLAL_REPO)/gstlal/lib/gstlal/ ; \
		cd $(GSTLAL_REPO)/gstlal && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(GSTLAL_REPO)/gstlal && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xzf $(TAR_DIR)/$(GSTLAL).tar.gz -C $(SRC_DIR) ; \
		cp $(INSTALL_DIR)/share/gir-1.0/Gst-0.10.gir $(SRC_DIR)/$(GSTLAL)/lib/gstlal/ ; \
		cd $(SRC_DIR)/$(GSTLAL) && ./configure --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(GSTLAL) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# doxygen
logs/doxygen.txt : $(LOGS_DIR)/lalsuite-extra.txt $(DOXYGEN_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(DOXYGEN_TARGET) : $(LALEXTRA_TARGET)
	echo $(DOXYGEN) 1>&2
	tar -xf $(TAR_DIR)/$(DOXYGEN).src.tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(DOXYGEN) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(DOXYGEN) && make -j$(CORES) && make install -j$(CORES)

# lalsuite extra
logs/lalsuite-extra.txt : $(LOGS_DIR)/lalsuite.txt $(LALEXTRA_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(LALEXTRA_TARGET) : $(GLUE_TARGET) $(PYLAL_TARGET)
	echo $(LALSUITEEXTRA) 1>&2
	tar -xf $(TAR_DIR)/$(LALSUITEEXTRA).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(LALSUITEEXTRA) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(LALSUITEEXTRA) && make -j$(CORES) && make install -j$(CORES)

# lalsuite
logs/lalsuite.txt : $(LOGS_DIR)/gds.txt $(LAL_TARGET) $(LALFRAME_TARGET) $(LALMETAIO_TARGET) $(LALSIM_TARGET) $(LALBURST_TARGET) $(LALDETCHAR_TARGET) $(LALINSPIRAL_TARGET) $(LALPULSAR_TARGET) $(LALINFER_TARGET) $(LALSTOCH_TARGET) $(LALAPPS_TARGET) $(GLUE_TARGET) $(PYLAL_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

# pylal
$(PYLAL_TARGET) : $(GLUE_TARGET)
	echo $(PYLAL) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		patch $(LALSUITE_REPO)/pylal/pylal/rate.py < $(GSTLAL_REPO)/gstlal-inspiral/share/ER9/patches/ratepy-O1.patch ; \
		CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" cd $(LALSUITE_REPO)/pylal && python setup.py install --prefix=$(INSTALL_DIR) ; \
	else \
		tar -xzf $(TAR_DIR)/$(PYLAL).tar.gz -C $(SRC_DIR) ; \
		patch $(SRC_DIR)/$(PYLAL)/pylal/rate.py < $(GSTLAL_REPO)/gstlal-inspiral/share/ER9/patches/ratepy-O1.patch ; \
		CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" cd $(SRC_DIR)/$(PYLAL) && python setup.py install --prefix=$(INSTALL_DIR) ; \
	fi ;

# glue
$(GLUE_TARGET) : $(LALAPPS_TARGET)
	echo $(GLUE) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/glue && python setup.py install --prefix=$(INSTALL_DIR) ; \
	else \
		tar -xzf $(TAR_DIR)/$(GLUE).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(GLUE) && python setup.py install --prefix=$(INSTALL_DIR) ; \
	fi ;

# lalapps
## FIXME --enable-gcc-flags set to no on lalapps configure as work around to avoid warnings stopping install process
## FIXME: Commenting out the explicit linking to gslcblas
## Not sure what causes the warnings
$(LALAPPS_TARGET) : $(LALSTOCH_TARGET)
	echo $(LALAPPS) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalapps && ./00boot ; \
		cd $(LALSUITE_REPO)/lalapps && ./configure --enable-gcc-flags=no --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalapps && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALAPPS).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALAPPS) && ./configure --enable-gcc-flags=no --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALAPPS) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalstochastic
$(LALSTOCH_TARGET) : $(LALINFER_TARGET)
	echo $(LALSTOCHASTIC) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalstochastic && ./00boot ; \
		cd $(LALSUITE_REPO)/lalstochastic && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalstochastic && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALSTOCHASTIC).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALSTOCHASTIC) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALSTOCHASTIC) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalinference
$(LALINFER_TARGET) : $(LALPULSAR_TARGET)
	echo $(LALINFERENCE) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalinference && ./00boot ; \
		cd $(LALSUITE_REPO)/lalinference && ./configure --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR)  CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" ; \
		cd $(LALSUITE_REPO)/lalinference && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALINFERENCE).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALINFERENCE) && ./configure --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR)  CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" ; \
		cd $(SRC_DIR)/$(LALINFERENCE) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalpulsar
$(LALPULSAR_TARGET) : $(LALINSPIRAL_TARGET)
	echo $(LALPULSAR) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalpulsar && ./00boot ; \
		cd $(LALSUITE_REPO)/lalpulsar && ./configure --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR)  CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" ; \
		cd $(LALSUITE_REPO)/lalpulsar && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALPULSAR).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALPULSAR) && ./configure --enable-swig-python --disable-lalxml --prefix=$(INSTALL_DIR)  CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native" ; \
		cd $(SRC_DIR)/$(LALPULSAR) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalinspiral
$(LALINSPIRAL_TARGET) : $(LALDETCHAR_TARGET)
	echo $(LALINSPIRAL) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalinspiral && ./00boot ; \
		cd $(LALSUITE_REPO)/lalinspiral && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalinspiral && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALINSPIRAL).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALINSPIRAL) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALINSPIRAL) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# laldetchar
$(LALDETCHAR_TARGET) : $(LALBURST_TARGET)
	echo $(LALDETCHAR) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/laldetchar && ./00boot ; \
		cd $(LALSUITE_REPO)/laldetchar && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/laldetchar && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALDETCHAR).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALDETCHAR) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALDETCHAR) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalburst
$(LALBURST_TARGET) : $(LALSIM_TARGET)
	echo $(LALBURST) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalburst && ./00boot ; \
		cd $(LALSUITE_REPO)/lalburst && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalburst && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALBURST).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALBURST) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALBURST) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalsimulation
$(LALSIM_TARGET) : $(LALMETAIO_TARGET)
	echo $(LALSIMULATION) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalsimulation && ./00boot ; \
		cd $(LALSUITE_REPO)/lalsimulation && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalsimulation && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALSIMULATION).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALSIMULATION) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALSIMULATION) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalmetaio
$(LALMETAIO_TARGET) : $(LALFRAME_TARGET)
	echo $(LALMETAIO) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalmetaio && ./00boot ; \
		cd $(LALSUITE_REPO)/lalmetaio && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalmetaio && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALMETAIO).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALMETAIO) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALMETAIO) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lalframe
$(LALFRAME_TARGET) : $(LAL_TARGET)
	echo $(LALFRAME) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lalframe && ./00boot ; \
		cd $(LALSUITE_REPO)/lalframe && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lalframe && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LALFRAME).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LALFRAME) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LALFRAME) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# lal
$(LAL_TARGET) : $(LOGS_DIR)/git.txt $(OPROFILE_TARGET) $(LIBFRAME_TARGET) $(METAIO_TARGET) $(SWIG_TARGET) $(LDASTOOLS_TARGET) $(GDS_TARGET)
	echo $(LAL) 1>&2
	if [ "${LALSUITE_GIT}" = "1" ]; then \
		cd $(LALSUITE_REPO)/lal && ./00boot ; \
		cd $(LALSUITE_REPO)/lal && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(LALSUITE_REPO)/lal && make -j$(CORES) && make install -j$(CORES) ; \
	else \
		tar -xf $(TAR_DIR)/$(LAL).tar.gz -C $(SRC_DIR) ; \
		cd $(SRC_DIR)/$(LAL) && ./configure --enable-swig-python --prefix=$(INSTALL_DIR) ; \
		cd $(SRC_DIR)/$(LAL) && make -j$(CORES) && make install -j$(CORES) ; \
	fi ;

# gds
logs/gds.txt : $(LOGS_DIR)/ldas-tools.txt $(GDS_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(GDS_TARGET) : $(LDASTOOLS_TARGET)
	echo $(GDS) 1>&2
	tar -xzf $(TAR_DIR)/$(GDS).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GDS) && ./configure --enable-online --prefix=$(INSTALL_DIR) CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native -lfftw3_threads -lfftw3f_threads"
	cd $(SRC_DIR)/$(GDS) && make && make install

# ldas-tools
logs/ldas-tools.txt : $(LOGS_DIR)/swig.txt $(LDASTOOLS_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(LDASTOOLS_TARGET) : $(SWIG_TARGET)
	echo $(LDASTOOLS) 1>&2
	tar -xf $(TAR_DIR)/$(LDASTOOLS).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(LDASTOOLS) && ./configure --prefix=$(INSTALL_DIR) --without-doxygen CC="gcc" CXX="g++" CFLAGS="-fPIC -O3 -march=native"
	cd $(SRC_DIR)/$(LDASTOOLS) && make -j$(CORES) && make install -j$(CORES)

# swig
logs/swig.txt : $(LOGS_DIR)/metaio.txt $(SWIG_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(SWIG_TARGET) : $(METAIO_TARGET)
	echo $(SWIG) 1>&2
	tar -xf $(TAR_DIR)/$(SWIG).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(SWIG) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(SWIG) && make -j$(CORES) && make install -j$(CORES)

# metaio
logs/metaio.txt : $(LOGS_DIR)/libframe.txt $(METAIO_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(METAIO_TARGET) : $(LIBFRAME_TARGET)
	echo $(METAIO) 1>&2
	tar -xf $(TAR_DIR)/$(METAIO).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(METAIO) && ./configure --prefix=$(INSTALL_DIR) --with-matlab=no
	cd $(SRC_DIR)/$(METAIO) && make -j$(CORES) && make install -j$(CORES)
	# Needed with-matlab option for intel_haswell test

# libframe
logs/libframe.txt : $(LOGS_DIR)/oprofile.txt $(LIBFRAME_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(LIBFRAME_TARGET) : $(OPROFILE_TARGET)
	echo $(LIBFRAME) 1>&2
	tar -xf $(TAR_DIR)/$(LIBFRAME).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(LIBFRAME) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(LIBFRAME) && make -j$(CORES) && make install -j$(CORES)

# oprofile
logs/oprofile.txt : $(LOGS_DIR)/gstreamer.txt $(OPROFILE_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(OPROFILE_TARGET) : $(GSTPYTHON_TARGET)
	echo $(OPROFILE) 1>&2
	tar -xf $(TAR_DIR)/$(OPROFILE).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(OPROFILE)/ && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(OPROFILE)/ && make -j$(CORES) && make install -j$(CORES)

# gstreamer (all)
logs/gstreamer.txt : $(LOGS_DIR)/gsl.txt $(GSTREAMER_TARGET) $(GSTBASE_TARGET) $(GSTGOOD_TARGET) $(GSTPYTHON_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

# gstreamer plugin python
$(GSTPYTHON_TARGET) : $(GSTGOOD_TARGET)
	echo $(GSTPYTHON) 1>&2
	mkdir -p $(INSTALL_DIR)/lib64/python2.7/site-packages/gi/overrides
	tar -xf $(TAR_DIR)/$(GSTPYTHON).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GSTPYTHON) && ./configure --prefix=$(INSTALL_DIR) --exec-prefix=$(INSTALL_DIR) --with-libpython-dir=/usr/lib --with-pygi-overrides-dir=$(INSTALL_DIR)/lib/python2.7/site-packages/gi/overrides
	cd $(SRC_DIR)/$(GSTPYTHON) && make -j$(CORES) && make install -j$(CORES)

# gstreamer plugin good
$(GSTGOOD_TARGET) : $(GSTBASE_TARGET)
	echo $(GSTPLUGINSGOOD) 1>&2
	tar -xf $(TAR_DIR)/$(GSTPLUGINSGOOD).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GSTPLUGINSGOOD) && ./configure --disable-gst_v4l2 --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(GSTPLUGINSGOOD) && make -j$(CORES) && make install -j$(CORES)

# gstreamer plugin base
$(GSTBASE_TARGET) : $(GSTREAMER_TARGET)
	echo $(GSTPLUGINSBASE) 1>&2
	tar -xf $(TAR_DIR)/$(GSTPLUGINSBASE).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GSTPLUGINSBASE)/gst/audioresample && \
        gsiscp gstlalcbc@pcdev3.phys.uwm.edu:public_html/684cf44ee3c8ccdbcc2f5711f050ba57d9909183_audioresample.patch audioresample.patch && \
        patch < audioresample.patch
	cd $(SRC_DIR)/$(GSTPLUGINSBASE) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(GSTPLUGINSBASE) && make -j$(CORES) && make install -j$(CORES)

# gstreamer
$(GSTREAMER_TARGET) : $(GSL_1_TARGET) $(GSL_2_TARGET)
	echo $(GSTREAMER) 1>&2
	tar -xf $(TAR_DIR)/$(GSTREAMER).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GSTREAMER) && cp $(PATCH_DIR)/gstreamer-bison.patch . && patch -p1 < gstreamer-bison.patch
	cd $(SRC_DIR)/$(GSTREAMER) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(GSTREAMER) && make -j$(CORES) && make install -j$(CORES)

# GSL
logs/gsl.txt : $(LOGS_DIR)/orc.txt $(GSL_1_TARGET) $(GSL_2_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

## FIXME Hack to make gsl default to atlas for blas
$(GSL_2_TARGET) : $(GSL_1_TARGET)
	cp $(INSTALL_DIR)/lib/pkgconfig/gsl.pc $@
	sed 's/-lgslcblas/ -lmkl_intel_ilp64 -lmkl_core -lmkl_sequential -lpthread -lm/' $@ > $(INSTALL_DIR)/lib/pkgconfig/gsl.pc

$(GSL_1_TARGET) : $(ORC_TARGET)
	echo $(GSL) 1>&2
	tar -xf $(TAR_DIR)/$(GSL).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(GSL) && ./configure --prefix=$(INSTALL_DIR) CFLAGS="${CFLAGS}" CC="icc" CXX="icpc" GSL_CBLAS_LIB='-lmkl_intel_ilp64 -lmkl_core -lmkl_sequential'
	cd $(SRC_DIR)/$(GSL) && make -j$(CORES) && make install -j$(CORES)

# ORC
logs/orc.txt : $(LOGS_DIR)/fftw.txt $(ORC_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

$(ORC_TARGET) : $(FFTW_TARGET)
	echo $(ORC) 1>&2
	tar -xf $(TAR_DIR)/$(ORC).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(ORC) && ./configure --prefix=$(INSTALL_DIR)
	cd $(SRC_DIR)/$(ORC) && make -j$(CORES) && make install -j$(CORES)

# fftw
logs/fftw.txt : $(LOGS_DIR)/patch.txt $(FFTW_TARGET)
	echo $^ | sed -e "s@ @\n@g" > $@

# ./configure, make, make install run twice to install single and double precission libs
$(FFTW_TARGET) : $(LOGS_DIR)/patch.txt
	echo $(FFTW) 1>&2
	#ls $(FFTW_TARGET)
	tar -xzf $(TAR_DIR)/$(FFTW).tar.gz -C $(SRC_DIR)
	cd $(SRC_DIR)/$(FFTW) && \
		./configure CFLAGS="${CFLAGS}" --enable-shared --enable-sse --enable-sse2 --enable-avx --enable-float --enable-threads --prefix=$(INSTALL_DIR) && \
		make -j$(CORES) && make install -j$(CORES) && make clean && \
		./configure CFLAGS="${CFLAGS}" --enable-shared --enable-sse2 --enable-avx --enable-threads --prefix=$(INSTALL_DIR) && \
		make -j$(CORES) && make install -j$(CORES)

#########################
# Download the software #
#########################

PATCH_TARGET_1=$(PATCH_DIR)/gstreamer-bison.patch

# patches
logs/patch.txt : $(LOGS_DIR)/tar.txt $(PATCH_TARGET_1)
	@echo $^ | sed -e "s@ @\n@g" > $@

$(PATCH_TARGET_1) : logs/tar.txt
	@wget --no-check-certificate https://versions.ligo.org/cgit/gstlal/plain/gstlal-inspiral/share/profile/patches/gstreamer-bison.patch --directory-prefix=$(PATCH_DIR) -nc

#tarballs
logs/tar.txt : $(LOGS_DIR)/git.txt $(FFTW_TAR_TARGET) $(ORC_TAR_TARGET) $(GSL_TAR_TARGET) $(GSTREAMER_TAR_TARGET) $(GSTBASE_TAR_TARGET) $(GSTGOOD_TAR_TARGET) $(GSTPYTHON_TAR_TARGET) $(OPROFILE_TAR_TARGET) $(LIBFRAME_TAR_TARGET) $(METAIO_TAR_TARGET) $(SWIG_TAR_TARGET) $(LDASTOOLS_TAR_TARGET) $(GDS_TAR_TARGET) $(LAL_TAR_TARGET) $(LALFRAME_TAR_TARGET) $(LALMETAIO_TAR_TARGET) $(LALSIM_TAR_TARGET) $(LALBURST_TAR_TARGET) $(LALDETCHAR_TAR_TARGET) $(LALINSPIRAL_TAR_TARGET) $(LALPULSAR_TAR_TARGET) $(LALINFER_TAR_TARGET) $(LALSTOCH_TAR_TARGET) $(LALAPPS_TAR_TARGET) $(GLUE_TAR_TARGET) $(PYLAL_TAR_TARGET) $(LALEXTRA_TAR_TARGET) $(DOXYGEN_TAR_TARGET) $(GSTLAL_TAR_TARGET) $(GSTLALUGLY_TAR_TARGET) $(GSTLALCALIB_TAR_TARGET) $(GSTLALINSPIRAL_TAR_TARGET)
	@echo $^ | sed -e "s@ @\n@g" > $@

$(GSTLALINSPIRAL_TAR_TARGET) : $(GSTLALCALIB_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GSTLALINSPIRAL).tar.gz --directory-prefix=$(TAR_DIR)  -nc

$(GSTLALCALIB_TAR_TARGET) : $(GSTLALUGLY_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GSTLALCALIBRATION).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTLALUGLY_TAR_TARGET) : $(GSTLAL_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GSTLALUGLY).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTLAL_TAR_TARGET) : $(DOXYGEN_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GSTLAL).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(DOXYGEN_TAR_TARGET) : $(LALEXTRA_TAR_TARGET)
	@wget --no-check-certificate ftp://ftp.stack.nl/pub/users/dimitri/$(DOXYGEN).src.tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALEXTRA_TAR_TARGET) : $(PYLAL_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(LALSUITEEXTRA).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(PYLAL_TAR_TARGET) : $(GLUE_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(PYLAL).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GLUE_TAR_TARGET) : $(LALAPPS_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GLUE).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALAPPS_TAR_TARGET) : $(LALSTOCH_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALAPPS).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALSTOCH_TAR_TARGET) : $(LALINFER_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALSTOCHASTIC).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALINFER_TAR_TARGET) : $(LALPULSAR_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALINFERENCE).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALPULSAR_TAR_TARGET) : $(LALINSPIRAL_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALPULSAR).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALINSPIRAL_TAR_TARGET) : $(LALDETCHAR_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALINSPIRAL).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALDETCHAR_TAR_TARGET) : $(LALBURST_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALDETCHAR).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALBURST_TAR_TARGET) : $(LALSIM_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALBURST).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALSIM_TAR_TARGET) : $(LALMETAIO_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALSIMULATION).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALMETAIO_TAR_TARGET) : $(LALFRAME_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALMETAIO).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LALFRAME_TAR_TARGET) : $(LAL_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LALFRAME).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LAL_TAR_TARGET) : $(GDS_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/lalsuite/$(LAL).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GDS_TAR_TARGET) : $(LDASTOOLS_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(GDS).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LDASTOOLS_TAR_TARGET) : $(SWIG_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(LDASTOOLS).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(SWIG_TAR_TARGET) : $(METAIO_TAR_TARGET)
	@wget --no-check-certificate http://downloads.sourceforge.net/project/swig/swig/$(SWIG)/$(SWIG).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(METAIO_TAR_TARGET) : $(LIBFRAME_TAR_TARGET)
	@wget --no-check-certificate http://software.ligo.org/lscsoft/source/$(METAIO).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(LIBFRAME_TAR_TARGET) : $(OPROFILE_TAR_TARGET)
	@wget --no-check-certificate http://lappweb.in2p3.fr/virgo/FrameL/$(LIBFRAME).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(OPROFILE_TAR_TARGET) : $(GSTPYTHON_TAR_TARGET)
	@wget --no-check-certificate http://prdownloads.sourceforge.net/oprofile/$(OPROFILE).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTPYTHON_TAR_TARGET) : $(GSTGOOD_TAR_TARGET)
	@wget --no-check-certificate http://gstreamer.freedesktop.org/src/gst-python/$(GSTPYTHON).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTGOOD_TAR_TARGET) : $(GSTBASE_TAR_TARGET)
	@wget --no-check-certificate http://gstreamer.freedesktop.org/src/gst-plugins-good/$(GSTPLUGINSGOOD).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTBASE_TAR_TARGET) : $(GSTREAMER_TAR_TARGET)
	@wget --no-check-certificate http://gstreamer.freedesktop.org/src/gst-plugins-base/$(GSTPLUGINSBASE).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSTREAMER_TAR_TARGET) : $(GSL_TAR_TARGET)
	@wget --no-check-certificate http://gstreamer.freedesktop.org/src/gstreamer/$(GSTREAMER).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(GSL_TAR_TARGET) : $(ORC_TAR_TARGET)
	@wget --no-check-certificate http://ftp.gnu.org/gnu/gsl/$(GSL).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(ORC_TAR_TARGET) : $(FFTW_TAR_TARGET)
	@wget --no-check-certificate http://gstreamer.freedesktop.org/src/orc/$(ORC).tar.gz --directory-prefix=$(TAR_DIR) -nc

$(FFTW_TAR_TARGET) : $(GSTLAL_GIT_TARGET)
	@wget --no-check-certificate http://www.fftw.org/$(FFTW).tar.gz --directory-prefix=$(TAR_DIR) -nc

# git repos
logs/git.txt : $(LALSUITE_GIT_TARGET) $(GSTLAL_GIT_TARGET)
	@echo $^ | sed -e "s@ @\n@g" > $@

git-pull :
	@if [ -f $(LALSUITE_TARGET) ] ; then \
		ecp-cookie-init LIGO.ORG https://versions.ligo.org/git $(USER) ; \
		cd $(LALSUITE_REPO) && git clean -dxf && git pull --rebase ; \
	fi ;
	if [ -f $(GSTLAL_TARGET) ] ; then \
		cd $(GSTLAL_REPO) && git clean -dxf && git pull --rebase ; \
	fi ;

$(GSTLAL_GIT_TARGET) : $(LALSUITE_GIT_TARGET)
	@if [ -f $@ ] ; then \
		echo "Gstlal git repo exists" ; \
	else \
		mkdir -p $(GSTLAL_REPO) ; \
		git clone https://versions.ligo.org/git/gstlal.git $(GSTLAL_REPO) ; \
	fi ;

$(LALSUITE_GIT_TARGET) : $(LOGS_DIR)
	@if [ -f $@ ] ; then \
		echo "Lalsuite git repo exists" ; \
	else \
		mkdir -p $(LALSUITE_REPO) ; \
		ecp-cookie-init LIGO.ORG https://versions.ligo.org/git $(USER) ; \
		git clone https://versions.ligo.org/git/lalsuite.git $(LALSUITE_REPO) ; \
	fi ;

$(LOGS_DIR) :
	mkdir -p $(SRC_DIR) $(INSTALL_DIR) $(PATCH_DIR) $(LOGS_DIR) $(TAR_DIR)

############
# Clean up #
############

clean-all :
	rm -rvf $(SRC_DIR) $(INSTALL_DIR) $(PATCH_DIR) $(TAR_DIR) $(LOGS_DIR)
	rm -rvf opt git
	rm -rf *.txt

clean-install :
	rm -rf opt/* logs/* src/*

clean-gstlal :
	rm -rf logs/gstlal.txt $(GSTLAL_TARGET) $(GSTLALUGLY_TARGET) $(GSTLALCALIB_TARGET) $(GSTLALINSPIRAL_TARGET)

clean-doxygen :
	rm -rf logs/doxygen.txt $(DOXYGEN_TARGET)

clean-lalsuite_extra :
	rm -rf logs/lalsuite-extra.txt $(LALEXTRA_TARGET)

clean-lalsuite :
	rm -rf logs/lalsuite.txt $(LAL_TARGET) $(LALFRAME_TARGET) $(LALMETAIO_TARGET) $(LALSIM_TARGET) $(LALBURST_TARGET) $(LALDETCHAR_TARGET) $(LALINSPIRAL_TARGET) $(LALPULSAR_TARGET) $(LALINFER_TARGET) $(LALSTOCH_TARGET) $(LALAPPS_TARGET) $(GLUE_TARGET) $(PYLAL_TARGET)

clean-gds :
	rm -rf logs/gds.txt $(GDS_TARGET)

clean-ldas-tools :
	rm -rf logs/ldas-tools.txt $(LDASTOOLS_TARGET)

clean-swig :
	rm -rf logs/swig.txt $(SWIG_TARGET)

clean-metaio :
	rm -rf logs/metaio.txt $(METAIO_TARGET)

clean-libframe :
	rm -rf logs/libframe.txt $(LIBFRAME_TARGET)

clean-oprofile :
	rm -rf logs/oprofile.txt $(OPROFILE_TARGET)

clean-gstreamer :
	rm -rf logs/gstreamer.txt $(GSTREAMER_TARGET) $(GSTBASE_TARGET) $(GSTGOOD_TARGET) $(GSTPYTHON_TARGET)

clean-gsl :
	rm -rf logs/gsl.txt $(GSL_1_TARGET) $(GSL_2_TARGET)

clean-orc :
	rm -rf logs/orc.txt $(ORC_TARGET)

clean-fftw :
	rm -rf logs/fftw.txt $(FFTW_TARGET)
