#!/usr/bin/env python

import matplotlib
matplotlib.rcParams['font.family'] = 'Times New Roman'
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['legend.fontsize'] = 10
matplotlib.rcParams['mathtext.default'] = 'regular'
font = {'fontname' : 'Times New Roman'}
matplotlib.use('Agg')
from gwpy.timeseries import TimeSeriesDict
from gwpy.timeseries import TimeSeries
import glob
from math import pi
from gwpy.plot import BodePlot
import numpy
from optparse import OptionParser, Option
matplotlib.rcParams.update({'font.size': 14})

parser = OptionParser()

parser.add_option("--ifo", metavar = "name", help = "Name of the IFO")
parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the GPS start time.")
parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the GPS end time.")
parser.add_option("--frame-cache-list", metavar = "list", help = "Comma-separated list of frame cache files")
parser.add_option("--channel-list", metavar = "list", help = "Comma-separated list of channel names for ASD data")
parser.add_option("--ASD-fmin", metavar = "Hz", type = float, default = 10.0, help = "Minimum frequency for horizontal axis of ASD plot (default = 10)")
parser.add_option("--ASD-fmax", metavar = "Hz", type = float, default = 8192.0, help = "Maximum frequency for horizontal axis of ASD plot (default = 8192)")
parser.add_option("--ASD-min", metavar = "Hz", type = float, default = 1e-24, help = "Minimum value for vertical axis of ASD plot (default = 1e-24)")
parser.add_option("--ASD-max", metavar = "Hz", type = float, default = 1e-18, help = "Maximum value for vertical axis of ASD plot (default = 1e-18)")
parser.add_option("--ratio-fmin", metavar = "Hz", type = float, default = 10.0, help = "Minimum frequency for horizontal axis of ASD ratio plot (default = 10)")
parser.add_option("--ratio-fmax", metavar = "Hz", type = float, default = 5000.0, help = "Maximum frequency for horizontal axis of ASD ratio plot (default = 5000)")
parser.add_option("--ratio-min", metavar = "Hz", type = float, default = 0.7, help = "Minimum value for vertical axis of ASD ratio plot (default = 0.7)")
parser.add_option("--ratio-max", metavar = "Hz", type = float, default = 1.3, help = "Maximum value for vertical axis of ASD ratio plot (default = 1.3)")
parser.add_option("--ASD-plot-title", metavar = "name", type = str, default = "", help = "Title of ASD plot, to appear above plot. Default is no title")
parser.add_option("--ratio-plot-title", metavar = "name", type = str, default = "", help = "Title of ASD ratio plot, to appear above plot. Default is no title")
parser.add_option("--ASD-labels", metavar = "list", type = str, default = "", help = "Comma-separated list of labels to go in ASD plot legend (default is to use channel names)")
parser.add_option("--ratio-labels", metavar = "list", type = str, default = "", help = "Comma-separated list of labels to go in ratio plot legend (default is to use channel names)")
parser.add_option("--write-ASD-txt", action="store_true", help = "If set, text files will be written with the ASDs")
parser.add_option("--filename-suffix", metavar = "name", type = str, default = "", help = "Suffix to add to the end of filenames")

options, filenames = parser.parse_args()

ifo = options.ifo
start_time = int(options.gps_start_time)
end_time = int(options.gps_end_time)
frame_cache_list = options.frame_cache_list.split(',')
channel_list = options.channel_list.split(',')
if len(frame_cache_list) != len(channel_list):
	raise ValueError("frame-cache-list and channel-list must be the same length!")
ASD_fmin = float(options.ASD_fmin)
ASD_fmax = float(options.ASD_fmax)
ASD_min = float(options.ASD_min)
ASD_max = float(options.ASD_max)
ratio_fmin = float(options.ratio_fmin)
ratio_fmax = float(options.ratio_fmax)
ratio_min = float(options.ratio_min)
ratio_max = float(options.ratio_max)
ASD_title = options.ASD_plot_title
ratio_title = options.ratio_plot_title
if len(options.ASD_labels):
	ASD_labels = options.ASD_labels.split(',')
	if len(ASD_labels) != len(frame_cache_list):
		raise ValueError("ASD-labels must be the same length as frame-cache-list")
else:
	ASD_labels = []
	for i in range(0, len(channel_list)):
		ASD_labels.append("%s:%s" % (ifo, channel_list[i].replace('_', '\_')))
if len(options.ratio_labels):
	ratio_labels = options.ratio_labels.split(',')
	if len(ratio_labels) != len(frame_cache_list) - 1:
		raise ValueError("ratio-labels must be one less than the length of frame-cache-list")
else:
	ratio_labels = []
	for i in range(1, len(channel_list)):
		ratio_labels.append("%s:%s / %s:%s" % (ifo, channel_list[i].replace('_', '\_'), ifo, channel_list[0].replace('_', '\_')))

filename_suffix = options.filename_suffix

# Grab all data and make ASDs and ASD ratios
ASDs = []
ratios = []
for i in range(0, len(frame_cache_list)):
	ASDs.append(TimeSeries.read(frame_cache_list[i], '%s:%s' % (ifo, channel_list[i]), start = start_time, end = end_time).asd(4, 2, method = 'lal_median'))
	if i > 0:
		ratios.append(ASDs[i] / ASDs[0])

# Save ASDs to text files if requested
if options.write_ASD_txt:
	for i in range(0, len(ASDs)):
		numpy.savetxt("%s_%s_ASD_%d_%d%s.txt" % (ifo, channel_list[i], start_time, end_time, options.filename_suffix), ASDs[i])
		# FIXME: This is a hack to reformat the text file
		asd_tmp = numpy.loadtxt("%s_%s_ASD_%d_%d%s.txt" % (ifo, channel_list[i], start_time, end_time, options.filename_suffix), ASDs[i])
		asd_txt = []
		freq = 0.0
		for i in range(0, len(ASDs[i])):
			asd_txt.append([freq, asd_tmp[i]])
			freq = freq + 0.25
		asd_txt = numpy.array(asd_txt)
		numpy.savetxt("%s_%s_ASD_%d_%d%s.txt" % (ifo, channel_list[i], start_time, end_time, options.filename_suffix), asd_txt)

# Plot ASDs
colors = ['blue', 'limegreen', "royalblue", "deepskyblue", "red", "yellow", "purple", "pink"]
if len(ASD_title):
	plot = ASDs[0].plot(color = colors[0], title = "%s" % ASD_title, linewidth = 0.75, label = ASD_labels[0])
else:
	plot = ASDs[0].plot(color = colors[0], linewidth = 0.75, label = ASD_labels[0])

ax = plot.gca()
for tick in ax.xaxis.get_major_ticks():
	tick.label.set_fontsize(14)
for tick in ax.yaxis.get_major_ticks():
	tick.label.set_fontsize(14)
ax.set_ylabel(r'Strain [Hz $^{-1/2}$]', fontsize = 14)
ax.set_xlabel('Frequency [Hz]', fontsize = 14)
ax.grid(True, which = "both", linestyle = '--', dashes = (3, 9), linewidth = 0.2, color = 'black')
leg = ax.legend(fancybox = True, fontsize = 10)
leg.get_frame().set_alpha(0.8)
ax.set_xlim(ASD_fmin, ASD_fmax)
ax.set_ylim(ASD_min, ASD_max)

for i in range(1, len(ASDs)):
	ax = plot.gca()
	ax.plot(ASDs[i], colors[i % 7], linewidth = 0.75, label = ASD_labels[i])
	leg = ax.legend(fancybox = True, fontsize = 10)
	leg.get_frame().set_alpha(0.8)

plot.save('%s_%s_%s_spectrum_comparison%s.png' % (ifo, start_time, end_time, options.filename_suffix))
plot.save('%s_%s_%s_spectrum_comparison%s.pdf' % (ifo, start_time, end_time, options.filename_suffix))

# Plot ASD ratios
if len(ratios):
	if len(ratio_title):
		plot = ratios[0].plot(color = colors[1], title = "%s" % ratio_title, linewidth = 0.75, label = ratio_labels[0])
	else:
		plot = ratios[0].plot(color = colors[1], linewidth = 0.75, label = ratio_labels[0])

	ax = plot.gca()
	for tick in ax.xaxis.get_major_ticks():
		tick.label.set_fontsize(14)	
	for tick in ax.yaxis.get_major_ticks():
		tick.label.set_fontsize(14)
	ax.set_ylabel('ASD ratio', fontsize = 14)
	ax.set_xlabel('Frequency [Hz]', fontsize = 14)
	ax.grid(True, which = "both", linestyle = '--', dashes = (3, 9), linewidth = 0.2, color = 'black')
	leg = ax.legend(fancybox = True, fontsize = 10)
	leg.get_frame().set_alpha(0.8)
	ax.set_xlim(ratio_fmin, ratio_fmax)
	ax.set_ylim(ratio_min, ratio_max)
	for i in range(1, len(ratios)):
		ax = plot.gca()
		ax.plot(ratios[i], colors[(i + 1) % 7], linewidth = 0.75, label = ratio_labels[i])
		leg = ax.legend(fancybox = True, fontsize = 10)
		leg.get_frame().set_alpha(0.8)

	plot.save('%s_%s_%s_ASD_ratios%s.png' % (options.ifo, start_time, end_time, options.filename_suffix))
	plot.save('%s_%s_%s_ASD_ratios%s.pdf' % (options.ifo, start_time, end_time, options.filename_suffix))

